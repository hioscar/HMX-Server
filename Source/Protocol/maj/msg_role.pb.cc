// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_maj {

namespace {

const ::google::protobuf::Descriptor* SettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLogoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLogoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLogoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLogoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Title_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Title_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTitleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTitleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTitleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleWs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleWs_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* GpsUploadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpsUploadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRoleToWs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRoleToWs_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardinfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardinfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLoseGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLoseGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_cmd_role_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* money_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5frole_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5frole_2eproto() {
  protobuf_AddDesc_msg_5frole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_role.proto");
  GOOGLE_CHECK(file != NULL);
  SettingReq_descriptor_ = file->message_type(0);
  static const int SettingReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingReq, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingReq, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingReq, buzzes_),
  };
  SettingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SettingReq_descriptor_,
      SettingReq::default_instance_,
      SettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(SettingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingReq, _internal_metadata_),
      -1);
  SettingResp_descriptor_ = file->message_type(1);
  static const int SettingResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingResp, sound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingResp, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingResp, buzzes_),
  };
  SettingResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SettingResp_descriptor_,
      SettingResp::default_instance_,
      SettingResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(SettingResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingResp, _internal_metadata_),
      -1);
  SetLogoReq_descriptor_ = file->message_type(2);
  static const int SetLogoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoReq, logo_icon_),
  };
  SetLogoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLogoReq_descriptor_,
      SetLogoReq::default_instance_,
      SetLogoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(SetLogoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoReq, _internal_metadata_),
      -1);
  SetLogoResp_descriptor_ = file->message_type(3);
  static const int SetLogoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoResp, logo_icon_),
  };
  SetLogoResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLogoResp_descriptor_,
      SetLogoResp::default_instance_,
      SetLogoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(SetLogoResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLogoResp, _internal_metadata_),
      -1);
  GetTitleListReq_descriptor_ = file->message_type(4);
  static const int GetTitleListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListReq, title_),
  };
  GetTitleListReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTitleListReq_descriptor_,
      GetTitleListReq::default_instance_,
      GetTitleListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetTitleListReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListReq, _internal_metadata_),
      -1);
  Title_descriptor_ = file->message_type(5);
  static const int Title_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title, title_),
  };
  Title_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Title_descriptor_,
      Title::default_instance_,
      Title_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title, _has_bits_[0]),
      -1,
      -1,
      sizeof(Title),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Title, _internal_metadata_),
      -1);
  GetTitleListResp_descriptor_ = file->message_type(6);
  static const int GetTitleListResp_offsets_[1] = {
  };
  GetTitleListResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetTitleListResp_descriptor_,
      GetTitleListResp::default_instance_,
      GetTitleListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetTitleListResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleListResp, _internal_metadata_),
      -1);
  SetTitleReq_descriptor_ = file->message_type(7);
  static const int SetTitleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTitleReq, id_),
  };
  SetTitleReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetTitleReq_descriptor_,
      SetTitleReq::default_instance_,
      SetTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTitleReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(SetTitleReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTitleReq, _internal_metadata_),
      -1);
  SetTitleResp_descriptor_ = file->message_type(8);
  static const int SetTitleResp_offsets_[1] = {
  };
  SetTitleResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetTitleResp_descriptor_,
      SetTitleResp::default_instance_,
      SetTitleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTitleResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(SetTitleResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTitleResp, _internal_metadata_),
      -1);
  PlayerInfoReq_descriptor_ = file->message_type(9);
  static const int PlayerInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReq, uid_),
  };
  PlayerInfoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfoReq_descriptor_,
      PlayerInfoReq::default_instance_,
      PlayerInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerInfoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoReq, _internal_metadata_),
      -1);
  PlayerInfoResp_descriptor_ = file->message_type(10);
  static const int PlayerInfoResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResp, role_),
  };
  PlayerInfoResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfoResp_descriptor_,
      PlayerInfoResp::default_instance_,
      PlayerInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerInfoResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResp, _internal_metadata_),
      -1);
  Data_descriptor_ = file->message_type(11);
  static const int Data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, first_show_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, has_inv_friend_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, has_get_room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, can_get_room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, be_invitation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, play_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, recv_reward_status_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
      -1);
  Role_descriptor_ = file->message_type(12);
  static const int Role_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, sexual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, total_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, win_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, con_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, his_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, his_max_con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, week_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, top_wins_ymd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, top_wins_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, top_score_ymd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, top_score_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, blocktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, today_play_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, readname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, readcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, last_game_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, data_),
  };
  Role_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Role_descriptor_,
      Role::default_instance_,
      Role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _has_bits_[0]),
      -1,
      -1,
      sizeof(Role),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role, _internal_metadata_),
      -1);
  RoleOff_descriptor_ = file->message_type(13);
  static const int RoleOff_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, sexual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, total_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, win_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, con_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, his_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, his_max_con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, week_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, top_wins_ymd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, top_wins_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, top_score_ymd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, top_score_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, blocktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, today_play_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, readname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, readcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, last_game_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, data_),
  };
  RoleOff_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleOff_descriptor_,
      RoleOff::default_instance_,
      RoleOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleOff),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleOff, _internal_metadata_),
      -1);
  RoleWs_descriptor_ = file->message_type(14);
  static const int RoleWs_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, total_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, win_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, his_max_con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, his_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, top_score_total_),
  };
  RoleWs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleWs_descriptor_,
      RoleWs::default_instance_,
      RoleWs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleWs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWs, _internal_metadata_),
      -1);
  RoleFep_descriptor_ = file->message_type(15);
  static const int RoleFep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFep, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFep, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFep, serverid_),
  };
  RoleFep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleFep_descriptor_,
      RoleFep::default_instance_,
      RoleFep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFep, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleFep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFep, _internal_metadata_),
      -1);
  RoleC_descriptor_ = file->message_type(16);
  static const int RoleC_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, logo_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, sexual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, total_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, win_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, his_con_games_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, his_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, top_score_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, address_),
  };
  RoleC_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleC_descriptor_,
      RoleC::default_instance_,
      RoleC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleC),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleC, _internal_metadata_),
      -1);
  RoomCardData_descriptor_ = file->message_type(17);
  static const int RoomCardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCardData, room_card_),
  };
  RoomCardData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomCardData_descriptor_,
      RoomCardData::default_instance_,
      RoomCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCardData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoomCardData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCardData, _internal_metadata_),
      -1);
  UpdateRoleData_descriptor_ = file->message_type(18);
  static const int UpdateRoleData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoleData, room_card_data_),
  };
  UpdateRoleData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateRoleData_descriptor_,
      UpdateRoleData::default_instance_,
      UpdateRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoleData, _has_bits_[0]),
      -1,
      -1,
      sizeof(UpdateRoleData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoleData, _internal_metadata_),
      -1);
  MoneyLog_descriptor_ = file->message_type(19);
  static const int MoneyLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, money_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, log_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, log_time_),
  };
  MoneyLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MoneyLog_descriptor_,
      MoneyLog::default_instance_,
      MoneyLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, _has_bits_[0]),
      -1,
      -1,
      sizeof(MoneyLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyLog, _internal_metadata_),
      -1);
  GpsUploadReq_descriptor_ = file->message_type(20);
  static const int GpsUploadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUploadReq, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUploadReq, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUploadReq, address_),
  };
  GpsUploadReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GpsUploadReq_descriptor_,
      GpsUploadReq::default_instance_,
      GpsUploadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUploadReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(GpsUploadReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsUploadReq, _internal_metadata_),
      -1);
  UpdateRoleReq_descriptor_ = file->message_type(21);
  static const int UpdateRoleReq_offsets_[1] = {
  };
  UpdateRoleReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateRoleReq_descriptor_,
      UpdateRoleReq::default_instance_,
      UpdateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoleReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(UpdateRoleReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRoleReq, _internal_metadata_),
      -1);
  SyncRoleToWs_descriptor_ = file->message_type(22);
  static const int SyncRoleToWs_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, room_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, room_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, disconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, robotplaying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, hiscongames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, hismaxscore_),
  };
  SyncRoleToWs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncRoleToWs_descriptor_,
      SyncRoleToWs::default_instance_,
      SyncRoleToWs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, _has_bits_[0]),
      -1,
      -1,
      sizeof(SyncRoleToWs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRoleToWs, _internal_metadata_),
      -1);
  CardinfoReq_descriptor_ = file->message_type(23);
  static const int CardinfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardinfoReq, do_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardinfoReq, readname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardinfoReq, readcard_),
  };
  CardinfoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CardinfoReq_descriptor_,
      CardinfoReq::default_instance_,
      CardinfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardinfoReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(CardinfoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardinfoReq, _internal_metadata_),
      -1);
  NotifyLoseGame_descriptor_ = file->message_type(24);
  static const int NotifyLoseGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoseGame, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoseGame, time_),
  };
  NotifyLoseGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyLoseGame_descriptor_,
      NotifyLoseGame::default_instance_,
      NotifyLoseGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoseGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(NotifyLoseGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoseGame, _internal_metadata_),
      -1);
  c_cmd_role_descriptor_ = file->enum_type(0);
  money_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5frole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SettingReq_descriptor_, &SettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SettingResp_descriptor_, &SettingResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLogoReq_descriptor_, &SetLogoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLogoResp_descriptor_, &SetLogoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTitleListReq_descriptor_, &GetTitleListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Title_descriptor_, &Title::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetTitleListResp_descriptor_, &GetTitleListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetTitleReq_descriptor_, &SetTitleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetTitleResp_descriptor_, &SetTitleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfoReq_descriptor_, &PlayerInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfoResp_descriptor_, &PlayerInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Role_descriptor_, &Role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleOff_descriptor_, &RoleOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleWs_descriptor_, &RoleWs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleFep_descriptor_, &RoleFep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleC_descriptor_, &RoleC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomCardData_descriptor_, &RoomCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateRoleData_descriptor_, &UpdateRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MoneyLog_descriptor_, &MoneyLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GpsUploadReq_descriptor_, &GpsUploadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateRoleReq_descriptor_, &UpdateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncRoleToWs_descriptor_, &SyncRoleToWs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CardinfoReq_descriptor_, &CardinfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyLoseGame_descriptor_, &NotifyLoseGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5frole_2eproto() {
  delete SettingReq::default_instance_;
  delete SettingReq_reflection_;
  delete SettingResp::default_instance_;
  delete SettingResp_reflection_;
  delete SetLogoReq::default_instance_;
  delete SetLogoReq_reflection_;
  delete SetLogoResp::default_instance_;
  delete SetLogoResp_reflection_;
  delete GetTitleListReq::default_instance_;
  delete GetTitleListReq_reflection_;
  delete Title::default_instance_;
  delete Title_reflection_;
  delete GetTitleListResp::default_instance_;
  delete GetTitleListResp_reflection_;
  delete SetTitleReq::default_instance_;
  delete SetTitleReq_reflection_;
  delete SetTitleResp::default_instance_;
  delete SetTitleResp_reflection_;
  delete PlayerInfoReq::default_instance_;
  delete PlayerInfoReq_reflection_;
  delete PlayerInfoResp::default_instance_;
  delete PlayerInfoResp_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete Role::default_instance_;
  delete Role_reflection_;
  delete RoleOff::default_instance_;
  delete RoleOff_reflection_;
  delete RoleWs::default_instance_;
  delete RoleWs_reflection_;
  delete RoleFep::default_instance_;
  delete RoleFep_reflection_;
  delete RoleC::default_instance_;
  delete RoleC_reflection_;
  delete RoomCardData::default_instance_;
  delete RoomCardData_reflection_;
  delete UpdateRoleData::default_instance_;
  delete UpdateRoleData_reflection_;
  delete MoneyLog::default_instance_;
  delete MoneyLog_reflection_;
  delete GpsUploadReq::default_instance_;
  delete GpsUploadReq_reflection_;
  delete UpdateRoleReq::default_instance_;
  delete UpdateRoleReq_reflection_;
  delete SyncRoleToWs::default_instance_;
  delete SyncRoleToWs_reflection_;
  delete CardinfoReq::default_instance_;
  delete CardinfoReq_reflection_;
  delete NotifyLoseGame::default_instance_;
  delete NotifyLoseGame_reflection_;
}

void protobuf_AddDesc_msg_5frole_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5frole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016msg_role.proto\022\007msg_maj\":\n\nSettingReq\022"
    "\r\n\005sound\030\001 \002(\r\022\r\n\005music\030\002 \002(\r\022\016\n\006buzzes\030"
    "\003 \002(\010\";\n\013SettingResp\022\r\n\005sound\030\001 \002(\r\022\r\n\005m"
    "usic\030\002 \002(\r\022\016\n\006buzzes\030\003 \002(\010\"\037\n\nSetLogoReq"
    "\022\021\n\tlogo_icon\030\001 \002(\r\" \n\013SetLogoResp\022\021\n\tlo"
    "go_icon\030\001 \002(\r\"0\n\017GetTitleListReq\022\035\n\005titl"
    "e\030\001 \003(\0132\016.msg_maj.Title\"\"\n\005Title\022\n\n\002id\030\001"
    " \002(\r\022\r\n\005title\030\002 \002(\t\"\022\n\020GetTitleListResp\""
    "\031\n\013SetTitleReq\022\n\n\002id\030\001 \002(\r\"\016\n\014SetTitleRe"
    "sp\"\034\n\rPlayerInfoReq\022\013\n\003uid\030\001 \002(\004\".\n\016Play"
    "erInfoResp\022\034\n\004role\030\001 \002(\0132\016.msg_maj.RoleC"
    "\"\321\001\n\004Data\022\022\n\nreset_time\030\001 \001(\004\022\031\n\021first_s"
    "how_status\030\002 \001(\r\022\032\n\022has_inv_friend_num\030\003"
    " \001(\r\022\031\n\021has_get_room_card\030\004 \001(\r\022\031\n\021can_g"
    "et_room_card\030\005 \001(\r\022\030\n\020be_invitation_id\030\006"
    " \001(\r\022\022\n\nplay_games\030\007 \001(\r\022\032\n\022recv_reward_"
    "status\030\010 \001(\r\"\250\004\n\004Role\022\n\n\002id\030\001 \001(\004\022\017\n\007acc"
    "ount\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\r\n\005level\030\004 "
    "\001(\r\022\021\n\tlogo_icon\030\005 \001(\t\022\r\n\005title\030\006 \001(\r\022\017\n"
    "\007diamond\030\007 \001(\r\022\014\n\004coin\030\010 \001(\r\022\016\n\006sexual\030\t"
    " \001(\r\022\021\n\troom_card\030\n \001(\r\022\023\n\013total_games\030\013"
    " \001(\r\022\021\n\twin_games\030\014 \001(\r\022\021\n\tcon_games\030\r \001"
    "(\r\022\025\n\rhis_max_score\030\016 \001(\r\022\023\n\013his_max_con"
    "\030\017 \001(\r\022\026\n\016week_max_score\030\020 \001(\r\022\024\n\014top_wi"
    "ns_ymd\030\021 \001(\004\022\026\n\016top_wins_total\030\022 \001(\005\022\025\n\r"
    "top_score_ymd\030\023 \001(\004\022\027\n\017top_score_total\030\024"
    " \001(\005\022\021\n\tblocktime\030\025 \001(\004\022\026\n\016today_play_nu"
    "m\030\026 \001(\r\022\020\n\010readname\030\027 \001(\t\022\020\n\010readcard\030\030 "
    "\001(\t\022\025\n\rlast_game_end\030\031 \001(\004\022\022\n\nlogin_time"
    "\030\032 \001(\004\022\n\n\002ip\030\033 \001(\t\022\033\n\004data\030c \001(\0132\r.msg_m"
    "aj.Data\"\253\004\n\007RoleOff\022\n\n\002id\030\001 \001(\004\022\017\n\007accou"
    "nt\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\r\n\005level\030\004 \001("
    "\r\022\021\n\tlogo_icon\030\005 \001(\t\022\r\n\005title\030\006 \001(\r\022\017\n\007d"
    "iamond\030\007 \001(\r\022\014\n\004coin\030\010 \001(\r\022\016\n\006sexual\030\t \001"
    "(\r\022\021\n\troom_card\030\n \001(\r\022\023\n\013total_games\030\013 \001"
    "(\r\022\021\n\twin_games\030\014 \001(\r\022\021\n\tcon_games\030\r \001(\r"
    "\022\025\n\rhis_max_score\030\016 \001(\r\022\023\n\013his_max_con\030\017"
    " \001(\r\022\026\n\016week_max_score\030\020 \001(\r\022\024\n\014top_wins"
    "_ymd\030\021 \001(\004\022\026\n\016top_wins_total\030\022 \001(\005\022\025\n\rto"
    "p_score_ymd\030\023 \001(\004\022\027\n\017top_score_total\030\024 \001"
    "(\005\022\021\n\tblocktime\030\025 \001(\004\022\026\n\016today_play_num\030"
    "\026 \001(\r\022\020\n\010readname\030\027 \001(\t\022\020\n\010readcard\030\030 \001("
    "\t\022\025\n\rlast_game_end\030\031 \001(\004\022\022\n\nlogin_time\030\032"
    " \001(\004\022\n\n\002ip\030\033 \001(\t\022\033\n\004data\030c \001(\0132\r.msg_maj"
    ".Data\"\312\001\n\006RoleWs\022\n\n\002id\030\001 \001(\004\022\017\n\007account\030"
    "\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\021\n\tlogo_icon\030\004 \001"
    "(\t\022\021\n\troom_card\030\005 \001(\r\022\023\n\013total_games\030\006 \001"
    "(\r\022\021\n\twin_games\030\007 \001(\r\022\023\n\013his_max_con\030\010 \001"
    "(\r\022\025\n\rhis_max_score\030\t \001(\r\022\027\n\017top_score_t"
    "otal\030\n \001(\005\":\n\007RoleFep\022\n\n\002id\030\001 \001(\004\022\021\n\tses"
    "sionid\030\002 \001(\004\022\020\n\010serverid\030\003 \001(\r\"\333\001\n\005RoleC"
    "\022\n\n\002id\030\001 \001(\004\022\020\n\010nickname\030\002 \001(\t\022\021\n\tlogo_i"
    "con\030\003 \001(\t\022\016\n\006sexual\030\004 \001(\r\022\021\n\troom_card\030\005"
    " \001(\r\022\023\n\013total_games\030\006 \001(\r\022\021\n\twin_games\030\007"
    " \001(\r\022\025\n\rhis_con_games\030\010 \001(\r\022\025\n\rhis_max_s"
    "core\030\t \001(\r\022\027\n\017top_score_total\030\n \001(\005\022\017\n\007a"
    "ddress\030\013 \001(\t\"!\n\014RoomCardData\022\021\n\troom_car"
    "d\030\001 \001(\r\"\?\n\016UpdateRoleData\022-\n\016room_card_d"
    "ata\030\001 \001(\0132\025.msg_maj.RoomCardData\"v\n\010Mone"
    "yLog\022\016\n\006log_id\030\001 \002(\004\022\022\n\nmoney_type\030\002 \002(\005"
    "\022\021\n\tmoney_num\030\003 \002(\005\022\020\n\010log_type\030\004 \002(\005\022\017\n"
    "\007char_id\030\006 \002(\004\022\020\n\010log_time\030\007 \002(\004\"D\n\014GpsU"
    "ploadReq\022\021\n\tlongitude\030\001 \002(\001\022\020\n\010latitude\030"
    "\002 \002(\001\022\017\n\007address\030\003 \002(\t\"\017\n\rUpdateRoleReq\""
    "\246\001\n\014SyncRoleToWs\022\013\n\003uid\030\001 \002(\004\022\017\n\007room_id"
    "\030\002 \002(\004\022\021\n\troom_seat\030\003 \002(\r\022\021\n\troom_card\030\004"
    " \002(\r\022\022\n\ndisconnect\030\005 \002(\010\022\024\n\014robotPlaying"
    "\030\006 \002(\010\022\023\n\013hisConGames\030\007 \002(\r\022\023\n\013hisMaxSco"
    "re\030\010 \002(\r\"B\n\013CardinfoReq\022\017\n\007do_type\030\001 \001(\r"
    "\022\020\n\010readname\030\002 \001(\t\022\020\n\010readcard\030\003 \001(\t\"-\n\016"
    "NotifyLoseGame\022\r\n\005level\030\001 \001(\r\022\014\n\004time\030\002 "
    "\001(\r*\323\002\n\nc_cmd_role\022\017\n\013setting_req\020\001\022\020\n\014s"
    "etting_resp\020\002\022\020\n\014set_logo_req\020\003\022\021\n\rset_l"
    "ogo_resp\020\004\022\026\n\022get_title_list_req\020\005\022\027\n\023ge"
    "t_title_list_resp\020\006\022\021\n\rset_title_req\020\007\022\022"
    "\n\016set_title_resp\020\010\022\023\n\017player_info_req\020\t\022"
    "\024\n\020player_info_resp\020\n\022\023\n\017update_role_req"
    "\020\023\022\024\n\020update_role_data\020\024\022\022\n\016gps_upload_r"
    "eq\020\025\022\023\n\017sync_role_to_ws\020\026\022\020\n\014cardinfo_re"
    "q\020\027\022\024\n\020notify_lose_game\020\030*\"\n\nmoney_type\022"
    "\024\n\020money_t_roomcard\020\001", 3221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_role.proto", &protobuf_RegisterTypes);
  SettingReq::default_instance_ = new SettingReq();
  SettingResp::default_instance_ = new SettingResp();
  SetLogoReq::default_instance_ = new SetLogoReq();
  SetLogoResp::default_instance_ = new SetLogoResp();
  GetTitleListReq::default_instance_ = new GetTitleListReq();
  Title::default_instance_ = new Title();
  GetTitleListResp::default_instance_ = new GetTitleListResp();
  SetTitleReq::default_instance_ = new SetTitleReq();
  SetTitleResp::default_instance_ = new SetTitleResp();
  PlayerInfoReq::default_instance_ = new PlayerInfoReq();
  PlayerInfoResp::default_instance_ = new PlayerInfoResp();
  Data::default_instance_ = new Data();
  Role::default_instance_ = new Role();
  RoleOff::default_instance_ = new RoleOff();
  RoleWs::default_instance_ = new RoleWs();
  RoleFep::default_instance_ = new RoleFep();
  RoleC::default_instance_ = new RoleC();
  RoomCardData::default_instance_ = new RoomCardData();
  UpdateRoleData::default_instance_ = new UpdateRoleData();
  MoneyLog::default_instance_ = new MoneyLog();
  GpsUploadReq::default_instance_ = new GpsUploadReq();
  UpdateRoleReq::default_instance_ = new UpdateRoleReq();
  SyncRoleToWs::default_instance_ = new SyncRoleToWs();
  CardinfoReq::default_instance_ = new CardinfoReq();
  NotifyLoseGame::default_instance_ = new NotifyLoseGame();
  SettingReq::default_instance_->InitAsDefaultInstance();
  SettingResp::default_instance_->InitAsDefaultInstance();
  SetLogoReq::default_instance_->InitAsDefaultInstance();
  SetLogoResp::default_instance_->InitAsDefaultInstance();
  GetTitleListReq::default_instance_->InitAsDefaultInstance();
  Title::default_instance_->InitAsDefaultInstance();
  GetTitleListResp::default_instance_->InitAsDefaultInstance();
  SetTitleReq::default_instance_->InitAsDefaultInstance();
  SetTitleResp::default_instance_->InitAsDefaultInstance();
  PlayerInfoReq::default_instance_->InitAsDefaultInstance();
  PlayerInfoResp::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  Role::default_instance_->InitAsDefaultInstance();
  RoleOff::default_instance_->InitAsDefaultInstance();
  RoleWs::default_instance_->InitAsDefaultInstance();
  RoleFep::default_instance_->InitAsDefaultInstance();
  RoleC::default_instance_->InitAsDefaultInstance();
  RoomCardData::default_instance_->InitAsDefaultInstance();
  UpdateRoleData::default_instance_->InitAsDefaultInstance();
  MoneyLog::default_instance_->InitAsDefaultInstance();
  GpsUploadReq::default_instance_->InitAsDefaultInstance();
  UpdateRoleReq::default_instance_->InitAsDefaultInstance();
  SyncRoleToWs::default_instance_->InitAsDefaultInstance();
  CardinfoReq::default_instance_->InitAsDefaultInstance();
  NotifyLoseGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5frole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5frole_2eproto {
  StaticDescriptorInitializer_msg_5frole_2eproto() {
    protobuf_AddDesc_msg_5frole_2eproto();
  }
} static_descriptor_initializer_msg_5frole_2eproto_;
const ::google::protobuf::EnumDescriptor* c_cmd_role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_cmd_role_descriptor_;
}
bool c_cmd_role_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* money_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return money_type_descriptor_;
}
bool money_type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingReq::kSoundFieldNumber;
const int SettingReq::kMusicFieldNumber;
const int SettingReq::kBuzzesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingReq::SettingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SettingReq)
}

void SettingReq::InitAsDefaultInstance() {
}

SettingReq::SettingReq(const SettingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SettingReq)
}

void SettingReq::SharedCtor() {
  _cached_size_ = 0;
  sound_ = 0u;
  music_ = 0u;
  buzzes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingReq::~SettingReq() {
  // @@protoc_insertion_point(destructor:msg_maj.SettingReq)
  SharedDtor();
}

void SettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingReq_descriptor_;
}

const SettingReq& SettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SettingReq* SettingReq::default_instance_ = NULL;

SettingReq* SettingReq::New(::google::protobuf::Arena* arena) const {
  SettingReq* n = new SettingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SettingReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SettingReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SettingReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sound_, buzzes_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SettingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sound = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sound_)));
          set_has_sound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_music;
        break;
      }

      // required uint32 music = 2;
      case 2: {
        if (tag == 16) {
         parse_music:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &music_)));
          set_has_music();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buzzes;
        break;
      }

      // required bool buzzes = 3;
      case 3: {
        if (tag == 24) {
         parse_buzzes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buzzes_)));
          set_has_buzzes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SettingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SettingReq)
  return false;
#undef DO_
}

void SettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SettingReq)
  // required uint32 sound = 1;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sound(), output);
  }

  // required uint32 music = 2;
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->music(), output);
  }

  // required bool buzzes = 3;
  if (has_buzzes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->buzzes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SettingReq)
}

::google::protobuf::uint8* SettingReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SettingReq)
  // required uint32 sound = 1;
  if (has_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sound(), target);
  }

  // required uint32 music = 2;
  if (has_music()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->music(), target);
  }

  // required bool buzzes = 3;
  if (has_buzzes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->buzzes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SettingReq)
  return target;
}

int SettingReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.SettingReq)
  int total_size = 0;

  if (has_sound()) {
    // required uint32 sound = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sound());
  }

  if (has_music()) {
    // required uint32 music = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music());
  }

  if (has_buzzes()) {
    // required bool buzzes = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int SettingReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SettingReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sound = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sound());

    // required uint32 music = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music());

    // required bool buzzes = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SettingReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SettingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SettingReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SettingReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SettingReq)
    MergeFrom(*source);
  }
}

void SettingReq::MergeFrom(const SettingReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SettingReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_music()) {
      set_music(from.music());
    }
    if (from.has_buzzes()) {
      set_buzzes(from.buzzes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SettingReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SettingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingReq::CopyFrom(const SettingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SettingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SettingReq::Swap(SettingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingReq::InternalSwap(SettingReq* other) {
  std::swap(sound_, other->sound_);
  std::swap(music_, other->music_);
  std::swap(buzzes_, other->buzzes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingReq_descriptor_;
  metadata.reflection = SettingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingReq

// required uint32 sound = 1;
bool SettingReq::has_sound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SettingReq::set_has_sound() {
  _has_bits_[0] |= 0x00000001u;
}
void SettingReq::clear_has_sound() {
  _has_bits_[0] &= ~0x00000001u;
}
void SettingReq::clear_sound() {
  sound_ = 0u;
  clear_has_sound();
}
 ::google::protobuf::uint32 SettingReq::sound() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingReq.sound)
  return sound_;
}
 void SettingReq::set_sound(::google::protobuf::uint32 value) {
  set_has_sound();
  sound_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingReq.sound)
}

// required uint32 music = 2;
bool SettingReq::has_music() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SettingReq::set_has_music() {
  _has_bits_[0] |= 0x00000002u;
}
void SettingReq::clear_has_music() {
  _has_bits_[0] &= ~0x00000002u;
}
void SettingReq::clear_music() {
  music_ = 0u;
  clear_has_music();
}
 ::google::protobuf::uint32 SettingReq::music() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingReq.music)
  return music_;
}
 void SettingReq::set_music(::google::protobuf::uint32 value) {
  set_has_music();
  music_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingReq.music)
}

// required bool buzzes = 3;
bool SettingReq::has_buzzes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SettingReq::set_has_buzzes() {
  _has_bits_[0] |= 0x00000004u;
}
void SettingReq::clear_has_buzzes() {
  _has_bits_[0] &= ~0x00000004u;
}
void SettingReq::clear_buzzes() {
  buzzes_ = false;
  clear_has_buzzes();
}
 bool SettingReq::buzzes() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingReq.buzzes)
  return buzzes_;
}
 void SettingReq::set_buzzes(bool value) {
  set_has_buzzes();
  buzzes_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingReq.buzzes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingResp::kSoundFieldNumber;
const int SettingResp::kMusicFieldNumber;
const int SettingResp::kBuzzesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingResp::SettingResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SettingResp)
}

void SettingResp::InitAsDefaultInstance() {
}

SettingResp::SettingResp(const SettingResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SettingResp)
}

void SettingResp::SharedCtor() {
  _cached_size_ = 0;
  sound_ = 0u;
  music_ = 0u;
  buzzes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingResp::~SettingResp() {
  // @@protoc_insertion_point(destructor:msg_maj.SettingResp)
  SharedDtor();
}

void SettingResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SettingResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingResp_descriptor_;
}

const SettingResp& SettingResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SettingResp* SettingResp::default_instance_ = NULL;

SettingResp* SettingResp::New(::google::protobuf::Arena* arena) const {
  SettingResp* n = new SettingResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SettingResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SettingResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SettingResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SettingResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sound_, buzzes_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SettingResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SettingResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sound = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sound_)));
          set_has_sound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_music;
        break;
      }

      // required uint32 music = 2;
      case 2: {
        if (tag == 16) {
         parse_music:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &music_)));
          set_has_music();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buzzes;
        break;
      }

      // required bool buzzes = 3;
      case 3: {
        if (tag == 24) {
         parse_buzzes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buzzes_)));
          set_has_buzzes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SettingResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SettingResp)
  return false;
#undef DO_
}

void SettingResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SettingResp)
  // required uint32 sound = 1;
  if (has_sound()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sound(), output);
  }

  // required uint32 music = 2;
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->music(), output);
  }

  // required bool buzzes = 3;
  if (has_buzzes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->buzzes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SettingResp)
}

::google::protobuf::uint8* SettingResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SettingResp)
  // required uint32 sound = 1;
  if (has_sound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sound(), target);
  }

  // required uint32 music = 2;
  if (has_music()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->music(), target);
  }

  // required bool buzzes = 3;
  if (has_buzzes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->buzzes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SettingResp)
  return target;
}

int SettingResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.SettingResp)
  int total_size = 0;

  if (has_sound()) {
    // required uint32 sound = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sound());
  }

  if (has_music()) {
    // required uint32 music = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music());
  }

  if (has_buzzes()) {
    // required bool buzzes = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int SettingResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SettingResp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 sound = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sound());

    // required uint32 music = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->music());

    // required bool buzzes = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SettingResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SettingResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SettingResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SettingResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SettingResp)
    MergeFrom(*source);
  }
}

void SettingResp::MergeFrom(const SettingResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SettingResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sound()) {
      set_sound(from.sound());
    }
    if (from.has_music()) {
      set_music(from.music());
    }
    if (from.has_buzzes()) {
      set_buzzes(from.buzzes());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SettingResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SettingResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingResp::CopyFrom(const SettingResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SettingResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SettingResp::Swap(SettingResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingResp::InternalSwap(SettingResp* other) {
  std::swap(sound_, other->sound_);
  std::swap(music_, other->music_);
  std::swap(buzzes_, other->buzzes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SettingResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingResp_descriptor_;
  metadata.reflection = SettingResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SettingResp

// required uint32 sound = 1;
bool SettingResp::has_sound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SettingResp::set_has_sound() {
  _has_bits_[0] |= 0x00000001u;
}
void SettingResp::clear_has_sound() {
  _has_bits_[0] &= ~0x00000001u;
}
void SettingResp::clear_sound() {
  sound_ = 0u;
  clear_has_sound();
}
 ::google::protobuf::uint32 SettingResp::sound() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingResp.sound)
  return sound_;
}
 void SettingResp::set_sound(::google::protobuf::uint32 value) {
  set_has_sound();
  sound_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingResp.sound)
}

// required uint32 music = 2;
bool SettingResp::has_music() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SettingResp::set_has_music() {
  _has_bits_[0] |= 0x00000002u;
}
void SettingResp::clear_has_music() {
  _has_bits_[0] &= ~0x00000002u;
}
void SettingResp::clear_music() {
  music_ = 0u;
  clear_has_music();
}
 ::google::protobuf::uint32 SettingResp::music() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingResp.music)
  return music_;
}
 void SettingResp::set_music(::google::protobuf::uint32 value) {
  set_has_music();
  music_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingResp.music)
}

// required bool buzzes = 3;
bool SettingResp::has_buzzes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SettingResp::set_has_buzzes() {
  _has_bits_[0] |= 0x00000004u;
}
void SettingResp::clear_has_buzzes() {
  _has_bits_[0] &= ~0x00000004u;
}
void SettingResp::clear_buzzes() {
  buzzes_ = false;
  clear_has_buzzes();
}
 bool SettingResp::buzzes() const {
  // @@protoc_insertion_point(field_get:msg_maj.SettingResp.buzzes)
  return buzzes_;
}
 void SettingResp::set_buzzes(bool value) {
  set_has_buzzes();
  buzzes_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SettingResp.buzzes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLogoReq::kLogoIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLogoReq::SetLogoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SetLogoReq)
}

void SetLogoReq::InitAsDefaultInstance() {
}

SetLogoReq::SetLogoReq(const SetLogoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SetLogoReq)
}

void SetLogoReq::SharedCtor() {
  _cached_size_ = 0;
  logo_icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLogoReq::~SetLogoReq() {
  // @@protoc_insertion_point(destructor:msg_maj.SetLogoReq)
  SharedDtor();
}

void SetLogoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLogoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLogoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLogoReq_descriptor_;
}

const SetLogoReq& SetLogoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SetLogoReq* SetLogoReq::default_instance_ = NULL;

SetLogoReq* SetLogoReq::New(::google::protobuf::Arena* arena) const {
  SetLogoReq* n = new SetLogoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLogoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SetLogoReq)
  logo_icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SetLogoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SetLogoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logo_icon = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logo_icon_)));
          set_has_logo_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SetLogoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SetLogoReq)
  return false;
#undef DO_
}

void SetLogoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SetLogoReq)
  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logo_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SetLogoReq)
}

::google::protobuf::uint8* SetLogoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SetLogoReq)
  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logo_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SetLogoReq)
  return target;
}

int SetLogoReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SetLogoReq)
  int total_size = 0;

  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logo_icon());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLogoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SetLogoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetLogoReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLogoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SetLogoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SetLogoReq)
    MergeFrom(*source);
  }
}

void SetLogoReq::MergeFrom(const SetLogoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SetLogoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logo_icon()) {
      set_logo_icon(from.logo_icon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SetLogoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SetLogoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLogoReq::CopyFrom(const SetLogoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SetLogoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLogoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetLogoReq::Swap(SetLogoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLogoReq::InternalSwap(SetLogoReq* other) {
  std::swap(logo_icon_, other->logo_icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLogoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLogoReq_descriptor_;
  metadata.reflection = SetLogoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLogoReq

// required uint32 logo_icon = 1;
bool SetLogoReq::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetLogoReq::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000001u;
}
void SetLogoReq::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetLogoReq::clear_logo_icon() {
  logo_icon_ = 0u;
  clear_has_logo_icon();
}
 ::google::protobuf::uint32 SetLogoReq::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.SetLogoReq.logo_icon)
  return logo_icon_;
}
 void SetLogoReq::set_logo_icon(::google::protobuf::uint32 value) {
  set_has_logo_icon();
  logo_icon_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SetLogoReq.logo_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLogoResp::kLogoIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLogoResp::SetLogoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SetLogoResp)
}

void SetLogoResp::InitAsDefaultInstance() {
}

SetLogoResp::SetLogoResp(const SetLogoResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SetLogoResp)
}

void SetLogoResp::SharedCtor() {
  _cached_size_ = 0;
  logo_icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetLogoResp::~SetLogoResp() {
  // @@protoc_insertion_point(destructor:msg_maj.SetLogoResp)
  SharedDtor();
}

void SetLogoResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetLogoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLogoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLogoResp_descriptor_;
}

const SetLogoResp& SetLogoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SetLogoResp* SetLogoResp::default_instance_ = NULL;

SetLogoResp* SetLogoResp::New(::google::protobuf::Arena* arena) const {
  SetLogoResp* n = new SetLogoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLogoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SetLogoResp)
  logo_icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SetLogoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SetLogoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 logo_icon = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logo_icon_)));
          set_has_logo_icon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SetLogoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SetLogoResp)
  return false;
#undef DO_
}

void SetLogoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SetLogoResp)
  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logo_icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SetLogoResp)
}

::google::protobuf::uint8* SetLogoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SetLogoResp)
  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logo_icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SetLogoResp)
  return target;
}

int SetLogoResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SetLogoResp)
  int total_size = 0;

  // required uint32 logo_icon = 1;
  if (has_logo_icon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logo_icon());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLogoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SetLogoResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetLogoResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLogoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SetLogoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SetLogoResp)
    MergeFrom(*source);
  }
}

void SetLogoResp::MergeFrom(const SetLogoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SetLogoResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logo_icon()) {
      set_logo_icon(from.logo_icon());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SetLogoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SetLogoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLogoResp::CopyFrom(const SetLogoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SetLogoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLogoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetLogoResp::Swap(SetLogoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLogoResp::InternalSwap(SetLogoResp* other) {
  std::swap(logo_icon_, other->logo_icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLogoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLogoResp_descriptor_;
  metadata.reflection = SetLogoResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLogoResp

// required uint32 logo_icon = 1;
bool SetLogoResp::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetLogoResp::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000001u;
}
void SetLogoResp::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetLogoResp::clear_logo_icon() {
  logo_icon_ = 0u;
  clear_has_logo_icon();
}
 ::google::protobuf::uint32 SetLogoResp::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.SetLogoResp.logo_icon)
  return logo_icon_;
}
 void SetLogoResp::set_logo_icon(::google::protobuf::uint32 value) {
  set_has_logo_icon();
  logo_icon_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SetLogoResp.logo_icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTitleListReq::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTitleListReq::GetTitleListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.GetTitleListReq)
}

void GetTitleListReq::InitAsDefaultInstance() {
}

GetTitleListReq::GetTitleListReq(const GetTitleListReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.GetTitleListReq)
}

void GetTitleListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleListReq::~GetTitleListReq() {
  // @@protoc_insertion_point(destructor:msg_maj.GetTitleListReq)
  SharedDtor();
}

void GetTitleListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTitleListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleListReq_descriptor_;
}

const GetTitleListReq& GetTitleListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

GetTitleListReq* GetTitleListReq::default_instance_ = NULL;

GetTitleListReq* GetTitleListReq::New(::google::protobuf::Arena* arena) const {
  GetTitleListReq* n = new GetTitleListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTitleListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.GetTitleListReq)
  title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetTitleListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.GetTitleListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_maj.Title title = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_title()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_title;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.GetTitleListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.GetTitleListReq)
  return false;
#undef DO_
}

void GetTitleListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.GetTitleListReq)
  // repeated .msg_maj.Title title = 1;
  for (unsigned int i = 0, n = this->title_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->title(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.GetTitleListReq)
}

::google::protobuf::uint8* GetTitleListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.GetTitleListReq)
  // repeated .msg_maj.Title title = 1;
  for (unsigned int i = 0, n = this->title_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->title(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.GetTitleListReq)
  return target;
}

int GetTitleListReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.GetTitleListReq)
  int total_size = 0;

  // repeated .msg_maj.Title title = 1;
  total_size += 1 * this->title_size();
  for (int i = 0; i < this->title_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.GetTitleListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTitleListReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTitleListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.GetTitleListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.GetTitleListReq)
    MergeFrom(*source);
  }
}

void GetTitleListReq::MergeFrom(const GetTitleListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.GetTitleListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  title_.MergeFrom(from.title_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetTitleListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.GetTitleListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleListReq::CopyFrom(const GetTitleListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.GetTitleListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleListReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->title())) return false;
  return true;
}

void GetTitleListReq::Swap(GetTitleListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTitleListReq::InternalSwap(GetTitleListReq* other) {
  title_.UnsafeArenaSwap(&other->title_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTitleListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleListReq_descriptor_;
  metadata.reflection = GetTitleListReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTitleListReq

// repeated .msg_maj.Title title = 1;
int GetTitleListReq::title_size() const {
  return title_.size();
}
void GetTitleListReq::clear_title() {
  title_.Clear();
}
const ::msg_maj::Title& GetTitleListReq::title(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.GetTitleListReq.title)
  return title_.Get(index);
}
::msg_maj::Title* GetTitleListReq::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.GetTitleListReq.title)
  return title_.Mutable(index);
}
::msg_maj::Title* GetTitleListReq::add_title() {
  // @@protoc_insertion_point(field_add:msg_maj.GetTitleListReq.title)
  return title_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::Title >*
GetTitleListReq::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.GetTitleListReq.title)
  return &title_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::Title >&
GetTitleListReq::title() const {
  // @@protoc_insertion_point(field_list:msg_maj.GetTitleListReq.title)
  return title_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Title::kIdFieldNumber;
const int Title::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Title::Title()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.Title)
}

void Title::InitAsDefaultInstance() {
}

Title::Title(const Title& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.Title)
}

void Title::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Title::~Title() {
  // @@protoc_insertion_point(destructor:msg_maj.Title)
  SharedDtor();
}

void Title::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Title::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Title::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Title_descriptor_;
}

const Title& Title::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

Title* Title::default_instance_ = NULL;

Title* Title::New(::google::protobuf::Arena* arena) const {
  Title* n = new Title;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Title::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.Title)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0u;
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Title::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.Title)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Title.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.Title)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.Title)
  return false;
#undef DO_
}

void Title::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.Title)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Title.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.Title)
}

::google::protobuf::uint8* Title::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.Title)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Title.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.Title)
  return target;
}

int Title::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.Title)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_title()) {
    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  return total_size;
}
int Title::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.Title)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required string title = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Title::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Title* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Title>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.Title)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.Title)
    MergeFrom(*source);
  }
}

void Title::MergeFrom(const Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.Title)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Title::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title::CopyFrom(const Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Title::Swap(Title* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Title::InternalSwap(Title* other) {
  std::swap(id_, other->id_);
  title_.Swap(&other->title_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Title::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Title_descriptor_;
  metadata.reflection = Title_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Title

// required uint32 id = 1;
bool Title::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Title::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Title::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Title::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 Title::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.Title.id)
  return id_;
}
 void Title::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Title.id)
}

// required string title = 2;
bool Title::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Title::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void Title::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void Title::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
 const ::std::string& Title::title() const {
  // @@protoc_insertion_point(field_get:msg_maj.Title.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Title::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Title.title)
}
 void Title::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Title.title)
}
 void Title::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Title.title)
}
 ::std::string* Title::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:msg_maj.Title.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Title::release_title() {
  // @@protoc_insertion_point(field_release:msg_maj.Title.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Title::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Title.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTitleListResp::GetTitleListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.GetTitleListResp)
}

void GetTitleListResp::InitAsDefaultInstance() {
}

GetTitleListResp::GetTitleListResp(const GetTitleListResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.GetTitleListResp)
}

void GetTitleListResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleListResp::~GetTitleListResp() {
  // @@protoc_insertion_point(destructor:msg_maj.GetTitleListResp)
  SharedDtor();
}

void GetTitleListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTitleListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleListResp_descriptor_;
}

const GetTitleListResp& GetTitleListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

GetTitleListResp* GetTitleListResp::default_instance_ = NULL;

GetTitleListResp* GetTitleListResp::New(::google::protobuf::Arena* arena) const {
  GetTitleListResp* n = new GetTitleListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTitleListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.GetTitleListResp)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetTitleListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.GetTitleListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.GetTitleListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.GetTitleListResp)
  return false;
#undef DO_
}

void GetTitleListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.GetTitleListResp)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.GetTitleListResp)
}

::google::protobuf::uint8* GetTitleListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.GetTitleListResp)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.GetTitleListResp)
  return target;
}

int GetTitleListResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.GetTitleListResp)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.GetTitleListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetTitleListResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTitleListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.GetTitleListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.GetTitleListResp)
    MergeFrom(*source);
  }
}

void GetTitleListResp::MergeFrom(const GetTitleListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.GetTitleListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetTitleListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.GetTitleListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleListResp::CopyFrom(const GetTitleListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.GetTitleListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleListResp::IsInitialized() const {

  return true;
}

void GetTitleListResp::Swap(GetTitleListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTitleListResp::InternalSwap(GetTitleListResp* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTitleListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleListResp_descriptor_;
  metadata.reflection = GetTitleListResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetTitleListResp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTitleReq::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTitleReq::SetTitleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SetTitleReq)
}

void SetTitleReq::InitAsDefaultInstance() {
}

SetTitleReq::SetTitleReq(const SetTitleReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SetTitleReq)
}

void SetTitleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTitleReq::~SetTitleReq() {
  // @@protoc_insertion_point(destructor:msg_maj.SetTitleReq)
  SharedDtor();
}

void SetTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTitleReq_descriptor_;
}

const SetTitleReq& SetTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SetTitleReq* SetTitleReq::default_instance_ = NULL;

SetTitleReq* SetTitleReq::New(::google::protobuf::Arena* arena) const {
  SetTitleReq* n = new SetTitleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTitleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SetTitleReq)
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SetTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SetTitleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SetTitleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SetTitleReq)
  return false;
#undef DO_
}

void SetTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SetTitleReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SetTitleReq)
}

::google::protobuf::uint8* SetTitleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SetTitleReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SetTitleReq)
  return target;
}

int SetTitleReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SetTitleReq)
  int total_size = 0;

  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SetTitleReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetTitleReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTitleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SetTitleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SetTitleReq)
    MergeFrom(*source);
  }
}

void SetTitleReq::MergeFrom(const SetTitleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SetTitleReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SetTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SetTitleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTitleReq::CopyFrom(const SetTitleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SetTitleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTitleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetTitleReq::Swap(SetTitleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTitleReq::InternalSwap(SetTitleReq* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTitleReq_descriptor_;
  metadata.reflection = SetTitleReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTitleReq

// required uint32 id = 1;
bool SetTitleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetTitleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SetTitleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetTitleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 SetTitleReq::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.SetTitleReq.id)
  return id_;
}
 void SetTitleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SetTitleReq.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTitleResp::SetTitleResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SetTitleResp)
}

void SetTitleResp::InitAsDefaultInstance() {
}

SetTitleResp::SetTitleResp(const SetTitleResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SetTitleResp)
}

void SetTitleResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTitleResp::~SetTitleResp() {
  // @@protoc_insertion_point(destructor:msg_maj.SetTitleResp)
  SharedDtor();
}

void SetTitleResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTitleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTitleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTitleResp_descriptor_;
}

const SetTitleResp& SetTitleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SetTitleResp* SetTitleResp::default_instance_ = NULL;

SetTitleResp* SetTitleResp::New(::google::protobuf::Arena* arena) const {
  SetTitleResp* n = new SetTitleResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetTitleResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SetTitleResp)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SetTitleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SetTitleResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SetTitleResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SetTitleResp)
  return false;
#undef DO_
}

void SetTitleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SetTitleResp)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SetTitleResp)
}

::google::protobuf::uint8* SetTitleResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SetTitleResp)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SetTitleResp)
  return target;
}

int SetTitleResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SetTitleResp)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTitleResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SetTitleResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetTitleResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetTitleResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SetTitleResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SetTitleResp)
    MergeFrom(*source);
  }
}

void SetTitleResp::MergeFrom(const SetTitleResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SetTitleResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SetTitleResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SetTitleResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTitleResp::CopyFrom(const SetTitleResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SetTitleResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTitleResp::IsInitialized() const {

  return true;
}

void SetTitleResp::Swap(SetTitleResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTitleResp::InternalSwap(SetTitleResp* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetTitleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTitleResp_descriptor_;
  metadata.reflection = SetTitleResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetTitleResp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoReq::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoReq::PlayerInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.PlayerInfoReq)
}

void PlayerInfoReq::InitAsDefaultInstance() {
}

PlayerInfoReq::PlayerInfoReq(const PlayerInfoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.PlayerInfoReq)
}

void PlayerInfoReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoReq::~PlayerInfoReq() {
  // @@protoc_insertion_point(destructor:msg_maj.PlayerInfoReq)
  SharedDtor();
}

void PlayerInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoReq_descriptor_;
}

const PlayerInfoReq& PlayerInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

PlayerInfoReq* PlayerInfoReq::default_instance_ = NULL;

PlayerInfoReq* PlayerInfoReq::New(::google::protobuf::Arena* arena) const {
  PlayerInfoReq* n = new PlayerInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.PlayerInfoReq)
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.PlayerInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.PlayerInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.PlayerInfoReq)
  return false;
#undef DO_
}

void PlayerInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.PlayerInfoReq)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.PlayerInfoReq)
}

::google::protobuf::uint8* PlayerInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.PlayerInfoReq)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.PlayerInfoReq)
  return target;
}

int PlayerInfoReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.PlayerInfoReq)
  int total_size = 0;

  // required uint64 uid = 1;
  if (has_uid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.PlayerInfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfoReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.PlayerInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.PlayerInfoReq)
    MergeFrom(*source);
  }
}

void PlayerInfoReq::MergeFrom(const PlayerInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.PlayerInfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.PlayerInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoReq::CopyFrom(const PlayerInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.PlayerInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerInfoReq::Swap(PlayerInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoReq::InternalSwap(PlayerInfoReq* other) {
  std::swap(uid_, other->uid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoReq_descriptor_;
  metadata.reflection = PlayerInfoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoReq

// required uint64 uid = 1;
bool PlayerInfoReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 PlayerInfoReq::uid() const {
  // @@protoc_insertion_point(field_get:msg_maj.PlayerInfoReq.uid)
  return uid_;
}
 void PlayerInfoReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.PlayerInfoReq.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoResp::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoResp::PlayerInfoResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.PlayerInfoResp)
}

void PlayerInfoResp::InitAsDefaultInstance() {
  role_ = const_cast< ::msg_maj::RoleC*>(&::msg_maj::RoleC::default_instance());
}

PlayerInfoResp::PlayerInfoResp(const PlayerInfoResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.PlayerInfoResp)
}

void PlayerInfoResp::SharedCtor() {
  _cached_size_ = 0;
  role_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoResp::~PlayerInfoResp() {
  // @@protoc_insertion_point(destructor:msg_maj.PlayerInfoResp)
  SharedDtor();
}

void PlayerInfoResp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void PlayerInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoResp_descriptor_;
}

const PlayerInfoResp& PlayerInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

PlayerInfoResp* PlayerInfoResp::default_instance_ = NULL;

PlayerInfoResp* PlayerInfoResp::New(::google::protobuf::Arena* arena) const {
  PlayerInfoResp* n = new PlayerInfoResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.PlayerInfoResp)
  if (has_role()) {
    if (role_ != NULL) role_->::msg_maj::RoleC::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.PlayerInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.RoleC role = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.PlayerInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.PlayerInfoResp)
  return false;
#undef DO_
}

void PlayerInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.PlayerInfoResp)
  // required .msg_maj.RoleC role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->role_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.PlayerInfoResp)
}

::google::protobuf::uint8* PlayerInfoResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.PlayerInfoResp)
  // required .msg_maj.RoleC role = 1;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->role_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.PlayerInfoResp)
  return target;
}

int PlayerInfoResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.PlayerInfoResp)
  int total_size = 0;

  // required .msg_maj.RoleC role = 1;
  if (has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->role_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.PlayerInfoResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfoResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.PlayerInfoResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.PlayerInfoResp)
    MergeFrom(*source);
  }
}

void PlayerInfoResp::MergeFrom(const PlayerInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.PlayerInfoResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      mutable_role()->::msg_maj::RoleC::MergeFrom(from.role());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.PlayerInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoResp::CopyFrom(const PlayerInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.PlayerInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerInfoResp::Swap(PlayerInfoResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoResp::InternalSwap(PlayerInfoResp* other) {
  std::swap(role_, other->role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoResp_descriptor_;
  metadata.reflection = PlayerInfoResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoResp

// required .msg_maj.RoleC role = 1;
bool PlayerInfoResp::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoResp::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoResp::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoResp::clear_role() {
  if (role_ != NULL) role_->::msg_maj::RoleC::Clear();
  clear_has_role();
}
const ::msg_maj::RoleC& PlayerInfoResp::role() const {
  // @@protoc_insertion_point(field_get:msg_maj.PlayerInfoResp.role)
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
::msg_maj::RoleC* PlayerInfoResp::mutable_role() {
  set_has_role();
  if (role_ == NULL) {
    role_ = new ::msg_maj::RoleC;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.PlayerInfoResp.role)
  return role_;
}
::msg_maj::RoleC* PlayerInfoResp::release_role() {
  // @@protoc_insertion_point(field_release:msg_maj.PlayerInfoResp.role)
  clear_has_role();
  ::msg_maj::RoleC* temp = role_;
  role_ = NULL;
  return temp;
}
void PlayerInfoResp::set_allocated_role(::msg_maj::RoleC* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.PlayerInfoResp.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kResetTimeFieldNumber;
const int Data::kFirstShowStatusFieldNumber;
const int Data::kHasInvFriendNumFieldNumber;
const int Data::kHasGetRoomCardFieldNumber;
const int Data::kCanGetRoomCardFieldNumber;
const int Data::kBeInvitationIdFieldNumber;
const int Data::kPlayGamesFieldNumber;
const int Data::kRecvRewardStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  reset_time_ = GOOGLE_ULONGLONG(0);
  first_show_status_ = 0u;
  has_inv_friend_num_ = 0u;
  has_get_room_card_ = 0u;
  can_get_room_card_ = 0u;
  be_invitation_id_ = 0u;
  play_games_ = 0u;
  recv_reward_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:msg_maj.Data)
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.Data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(reset_time_, recv_reward_status_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reset_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_first_show_status;
        break;
      }

      // optional uint32 first_show_status = 2;
      case 2: {
        if (tag == 16) {
         parse_first_show_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_show_status_)));
          set_has_first_show_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_has_inv_friend_num;
        break;
      }

      // optional uint32 has_inv_friend_num = 3;
      case 3: {
        if (tag == 24) {
         parse_has_inv_friend_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_inv_friend_num_)));
          set_has_has_inv_friend_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_has_get_room_card;
        break;
      }

      // optional uint32 has_get_room_card = 4;
      case 4: {
        if (tag == 32) {
         parse_has_get_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &has_get_room_card_)));
          set_has_has_get_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_can_get_room_card;
        break;
      }

      // optional uint32 can_get_room_card = 5;
      case 5: {
        if (tag == 40) {
         parse_can_get_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_get_room_card_)));
          set_has_can_get_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_be_invitation_id;
        break;
      }

      // optional uint32 be_invitation_id = 6;
      case 6: {
        if (tag == 48) {
         parse_be_invitation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_invitation_id_)));
          set_has_be_invitation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_play_games;
        break;
      }

      // optional uint32 play_games = 7;
      case 7: {
        if (tag == 56) {
         parse_play_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_games_)));
          set_has_play_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recv_reward_status;
        break;
      }

      // optional uint32 recv_reward_status = 8;
      case 8: {
        if (tag == 64) {
         parse_recv_reward_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_reward_status_)));
          set_has_recv_reward_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.Data)
  // optional uint64 reset_time = 1;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reset_time(), output);
  }

  // optional uint32 first_show_status = 2;
  if (has_first_show_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first_show_status(), output);
  }

  // optional uint32 has_inv_friend_num = 3;
  if (has_has_inv_friend_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->has_inv_friend_num(), output);
  }

  // optional uint32 has_get_room_card = 4;
  if (has_has_get_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->has_get_room_card(), output);
  }

  // optional uint32 can_get_room_card = 5;
  if (has_can_get_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->can_get_room_card(), output);
  }

  // optional uint32 be_invitation_id = 6;
  if (has_be_invitation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->be_invitation_id(), output);
  }

  // optional uint32 play_games = 7;
  if (has_play_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->play_games(), output);
  }

  // optional uint32 recv_reward_status = 8;
  if (has_recv_reward_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recv_reward_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.Data)
  // optional uint64 reset_time = 1;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reset_time(), target);
  }

  // optional uint32 first_show_status = 2;
  if (has_first_show_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first_show_status(), target);
  }

  // optional uint32 has_inv_friend_num = 3;
  if (has_has_inv_friend_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->has_inv_friend_num(), target);
  }

  // optional uint32 has_get_room_card = 4;
  if (has_has_get_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->has_get_room_card(), target);
  }

  // optional uint32 can_get_room_card = 5;
  if (has_can_get_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->can_get_room_card(), target);
  }

  // optional uint32 be_invitation_id = 6;
  if (has_be_invitation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->be_invitation_id(), target);
  }

  // optional uint32 play_games = 7;
  if (has_play_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->play_games(), target);
  }

  // optional uint32 recv_reward_status = 8;
  if (has_recv_reward_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recv_reward_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.Data)
  return target;
}

int Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.Data)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 reset_time = 1;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reset_time());
    }

    // optional uint32 first_show_status = 2;
    if (has_first_show_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_show_status());
    }

    // optional uint32 has_inv_friend_num = 3;
    if (has_has_inv_friend_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->has_inv_friend_num());
    }

    // optional uint32 has_get_room_card = 4;
    if (has_has_get_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->has_get_room_card());
    }

    // optional uint32 can_get_room_card = 5;
    if (has_can_get_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_get_room_card());
    }

    // optional uint32 be_invitation_id = 6;
    if (has_be_invitation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->be_invitation_id());
    }

    // optional uint32 play_games = 7;
    if (has_play_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_games());
    }

    // optional uint32 recv_reward_status = 8;
    if (has_recv_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_reward_status());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
    if (from.has_first_show_status()) {
      set_first_show_status(from.first_show_status());
    }
    if (from.has_has_inv_friend_num()) {
      set_has_inv_friend_num(from.has_inv_friend_num());
    }
    if (from.has_has_get_room_card()) {
      set_has_get_room_card(from.has_get_room_card());
    }
    if (from.has_can_get_room_card()) {
      set_can_get_room_card(from.can_get_room_card());
    }
    if (from.has_be_invitation_id()) {
      set_be_invitation_id(from.be_invitation_id());
    }
    if (from.has_play_games()) {
      set_play_games(from.play_games());
    }
    if (from.has_recv_reward_status()) {
      set_recv_reward_status(from.recv_reward_status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  std::swap(reset_time_, other->reset_time_);
  std::swap(first_show_status_, other->first_show_status_);
  std::swap(has_inv_friend_num_, other->has_inv_friend_num_);
  std::swap(has_get_room_card_, other->has_get_room_card_);
  std::swap(can_get_room_card_, other->can_get_room_card_);
  std::swap(be_invitation_id_, other->be_invitation_id_);
  std::swap(play_games_, other->play_games_);
  std::swap(recv_reward_status_, other->recv_reward_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// optional uint64 reset_time = 1;
bool Data::has_reset_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Data::set_has_reset_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Data::clear_has_reset_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Data::clear_reset_time() {
  reset_time_ = GOOGLE_ULONGLONG(0);
  clear_has_reset_time();
}
 ::google::protobuf::uint64 Data::reset_time() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.reset_time)
  return reset_time_;
}
 void Data::set_reset_time(::google::protobuf::uint64 value) {
  set_has_reset_time();
  reset_time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.reset_time)
}

// optional uint32 first_show_status = 2;
bool Data::has_first_show_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Data::set_has_first_show_status() {
  _has_bits_[0] |= 0x00000002u;
}
void Data::clear_has_first_show_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void Data::clear_first_show_status() {
  first_show_status_ = 0u;
  clear_has_first_show_status();
}
 ::google::protobuf::uint32 Data::first_show_status() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.first_show_status)
  return first_show_status_;
}
 void Data::set_first_show_status(::google::protobuf::uint32 value) {
  set_has_first_show_status();
  first_show_status_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.first_show_status)
}

// optional uint32 has_inv_friend_num = 3;
bool Data::has_has_inv_friend_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Data::set_has_has_inv_friend_num() {
  _has_bits_[0] |= 0x00000004u;
}
void Data::clear_has_has_inv_friend_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void Data::clear_has_inv_friend_num() {
  has_inv_friend_num_ = 0u;
  clear_has_has_inv_friend_num();
}
 ::google::protobuf::uint32 Data::has_inv_friend_num() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.has_inv_friend_num)
  return has_inv_friend_num_;
}
 void Data::set_has_inv_friend_num(::google::protobuf::uint32 value) {
  set_has_has_inv_friend_num();
  has_inv_friend_num_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.has_inv_friend_num)
}

// optional uint32 has_get_room_card = 4;
bool Data::has_has_get_room_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Data::set_has_has_get_room_card() {
  _has_bits_[0] |= 0x00000008u;
}
void Data::clear_has_has_get_room_card() {
  _has_bits_[0] &= ~0x00000008u;
}
void Data::clear_has_get_room_card() {
  has_get_room_card_ = 0u;
  clear_has_has_get_room_card();
}
 ::google::protobuf::uint32 Data::has_get_room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.has_get_room_card)
  return has_get_room_card_;
}
 void Data::set_has_get_room_card(::google::protobuf::uint32 value) {
  set_has_has_get_room_card();
  has_get_room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.has_get_room_card)
}

// optional uint32 can_get_room_card = 5;
bool Data::has_can_get_room_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Data::set_has_can_get_room_card() {
  _has_bits_[0] |= 0x00000010u;
}
void Data::clear_has_can_get_room_card() {
  _has_bits_[0] &= ~0x00000010u;
}
void Data::clear_can_get_room_card() {
  can_get_room_card_ = 0u;
  clear_has_can_get_room_card();
}
 ::google::protobuf::uint32 Data::can_get_room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.can_get_room_card)
  return can_get_room_card_;
}
 void Data::set_can_get_room_card(::google::protobuf::uint32 value) {
  set_has_can_get_room_card();
  can_get_room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.can_get_room_card)
}

// optional uint32 be_invitation_id = 6;
bool Data::has_be_invitation_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Data::set_has_be_invitation_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Data::clear_has_be_invitation_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Data::clear_be_invitation_id() {
  be_invitation_id_ = 0u;
  clear_has_be_invitation_id();
}
 ::google::protobuf::uint32 Data::be_invitation_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.be_invitation_id)
  return be_invitation_id_;
}
 void Data::set_be_invitation_id(::google::protobuf::uint32 value) {
  set_has_be_invitation_id();
  be_invitation_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.be_invitation_id)
}

// optional uint32 play_games = 7;
bool Data::has_play_games() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Data::set_has_play_games() {
  _has_bits_[0] |= 0x00000040u;
}
void Data::clear_has_play_games() {
  _has_bits_[0] &= ~0x00000040u;
}
void Data::clear_play_games() {
  play_games_ = 0u;
  clear_has_play_games();
}
 ::google::protobuf::uint32 Data::play_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.play_games)
  return play_games_;
}
 void Data::set_play_games(::google::protobuf::uint32 value) {
  set_has_play_games();
  play_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.play_games)
}

// optional uint32 recv_reward_status = 8;
bool Data::has_recv_reward_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Data::set_has_recv_reward_status() {
  _has_bits_[0] |= 0x00000080u;
}
void Data::clear_has_recv_reward_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void Data::clear_recv_reward_status() {
  recv_reward_status_ = 0u;
  clear_has_recv_reward_status();
}
 ::google::protobuf::uint32 Data::recv_reward_status() const {
  // @@protoc_insertion_point(field_get:msg_maj.Data.recv_reward_status)
  return recv_reward_status_;
}
 void Data::set_recv_reward_status(::google::protobuf::uint32 value) {
  set_has_recv_reward_status();
  recv_reward_status_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Data.recv_reward_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Role::kIdFieldNumber;
const int Role::kAccountFieldNumber;
const int Role::kNicknameFieldNumber;
const int Role::kLevelFieldNumber;
const int Role::kLogoIconFieldNumber;
const int Role::kTitleFieldNumber;
const int Role::kDiamondFieldNumber;
const int Role::kCoinFieldNumber;
const int Role::kSexualFieldNumber;
const int Role::kRoomCardFieldNumber;
const int Role::kTotalGamesFieldNumber;
const int Role::kWinGamesFieldNumber;
const int Role::kConGamesFieldNumber;
const int Role::kHisMaxScoreFieldNumber;
const int Role::kHisMaxConFieldNumber;
const int Role::kWeekMaxScoreFieldNumber;
const int Role::kTopWinsYmdFieldNumber;
const int Role::kTopWinsTotalFieldNumber;
const int Role::kTopScoreYmdFieldNumber;
const int Role::kTopScoreTotalFieldNumber;
const int Role::kBlocktimeFieldNumber;
const int Role::kTodayPlayNumFieldNumber;
const int Role::kReadnameFieldNumber;
const int Role::kReadcardFieldNumber;
const int Role::kLastGameEndFieldNumber;
const int Role::kLoginTimeFieldNumber;
const int Role::kIpFieldNumber;
const int Role::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Role::Role()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.Role)
}

void Role::InitAsDefaultInstance() {
  data_ = const_cast< ::msg_maj::Data*>(&::msg_maj::Data::default_instance());
}

Role::Role(const Role& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.Role)
}

void Role::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  logo_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0u;
  diamond_ = 0u;
  coin_ = 0u;
  sexual_ = 0u;
  room_card_ = 0u;
  total_games_ = 0u;
  win_games_ = 0u;
  con_games_ = 0u;
  his_max_score_ = 0u;
  his_max_con_ = 0u;
  week_max_score_ = 0u;
  top_wins_ymd_ = GOOGLE_ULONGLONG(0);
  top_wins_total_ = 0;
  top_score_ymd_ = GOOGLE_ULONGLONG(0);
  top_score_total_ = 0;
  blocktime_ = GOOGLE_ULONGLONG(0);
  today_play_num_ = 0u;
  readname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_game_end_ = GOOGLE_ULONGLONG(0);
  login_time_ = GOOGLE_ULONGLONG(0);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:msg_maj.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_;
  }
}

void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role_descriptor_;
}

const Role& Role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

Role* Role::default_instance_ = NULL;

Role* Role::New(::google::protobuf::Arena* arena) const {
  Role* n = new Role;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.Role)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Role, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Role*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(level_, coin_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_logo_icon()) {
      logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(sexual_, week_max_score_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(top_wins_ymd_, blocktime_);
    today_play_num_ = 0u;
    if (has_readname()) {
      readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_readcard()) {
      readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    ZR_(last_game_end_, login_time_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      if (data_ != NULL) data_->::msg_maj::Data::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_logo_icon;
        break;
      }

      // optional string logo_icon = 5;
      case 5: {
        if (tag == 42) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_icon().data(), this->logo_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.logo_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (tag == 48) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 7;
      case 7: {
        if (tag == 56) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sexual;
        break;
      }

      // optional uint32 sexual = 9;
      case 9: {
        if (tag == 72) {
         parse_sexual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sexual_)));
          set_has_sexual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_room_card;
        break;
      }

      // optional uint32 room_card = 10;
      case 10: {
        if (tag == 80) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_games;
        break;
      }

      // optional uint32 total_games = 11;
      case 11: {
        if (tag == 88) {
         parse_total_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_)));
          set_has_total_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_win_games;
        break;
      }

      // optional uint32 win_games = 12;
      case 12: {
        if (tag == 96) {
         parse_win_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_games_)));
          set_has_win_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_con_games;
        break;
      }

      // optional uint32 con_games = 13;
      case 13: {
        if (tag == 104) {
         parse_con_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_games_)));
          set_has_con_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_his_max_score;
        break;
      }

      // optional uint32 his_max_score = 14;
      case 14: {
        if (tag == 112) {
         parse_his_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_score_)));
          set_has_his_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_his_max_con;
        break;
      }

      // optional uint32 his_max_con = 15;
      case 15: {
        if (tag == 120) {
         parse_his_max_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_con_)));
          set_has_his_max_con();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_week_max_score;
        break;
      }

      // optional uint32 week_max_score = 16;
      case 16: {
        if (tag == 128) {
         parse_week_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_max_score_)));
          set_has_week_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_top_wins_ymd;
        break;
      }

      // optional uint64 top_wins_ymd = 17;
      case 17: {
        if (tag == 136) {
         parse_top_wins_ymd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &top_wins_ymd_)));
          set_has_top_wins_ymd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_top_wins_total;
        break;
      }

      // optional int32 top_wins_total = 18;
      case 18: {
        if (tag == 144) {
         parse_top_wins_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_wins_total_)));
          set_has_top_wins_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_top_score_ymd;
        break;
      }

      // optional uint64 top_score_ymd = 19;
      case 19: {
        if (tag == 152) {
         parse_top_score_ymd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &top_score_ymd_)));
          set_has_top_score_ymd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_top_score_total;
        break;
      }

      // optional int32 top_score_total = 20;
      case 20: {
        if (tag == 160) {
         parse_top_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_score_total_)));
          set_has_top_score_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_blocktime;
        break;
      }

      // optional uint64 blocktime = 21;
      case 21: {
        if (tag == 168) {
         parse_blocktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocktime_)));
          set_has_blocktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_today_play_num;
        break;
      }

      // optional uint32 today_play_num = 22;
      case 22: {
        if (tag == 176) {
         parse_today_play_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_play_num_)));
          set_has_today_play_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_readname;
        break;
      }

      // optional string readname = 23;
      case 23: {
        if (tag == 186) {
         parse_readname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readname().data(), this->readname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.readname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_readcard;
        break;
      }

      // optional string readcard = 24;
      case 24: {
        if (tag == 194) {
         parse_readcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readcard().data(), this->readcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.readcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_last_game_end;
        break;
      }

      // optional uint64 last_game_end = 25;
      case 25: {
        if (tag == 200) {
         parse_last_game_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_game_end_)));
          set_has_last_game_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 26;
      case 26: {
        if (tag == 208) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_ip;
        break;
      }

      // optional string ip = 27;
      case 27: {
        if (tag == 218) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.Role.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_data;
        break;
      }

      // optional .msg_maj.Data data = 99;
      case 99: {
        if (tag == 794) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.Role)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional string logo_icon = 5;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.logo_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->logo_icon(), output);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional uint32 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->diamond(), output);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // optional uint32 sexual = 9;
  if (has_sexual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sexual(), output);
  }

  // optional uint32 room_card = 10;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->room_card(), output);
  }

  // optional uint32 total_games = 11;
  if (has_total_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_games(), output);
  }

  // optional uint32 win_games = 12;
  if (has_win_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->win_games(), output);
  }

  // optional uint32 con_games = 13;
  if (has_con_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->con_games(), output);
  }

  // optional uint32 his_max_score = 14;
  if (has_his_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->his_max_score(), output);
  }

  // optional uint32 his_max_con = 15;
  if (has_his_max_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->his_max_con(), output);
  }

  // optional uint32 week_max_score = 16;
  if (has_week_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->week_max_score(), output);
  }

  // optional uint64 top_wins_ymd = 17;
  if (has_top_wins_ymd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->top_wins_ymd(), output);
  }

  // optional int32 top_wins_total = 18;
  if (has_top_wins_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->top_wins_total(), output);
  }

  // optional uint64 top_score_ymd = 19;
  if (has_top_score_ymd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->top_score_ymd(), output);
  }

  // optional int32 top_score_total = 20;
  if (has_top_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->top_score_total(), output);
  }

  // optional uint64 blocktime = 21;
  if (has_blocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->blocktime(), output);
  }

  // optional uint32 today_play_num = 22;
  if (has_today_play_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->today_play_num(), output);
  }

  // optional string readname = 23;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.readname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->readname(), output);
  }

  // optional string readcard = 24;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.readcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->readcard(), output);
  }

  // optional uint64 last_game_end = 25;
  if (has_last_game_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->last_game_end(), output);
  }

  // optional uint64 login_time = 26;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->login_time(), output);
  }

  // optional string ip = 27;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->ip(), output);
  }

  // optional .msg_maj.Data data = 99;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.Role)
}

::google::protobuf::uint8* Role::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.Role)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional string logo_icon = 5;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.logo_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logo_icon(), target);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional uint32 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->diamond(), target);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // optional uint32 sexual = 9;
  if (has_sexual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sexual(), target);
  }

  // optional uint32 room_card = 10;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->room_card(), target);
  }

  // optional uint32 total_games = 11;
  if (has_total_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_games(), target);
  }

  // optional uint32 win_games = 12;
  if (has_win_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->win_games(), target);
  }

  // optional uint32 con_games = 13;
  if (has_con_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->con_games(), target);
  }

  // optional uint32 his_max_score = 14;
  if (has_his_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->his_max_score(), target);
  }

  // optional uint32 his_max_con = 15;
  if (has_his_max_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->his_max_con(), target);
  }

  // optional uint32 week_max_score = 16;
  if (has_week_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->week_max_score(), target);
  }

  // optional uint64 top_wins_ymd = 17;
  if (has_top_wins_ymd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->top_wins_ymd(), target);
  }

  // optional int32 top_wins_total = 18;
  if (has_top_wins_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->top_wins_total(), target);
  }

  // optional uint64 top_score_ymd = 19;
  if (has_top_score_ymd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->top_score_ymd(), target);
  }

  // optional int32 top_score_total = 20;
  if (has_top_score_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->top_score_total(), target);
  }

  // optional uint64 blocktime = 21;
  if (has_blocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->blocktime(), target);
  }

  // optional uint32 today_play_num = 22;
  if (has_today_play_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->today_play_num(), target);
  }

  // optional string readname = 23;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.readname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->readname(), target);
  }

  // optional string readcard = 24;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.readcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->readcard(), target);
  }

  // optional uint64 last_game_end = 25;
  if (has_last_game_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->last_game_end(), target);
  }

  // optional uint64 login_time = 26;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->login_time(), target);
  }

  // optional string ip = 27;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.Role.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->ip(), target);
  }

  // optional .msg_maj.Data data = 99;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        99, *this->data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.Role)
  return target;
}

int Role::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.Role)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string logo_icon = 5;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_icon());
    }

    // optional uint32 title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sexual = 9;
    if (has_sexual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sexual());
    }

    // optional uint32 room_card = 10;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_card());
    }

    // optional uint32 total_games = 11;
    if (has_total_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games());
    }

    // optional uint32 win_games = 12;
    if (has_win_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_games());
    }

    // optional uint32 con_games = 13;
    if (has_con_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con_games());
    }

    // optional uint32 his_max_score = 14;
    if (has_his_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_score());
    }

    // optional uint32 his_max_con = 15;
    if (has_his_max_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_con());
    }

    // optional uint32 week_max_score = 16;
    if (has_week_max_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_max_score());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 top_wins_ymd = 17;
    if (has_top_wins_ymd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->top_wins_ymd());
    }

    // optional int32 top_wins_total = 18;
    if (has_top_wins_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_wins_total());
    }

    // optional uint64 top_score_ymd = 19;
    if (has_top_score_ymd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->top_score_ymd());
    }

    // optional int32 top_score_total = 20;
    if (has_top_score_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_score_total());
    }

    // optional uint64 blocktime = 21;
    if (has_blocktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocktime());
    }

    // optional uint32 today_play_num = 22;
    if (has_today_play_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_play_num());
    }

    // optional string readname = 23;
    if (has_readname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readname());
    }

    // optional string readcard = 24;
    if (has_readcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readcard());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional uint64 last_game_end = 25;
    if (has_last_game_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_game_end());
    }

    // optional uint64 login_time = 26;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string ip = 27;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .msg_maj.Data data = 99;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.Role)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Role* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Role>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.Role)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.Role)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_logo_icon()) {
      set_has_logo_icon();
      logo_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_icon_);
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sexual()) {
      set_sexual(from.sexual());
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_total_games()) {
      set_total_games(from.total_games());
    }
    if (from.has_win_games()) {
      set_win_games(from.win_games());
    }
    if (from.has_con_games()) {
      set_con_games(from.con_games());
    }
    if (from.has_his_max_score()) {
      set_his_max_score(from.his_max_score());
    }
    if (from.has_his_max_con()) {
      set_his_max_con(from.his_max_con());
    }
    if (from.has_week_max_score()) {
      set_week_max_score(from.week_max_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_top_wins_ymd()) {
      set_top_wins_ymd(from.top_wins_ymd());
    }
    if (from.has_top_wins_total()) {
      set_top_wins_total(from.top_wins_total());
    }
    if (from.has_top_score_ymd()) {
      set_top_score_ymd(from.top_score_ymd());
    }
    if (from.has_top_score_total()) {
      set_top_score_total(from.top_score_total());
    }
    if (from.has_blocktime()) {
      set_blocktime(from.blocktime());
    }
    if (from.has_today_play_num()) {
      set_today_play_num(from.today_play_num());
    }
    if (from.has_readname()) {
      set_has_readname();
      readname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readname_);
    }
    if (from.has_readcard()) {
      set_has_readcard();
      readcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readcard_);
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_last_game_end()) {
      set_last_game_end(from.last_game_end());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_data()) {
      mutable_data()->::msg_maj::Data::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {

  return true;
}

void Role::Swap(Role* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Role::InternalSwap(Role* other) {
  std::swap(id_, other->id_);
  account_.Swap(&other->account_);
  nickname_.Swap(&other->nickname_);
  std::swap(level_, other->level_);
  logo_icon_.Swap(&other->logo_icon_);
  std::swap(title_, other->title_);
  std::swap(diamond_, other->diamond_);
  std::swap(coin_, other->coin_);
  std::swap(sexual_, other->sexual_);
  std::swap(room_card_, other->room_card_);
  std::swap(total_games_, other->total_games_);
  std::swap(win_games_, other->win_games_);
  std::swap(con_games_, other->con_games_);
  std::swap(his_max_score_, other->his_max_score_);
  std::swap(his_max_con_, other->his_max_con_);
  std::swap(week_max_score_, other->week_max_score_);
  std::swap(top_wins_ymd_, other->top_wins_ymd_);
  std::swap(top_wins_total_, other->top_wins_total_);
  std::swap(top_score_ymd_, other->top_score_ymd_);
  std::swap(top_score_total_, other->top_score_total_);
  std::swap(blocktime_, other->blocktime_);
  std::swap(today_play_num_, other->today_play_num_);
  readname_.Swap(&other->readname_);
  readcard_.Swap(&other->readcard_);
  std::swap(last_game_end_, other->last_game_end_);
  std::swap(login_time_, other->login_time_);
  ip_.Swap(&other->ip_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role_descriptor_;
  metadata.reflection = Role_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Role

// optional uint64 id = 1;
bool Role::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Role::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Role::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Role::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Role::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.id)
  return id_;
}
 void Role::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.id)
}

// optional string account = 2;
bool Role::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Role::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void Role::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void Role::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& Role::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.account)
}
 void Role::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.account)
}
 void Role::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.account)
}
 ::std::string* Role::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.account)
}

// optional string nickname = 3;
bool Role::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Role::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void Role::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void Role::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& Role::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.nickname)
}
 void Role::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.nickname)
}
 void Role::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.nickname)
}
 ::std::string* Role::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.nickname)
}

// optional uint32 level = 4;
bool Role::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Role::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void Role::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void Role::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 Role::level() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.level)
  return level_;
}
 void Role::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.level)
}

// optional string logo_icon = 5;
bool Role::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Role::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void Role::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void Role::clear_logo_icon() {
  logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_icon();
}
 const ::std::string& Role::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.logo_icon)
  return logo_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_logo_icon(const ::std::string& value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.logo_icon)
}
 void Role::set_logo_icon(const char* value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.logo_icon)
}
 void Role::set_logo_icon(const char* value, size_t size) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.logo_icon)
}
 ::std::string* Role::mutable_logo_icon() {
  set_has_logo_icon();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.logo_icon)
  return logo_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_logo_icon() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.logo_icon)
  clear_has_logo_icon();
  return logo_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_logo_icon(::std::string* logo_icon) {
  if (logo_icon != NULL) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  logo_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_icon);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.logo_icon)
}

// optional uint32 title = 6;
bool Role::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Role::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void Role::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void Role::clear_title() {
  title_ = 0u;
  clear_has_title();
}
 ::google::protobuf::uint32 Role::title() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.title)
  return title_;
}
 void Role::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.title)
}

// optional uint32 diamond = 7;
bool Role::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Role::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
void Role::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
void Role::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
 ::google::protobuf::uint32 Role::diamond() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.diamond)
  return diamond_;
}
 void Role::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.diamond)
}

// optional uint32 coin = 8;
bool Role::has_coin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Role::set_has_coin() {
  _has_bits_[0] |= 0x00000080u;
}
void Role::clear_has_coin() {
  _has_bits_[0] &= ~0x00000080u;
}
void Role::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
 ::google::protobuf::uint32 Role::coin() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.coin)
  return coin_;
}
 void Role::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.coin)
}

// optional uint32 sexual = 9;
bool Role::has_sexual() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Role::set_has_sexual() {
  _has_bits_[0] |= 0x00000100u;
}
void Role::clear_has_sexual() {
  _has_bits_[0] &= ~0x00000100u;
}
void Role::clear_sexual() {
  sexual_ = 0u;
  clear_has_sexual();
}
 ::google::protobuf::uint32 Role::sexual() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.sexual)
  return sexual_;
}
 void Role::set_sexual(::google::protobuf::uint32 value) {
  set_has_sexual();
  sexual_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.sexual)
}

// optional uint32 room_card = 10;
bool Role::has_room_card() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Role::set_has_room_card() {
  _has_bits_[0] |= 0x00000200u;
}
void Role::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000200u;
}
void Role::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 Role::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.room_card)
  return room_card_;
}
 void Role::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.room_card)
}

// optional uint32 total_games = 11;
bool Role::has_total_games() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Role::set_has_total_games() {
  _has_bits_[0] |= 0x00000400u;
}
void Role::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000400u;
}
void Role::clear_total_games() {
  total_games_ = 0u;
  clear_has_total_games();
}
 ::google::protobuf::uint32 Role::total_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.total_games)
  return total_games_;
}
 void Role::set_total_games(::google::protobuf::uint32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.total_games)
}

// optional uint32 win_games = 12;
bool Role::has_win_games() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Role::set_has_win_games() {
  _has_bits_[0] |= 0x00000800u;
}
void Role::clear_has_win_games() {
  _has_bits_[0] &= ~0x00000800u;
}
void Role::clear_win_games() {
  win_games_ = 0u;
  clear_has_win_games();
}
 ::google::protobuf::uint32 Role::win_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.win_games)
  return win_games_;
}
 void Role::set_win_games(::google::protobuf::uint32 value) {
  set_has_win_games();
  win_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.win_games)
}

// optional uint32 con_games = 13;
bool Role::has_con_games() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Role::set_has_con_games() {
  _has_bits_[0] |= 0x00001000u;
}
void Role::clear_has_con_games() {
  _has_bits_[0] &= ~0x00001000u;
}
void Role::clear_con_games() {
  con_games_ = 0u;
  clear_has_con_games();
}
 ::google::protobuf::uint32 Role::con_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.con_games)
  return con_games_;
}
 void Role::set_con_games(::google::protobuf::uint32 value) {
  set_has_con_games();
  con_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.con_games)
}

// optional uint32 his_max_score = 14;
bool Role::has_his_max_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Role::set_has_his_max_score() {
  _has_bits_[0] |= 0x00002000u;
}
void Role::clear_has_his_max_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void Role::clear_his_max_score() {
  his_max_score_ = 0u;
  clear_has_his_max_score();
}
 ::google::protobuf::uint32 Role::his_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.his_max_score)
  return his_max_score_;
}
 void Role::set_his_max_score(::google::protobuf::uint32 value) {
  set_has_his_max_score();
  his_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.his_max_score)
}

// optional uint32 his_max_con = 15;
bool Role::has_his_max_con() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Role::set_has_his_max_con() {
  _has_bits_[0] |= 0x00004000u;
}
void Role::clear_has_his_max_con() {
  _has_bits_[0] &= ~0x00004000u;
}
void Role::clear_his_max_con() {
  his_max_con_ = 0u;
  clear_has_his_max_con();
}
 ::google::protobuf::uint32 Role::his_max_con() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.his_max_con)
  return his_max_con_;
}
 void Role::set_his_max_con(::google::protobuf::uint32 value) {
  set_has_his_max_con();
  his_max_con_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.his_max_con)
}

// optional uint32 week_max_score = 16;
bool Role::has_week_max_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Role::set_has_week_max_score() {
  _has_bits_[0] |= 0x00008000u;
}
void Role::clear_has_week_max_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void Role::clear_week_max_score() {
  week_max_score_ = 0u;
  clear_has_week_max_score();
}
 ::google::protobuf::uint32 Role::week_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.week_max_score)
  return week_max_score_;
}
 void Role::set_week_max_score(::google::protobuf::uint32 value) {
  set_has_week_max_score();
  week_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.week_max_score)
}

// optional uint64 top_wins_ymd = 17;
bool Role::has_top_wins_ymd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Role::set_has_top_wins_ymd() {
  _has_bits_[0] |= 0x00010000u;
}
void Role::clear_has_top_wins_ymd() {
  _has_bits_[0] &= ~0x00010000u;
}
void Role::clear_top_wins_ymd() {
  top_wins_ymd_ = GOOGLE_ULONGLONG(0);
  clear_has_top_wins_ymd();
}
 ::google::protobuf::uint64 Role::top_wins_ymd() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.top_wins_ymd)
  return top_wins_ymd_;
}
 void Role::set_top_wins_ymd(::google::protobuf::uint64 value) {
  set_has_top_wins_ymd();
  top_wins_ymd_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.top_wins_ymd)
}

// optional int32 top_wins_total = 18;
bool Role::has_top_wins_total() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Role::set_has_top_wins_total() {
  _has_bits_[0] |= 0x00020000u;
}
void Role::clear_has_top_wins_total() {
  _has_bits_[0] &= ~0x00020000u;
}
void Role::clear_top_wins_total() {
  top_wins_total_ = 0;
  clear_has_top_wins_total();
}
 ::google::protobuf::int32 Role::top_wins_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.top_wins_total)
  return top_wins_total_;
}
 void Role::set_top_wins_total(::google::protobuf::int32 value) {
  set_has_top_wins_total();
  top_wins_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.top_wins_total)
}

// optional uint64 top_score_ymd = 19;
bool Role::has_top_score_ymd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Role::set_has_top_score_ymd() {
  _has_bits_[0] |= 0x00040000u;
}
void Role::clear_has_top_score_ymd() {
  _has_bits_[0] &= ~0x00040000u;
}
void Role::clear_top_score_ymd() {
  top_score_ymd_ = GOOGLE_ULONGLONG(0);
  clear_has_top_score_ymd();
}
 ::google::protobuf::uint64 Role::top_score_ymd() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.top_score_ymd)
  return top_score_ymd_;
}
 void Role::set_top_score_ymd(::google::protobuf::uint64 value) {
  set_has_top_score_ymd();
  top_score_ymd_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.top_score_ymd)
}

// optional int32 top_score_total = 20;
bool Role::has_top_score_total() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Role::set_has_top_score_total() {
  _has_bits_[0] |= 0x00080000u;
}
void Role::clear_has_top_score_total() {
  _has_bits_[0] &= ~0x00080000u;
}
void Role::clear_top_score_total() {
  top_score_total_ = 0;
  clear_has_top_score_total();
}
 ::google::protobuf::int32 Role::top_score_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.top_score_total)
  return top_score_total_;
}
 void Role::set_top_score_total(::google::protobuf::int32 value) {
  set_has_top_score_total();
  top_score_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.top_score_total)
}

// optional uint64 blocktime = 21;
bool Role::has_blocktime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Role::set_has_blocktime() {
  _has_bits_[0] |= 0x00100000u;
}
void Role::clear_has_blocktime() {
  _has_bits_[0] &= ~0x00100000u;
}
void Role::clear_blocktime() {
  blocktime_ = GOOGLE_ULONGLONG(0);
  clear_has_blocktime();
}
 ::google::protobuf::uint64 Role::blocktime() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.blocktime)
  return blocktime_;
}
 void Role::set_blocktime(::google::protobuf::uint64 value) {
  set_has_blocktime();
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.blocktime)
}

// optional uint32 today_play_num = 22;
bool Role::has_today_play_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Role::set_has_today_play_num() {
  _has_bits_[0] |= 0x00200000u;
}
void Role::clear_has_today_play_num() {
  _has_bits_[0] &= ~0x00200000u;
}
void Role::clear_today_play_num() {
  today_play_num_ = 0u;
  clear_has_today_play_num();
}
 ::google::protobuf::uint32 Role::today_play_num() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.today_play_num)
  return today_play_num_;
}
 void Role::set_today_play_num(::google::protobuf::uint32 value) {
  set_has_today_play_num();
  today_play_num_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.today_play_num)
}

// optional string readname = 23;
bool Role::has_readname() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Role::set_has_readname() {
  _has_bits_[0] |= 0x00400000u;
}
void Role::clear_has_readname() {
  _has_bits_[0] &= ~0x00400000u;
}
void Role::clear_readname() {
  readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readname();
}
 const ::std::string& Role::readname() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.readname)
  return readname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_readname(const ::std::string& value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.readname)
}
 void Role::set_readname(const char* value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.readname)
}
 void Role::set_readname(const char* value, size_t size) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.readname)
}
 ::std::string* Role::mutable_readname() {
  set_has_readname();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.readname)
  return readname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_readname() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.readname)
  clear_has_readname();
  return readname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_readname(::std::string* readname) {
  if (readname != NULL) {
    set_has_readname();
  } else {
    clear_has_readname();
  }
  readname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.readname)
}

// optional string readcard = 24;
bool Role::has_readcard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Role::set_has_readcard() {
  _has_bits_[0] |= 0x00800000u;
}
void Role::clear_has_readcard() {
  _has_bits_[0] &= ~0x00800000u;
}
void Role::clear_readcard() {
  readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readcard();
}
 const ::std::string& Role::readcard() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.readcard)
  return readcard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_readcard(const ::std::string& value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.readcard)
}
 void Role::set_readcard(const char* value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.readcard)
}
 void Role::set_readcard(const char* value, size_t size) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.readcard)
}
 ::std::string* Role::mutable_readcard() {
  set_has_readcard();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.readcard)
  return readcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_readcard() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.readcard)
  clear_has_readcard();
  return readcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_readcard(::std::string* readcard) {
  if (readcard != NULL) {
    set_has_readcard();
  } else {
    clear_has_readcard();
  }
  readcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readcard);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.readcard)
}

// optional uint64 last_game_end = 25;
bool Role::has_last_game_end() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Role::set_has_last_game_end() {
  _has_bits_[0] |= 0x01000000u;
}
void Role::clear_has_last_game_end() {
  _has_bits_[0] &= ~0x01000000u;
}
void Role::clear_last_game_end() {
  last_game_end_ = GOOGLE_ULONGLONG(0);
  clear_has_last_game_end();
}
 ::google::protobuf::uint64 Role::last_game_end() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.last_game_end)
  return last_game_end_;
}
 void Role::set_last_game_end(::google::protobuf::uint64 value) {
  set_has_last_game_end();
  last_game_end_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.last_game_end)
}

// optional uint64 login_time = 26;
bool Role::has_login_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Role::set_has_login_time() {
  _has_bits_[0] |= 0x02000000u;
}
void Role::clear_has_login_time() {
  _has_bits_[0] &= ~0x02000000u;
}
void Role::clear_login_time() {
  login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_login_time();
}
 ::google::protobuf::uint64 Role::login_time() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.login_time)
  return login_time_;
}
 void Role::set_login_time(::google::protobuf::uint64 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.Role.login_time)
}

// optional string ip = 27;
bool Role::has_ip() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Role::set_has_ip() {
  _has_bits_[0] |= 0x04000000u;
}
void Role::clear_has_ip() {
  _has_bits_[0] &= ~0x04000000u;
}
void Role::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& Role::ip() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.Role.ip)
}
 void Role::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.Role.ip)
}
 void Role::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.Role.ip)
}
 ::std::string* Role::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Role::release_ip() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Role::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.ip)
}

// optional .msg_maj.Data data = 99;
bool Role::has_data() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Role::set_has_data() {
  _has_bits_[0] |= 0x08000000u;
}
void Role::clear_has_data() {
  _has_bits_[0] &= ~0x08000000u;
}
void Role::clear_data() {
  if (data_ != NULL) data_->::msg_maj::Data::Clear();
  clear_has_data();
}
const ::msg_maj::Data& Role::data() const {
  // @@protoc_insertion_point(field_get:msg_maj.Role.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::msg_maj::Data* Role::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::msg_maj::Data;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.Role.data)
  return data_;
}
::msg_maj::Data* Role::release_data() {
  // @@protoc_insertion_point(field_release:msg_maj.Role.data)
  clear_has_data();
  ::msg_maj::Data* temp = data_;
  data_ = NULL;
  return temp;
}
void Role::set_allocated_data(::msg_maj::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.Role.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleOff::kIdFieldNumber;
const int RoleOff::kAccountFieldNumber;
const int RoleOff::kNicknameFieldNumber;
const int RoleOff::kLevelFieldNumber;
const int RoleOff::kLogoIconFieldNumber;
const int RoleOff::kTitleFieldNumber;
const int RoleOff::kDiamondFieldNumber;
const int RoleOff::kCoinFieldNumber;
const int RoleOff::kSexualFieldNumber;
const int RoleOff::kRoomCardFieldNumber;
const int RoleOff::kTotalGamesFieldNumber;
const int RoleOff::kWinGamesFieldNumber;
const int RoleOff::kConGamesFieldNumber;
const int RoleOff::kHisMaxScoreFieldNumber;
const int RoleOff::kHisMaxConFieldNumber;
const int RoleOff::kWeekMaxScoreFieldNumber;
const int RoleOff::kTopWinsYmdFieldNumber;
const int RoleOff::kTopWinsTotalFieldNumber;
const int RoleOff::kTopScoreYmdFieldNumber;
const int RoleOff::kTopScoreTotalFieldNumber;
const int RoleOff::kBlocktimeFieldNumber;
const int RoleOff::kTodayPlayNumFieldNumber;
const int RoleOff::kReadnameFieldNumber;
const int RoleOff::kReadcardFieldNumber;
const int RoleOff::kLastGameEndFieldNumber;
const int RoleOff::kLoginTimeFieldNumber;
const int RoleOff::kIpFieldNumber;
const int RoleOff::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleOff::RoleOff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleOff)
}

void RoleOff::InitAsDefaultInstance() {
  data_ = const_cast< ::msg_maj::Data*>(&::msg_maj::Data::default_instance());
}

RoleOff::RoleOff(const RoleOff& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleOff)
}

void RoleOff::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  logo_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = 0u;
  diamond_ = 0u;
  coin_ = 0u;
  sexual_ = 0u;
  room_card_ = 0u;
  total_games_ = 0u;
  win_games_ = 0u;
  con_games_ = 0u;
  his_max_score_ = 0u;
  his_max_con_ = 0u;
  week_max_score_ = 0u;
  top_wins_ymd_ = GOOGLE_ULONGLONG(0);
  top_wins_total_ = 0;
  top_score_ymd_ = GOOGLE_ULONGLONG(0);
  top_score_total_ = 0;
  blocktime_ = GOOGLE_ULONGLONG(0);
  today_play_num_ = 0u;
  readname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_game_end_ = GOOGLE_ULONGLONG(0);
  login_time_ = GOOGLE_ULONGLONG(0);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleOff::~RoleOff() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleOff)
  SharedDtor();
}

void RoleOff::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_;
  }
}

void RoleOff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleOff_descriptor_;
}

const RoleOff& RoleOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

RoleOff* RoleOff::default_instance_ = NULL;

RoleOff* RoleOff::New(::google::protobuf::Arena* arena) const {
  RoleOff* n = new RoleOff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleOff::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleOff)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoleOff, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoleOff*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(level_, coin_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_logo_icon()) {
      logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(sexual_, week_max_score_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(top_wins_ymd_, blocktime_);
    today_play_num_ = 0u;
    if (has_readname()) {
      readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_readcard()) {
      readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    ZR_(last_game_end_, login_time_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      if (data_ != NULL) data_->::msg_maj::Data::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleOff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_logo_icon;
        break;
      }

      // optional string logo_icon = 5;
      case 5: {
        if (tag == 42) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_icon().data(), this->logo_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.logo_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (tag == 48) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 7;
      case 7: {
        if (tag == 56) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 8;
      case 8: {
        if (tag == 64) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sexual;
        break;
      }

      // optional uint32 sexual = 9;
      case 9: {
        if (tag == 72) {
         parse_sexual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sexual_)));
          set_has_sexual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_room_card;
        break;
      }

      // optional uint32 room_card = 10;
      case 10: {
        if (tag == 80) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_games;
        break;
      }

      // optional uint32 total_games = 11;
      case 11: {
        if (tag == 88) {
         parse_total_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_)));
          set_has_total_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_win_games;
        break;
      }

      // optional uint32 win_games = 12;
      case 12: {
        if (tag == 96) {
         parse_win_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_games_)));
          set_has_win_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_con_games;
        break;
      }

      // optional uint32 con_games = 13;
      case 13: {
        if (tag == 104) {
         parse_con_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &con_games_)));
          set_has_con_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_his_max_score;
        break;
      }

      // optional uint32 his_max_score = 14;
      case 14: {
        if (tag == 112) {
         parse_his_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_score_)));
          set_has_his_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_his_max_con;
        break;
      }

      // optional uint32 his_max_con = 15;
      case 15: {
        if (tag == 120) {
         parse_his_max_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_con_)));
          set_has_his_max_con();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_week_max_score;
        break;
      }

      // optional uint32 week_max_score = 16;
      case 16: {
        if (tag == 128) {
         parse_week_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_max_score_)));
          set_has_week_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_top_wins_ymd;
        break;
      }

      // optional uint64 top_wins_ymd = 17;
      case 17: {
        if (tag == 136) {
         parse_top_wins_ymd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &top_wins_ymd_)));
          set_has_top_wins_ymd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_top_wins_total;
        break;
      }

      // optional int32 top_wins_total = 18;
      case 18: {
        if (tag == 144) {
         parse_top_wins_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_wins_total_)));
          set_has_top_wins_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_top_score_ymd;
        break;
      }

      // optional uint64 top_score_ymd = 19;
      case 19: {
        if (tag == 152) {
         parse_top_score_ymd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &top_score_ymd_)));
          set_has_top_score_ymd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_top_score_total;
        break;
      }

      // optional int32 top_score_total = 20;
      case 20: {
        if (tag == 160) {
         parse_top_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_score_total_)));
          set_has_top_score_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_blocktime;
        break;
      }

      // optional uint64 blocktime = 21;
      case 21: {
        if (tag == 168) {
         parse_blocktime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocktime_)));
          set_has_blocktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_today_play_num;
        break;
      }

      // optional uint32 today_play_num = 22;
      case 22: {
        if (tag == 176) {
         parse_today_play_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_play_num_)));
          set_has_today_play_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_readname;
        break;
      }

      // optional string readname = 23;
      case 23: {
        if (tag == 186) {
         parse_readname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readname().data(), this->readname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.readname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_readcard;
        break;
      }

      // optional string readcard = 24;
      case 24: {
        if (tag == 194) {
         parse_readcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readcard().data(), this->readcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.readcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_last_game_end;
        break;
      }

      // optional uint64 last_game_end = 25;
      case 25: {
        if (tag == 200) {
         parse_last_game_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_game_end_)));
          set_has_last_game_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 26;
      case 26: {
        if (tag == 208) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_ip;
        break;
      }

      // optional string ip = 27;
      case 27: {
        if (tag == 218) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleOff.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_data;
        break;
      }

      // optional .msg_maj.Data data = 99;
      case 99: {
        if (tag == 794) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleOff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleOff)
  return false;
#undef DO_
}

void RoleOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleOff)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional string logo_icon = 5;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.logo_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->logo_icon(), output);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional uint32 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->diamond(), output);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // optional uint32 sexual = 9;
  if (has_sexual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sexual(), output);
  }

  // optional uint32 room_card = 10;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->room_card(), output);
  }

  // optional uint32 total_games = 11;
  if (has_total_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_games(), output);
  }

  // optional uint32 win_games = 12;
  if (has_win_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->win_games(), output);
  }

  // optional uint32 con_games = 13;
  if (has_con_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->con_games(), output);
  }

  // optional uint32 his_max_score = 14;
  if (has_his_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->his_max_score(), output);
  }

  // optional uint32 his_max_con = 15;
  if (has_his_max_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->his_max_con(), output);
  }

  // optional uint32 week_max_score = 16;
  if (has_week_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->week_max_score(), output);
  }

  // optional uint64 top_wins_ymd = 17;
  if (has_top_wins_ymd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->top_wins_ymd(), output);
  }

  // optional int32 top_wins_total = 18;
  if (has_top_wins_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->top_wins_total(), output);
  }

  // optional uint64 top_score_ymd = 19;
  if (has_top_score_ymd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->top_score_ymd(), output);
  }

  // optional int32 top_score_total = 20;
  if (has_top_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->top_score_total(), output);
  }

  // optional uint64 blocktime = 21;
  if (has_blocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->blocktime(), output);
  }

  // optional uint32 today_play_num = 22;
  if (has_today_play_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->today_play_num(), output);
  }

  // optional string readname = 23;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.readname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->readname(), output);
  }

  // optional string readcard = 24;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.readcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->readcard(), output);
  }

  // optional uint64 last_game_end = 25;
  if (has_last_game_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->last_game_end(), output);
  }

  // optional uint64 login_time = 26;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->login_time(), output);
  }

  // optional string ip = 27;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->ip(), output);
  }

  // optional .msg_maj.Data data = 99;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleOff)
}

::google::protobuf::uint8* RoleOff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleOff)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional string logo_icon = 5;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.logo_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logo_icon(), target);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional uint32 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->diamond(), target);
  }

  // optional uint32 coin = 8;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->coin(), target);
  }

  // optional uint32 sexual = 9;
  if (has_sexual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sexual(), target);
  }

  // optional uint32 room_card = 10;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->room_card(), target);
  }

  // optional uint32 total_games = 11;
  if (has_total_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_games(), target);
  }

  // optional uint32 win_games = 12;
  if (has_win_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->win_games(), target);
  }

  // optional uint32 con_games = 13;
  if (has_con_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->con_games(), target);
  }

  // optional uint32 his_max_score = 14;
  if (has_his_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->his_max_score(), target);
  }

  // optional uint32 his_max_con = 15;
  if (has_his_max_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->his_max_con(), target);
  }

  // optional uint32 week_max_score = 16;
  if (has_week_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->week_max_score(), target);
  }

  // optional uint64 top_wins_ymd = 17;
  if (has_top_wins_ymd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->top_wins_ymd(), target);
  }

  // optional int32 top_wins_total = 18;
  if (has_top_wins_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->top_wins_total(), target);
  }

  // optional uint64 top_score_ymd = 19;
  if (has_top_score_ymd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->top_score_ymd(), target);
  }

  // optional int32 top_score_total = 20;
  if (has_top_score_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->top_score_total(), target);
  }

  // optional uint64 blocktime = 21;
  if (has_blocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->blocktime(), target);
  }

  // optional uint32 today_play_num = 22;
  if (has_today_play_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->today_play_num(), target);
  }

  // optional string readname = 23;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.readname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->readname(), target);
  }

  // optional string readcard = 24;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.readcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->readcard(), target);
  }

  // optional uint64 last_game_end = 25;
  if (has_last_game_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->last_game_end(), target);
  }

  // optional uint64 login_time = 26;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->login_time(), target);
  }

  // optional string ip = 27;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleOff.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->ip(), target);
  }

  // optional .msg_maj.Data data = 99;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        99, *this->data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleOff)
  return target;
}

int RoleOff::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleOff)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string logo_icon = 5;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_icon());
    }

    // optional uint32 title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sexual = 9;
    if (has_sexual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sexual());
    }

    // optional uint32 room_card = 10;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_card());
    }

    // optional uint32 total_games = 11;
    if (has_total_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games());
    }

    // optional uint32 win_games = 12;
    if (has_win_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_games());
    }

    // optional uint32 con_games = 13;
    if (has_con_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->con_games());
    }

    // optional uint32 his_max_score = 14;
    if (has_his_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_score());
    }

    // optional uint32 his_max_con = 15;
    if (has_his_max_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_con());
    }

    // optional uint32 week_max_score = 16;
    if (has_week_max_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_max_score());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 top_wins_ymd = 17;
    if (has_top_wins_ymd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->top_wins_ymd());
    }

    // optional int32 top_wins_total = 18;
    if (has_top_wins_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_wins_total());
    }

    // optional uint64 top_score_ymd = 19;
    if (has_top_score_ymd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->top_score_ymd());
    }

    // optional int32 top_score_total = 20;
    if (has_top_score_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_score_total());
    }

    // optional uint64 blocktime = 21;
    if (has_blocktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocktime());
    }

    // optional uint32 today_play_num = 22;
    if (has_today_play_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_play_num());
    }

    // optional string readname = 23;
    if (has_readname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readname());
    }

    // optional string readcard = 24;
    if (has_readcard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readcard());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional uint64 last_game_end = 25;
    if (has_last_game_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_game_end());
    }

    // optional uint64 login_time = 26;
    if (has_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional string ip = 27;
    if (has_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional .msg_maj.Data data = 99;
    if (has_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleOff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleOff)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleOff* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleOff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleOff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleOff)
    MergeFrom(*source);
  }
}

void RoleOff::MergeFrom(const RoleOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleOff)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_logo_icon()) {
      set_has_logo_icon();
      logo_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_icon_);
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sexual()) {
      set_sexual(from.sexual());
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_total_games()) {
      set_total_games(from.total_games());
    }
    if (from.has_win_games()) {
      set_win_games(from.win_games());
    }
    if (from.has_con_games()) {
      set_con_games(from.con_games());
    }
    if (from.has_his_max_score()) {
      set_his_max_score(from.his_max_score());
    }
    if (from.has_his_max_con()) {
      set_his_max_con(from.his_max_con());
    }
    if (from.has_week_max_score()) {
      set_week_max_score(from.week_max_score());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_top_wins_ymd()) {
      set_top_wins_ymd(from.top_wins_ymd());
    }
    if (from.has_top_wins_total()) {
      set_top_wins_total(from.top_wins_total());
    }
    if (from.has_top_score_ymd()) {
      set_top_score_ymd(from.top_score_ymd());
    }
    if (from.has_top_score_total()) {
      set_top_score_total(from.top_score_total());
    }
    if (from.has_blocktime()) {
      set_blocktime(from.blocktime());
    }
    if (from.has_today_play_num()) {
      set_today_play_num(from.today_play_num());
    }
    if (from.has_readname()) {
      set_has_readname();
      readname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readname_);
    }
    if (from.has_readcard()) {
      set_has_readcard();
      readcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readcard_);
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_last_game_end()) {
      set_last_game_end(from.last_game_end());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_data()) {
      mutable_data()->::msg_maj::Data::MergeFrom(from.data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleOff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleOff::CopyFrom(const RoleOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOff::IsInitialized() const {

  return true;
}

void RoleOff::Swap(RoleOff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleOff::InternalSwap(RoleOff* other) {
  std::swap(id_, other->id_);
  account_.Swap(&other->account_);
  nickname_.Swap(&other->nickname_);
  std::swap(level_, other->level_);
  logo_icon_.Swap(&other->logo_icon_);
  std::swap(title_, other->title_);
  std::swap(diamond_, other->diamond_);
  std::swap(coin_, other->coin_);
  std::swap(sexual_, other->sexual_);
  std::swap(room_card_, other->room_card_);
  std::swap(total_games_, other->total_games_);
  std::swap(win_games_, other->win_games_);
  std::swap(con_games_, other->con_games_);
  std::swap(his_max_score_, other->his_max_score_);
  std::swap(his_max_con_, other->his_max_con_);
  std::swap(week_max_score_, other->week_max_score_);
  std::swap(top_wins_ymd_, other->top_wins_ymd_);
  std::swap(top_wins_total_, other->top_wins_total_);
  std::swap(top_score_ymd_, other->top_score_ymd_);
  std::swap(top_score_total_, other->top_score_total_);
  std::swap(blocktime_, other->blocktime_);
  std::swap(today_play_num_, other->today_play_num_);
  readname_.Swap(&other->readname_);
  readcard_.Swap(&other->readcard_);
  std::swap(last_game_end_, other->last_game_end_);
  std::swap(login_time_, other->login_time_);
  ip_.Swap(&other->ip_);
  std::swap(data_, other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleOff_descriptor_;
  metadata.reflection = RoleOff_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleOff

// optional uint64 id = 1;
bool RoleOff::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleOff::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleOff::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleOff::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 RoleOff::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.id)
  return id_;
}
 void RoleOff::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.id)
}

// optional string account = 2;
bool RoleOff::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleOff::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleOff::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleOff::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& RoleOff::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.account)
}
 void RoleOff::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.account)
}
 void RoleOff::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.account)
}
 ::std::string* RoleOff::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.account)
}

// optional string nickname = 3;
bool RoleOff::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleOff::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleOff::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleOff::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RoleOff::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.nickname)
}
 void RoleOff::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.nickname)
}
 void RoleOff::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.nickname)
}
 ::std::string* RoleOff::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.nickname)
}

// optional uint32 level = 4;
bool RoleOff::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoleOff::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void RoleOff::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoleOff::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 RoleOff::level() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.level)
  return level_;
}
 void RoleOff::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.level)
}

// optional string logo_icon = 5;
bool RoleOff::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoleOff::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void RoleOff::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoleOff::clear_logo_icon() {
  logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_icon();
}
 const ::std::string& RoleOff::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.logo_icon)
  return logo_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_logo_icon(const ::std::string& value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.logo_icon)
}
 void RoleOff::set_logo_icon(const char* value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.logo_icon)
}
 void RoleOff::set_logo_icon(const char* value, size_t size) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.logo_icon)
}
 ::std::string* RoleOff::mutable_logo_icon() {
  set_has_logo_icon();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.logo_icon)
  return logo_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_logo_icon() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.logo_icon)
  clear_has_logo_icon();
  return logo_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_logo_icon(::std::string* logo_icon) {
  if (logo_icon != NULL) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  logo_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_icon);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.logo_icon)
}

// optional uint32 title = 6;
bool RoleOff::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoleOff::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void RoleOff::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoleOff::clear_title() {
  title_ = 0u;
  clear_has_title();
}
 ::google::protobuf::uint32 RoleOff::title() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.title)
  return title_;
}
 void RoleOff::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.title)
}

// optional uint32 diamond = 7;
bool RoleOff::has_diamond() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoleOff::set_has_diamond() {
  _has_bits_[0] |= 0x00000040u;
}
void RoleOff::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoleOff::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
 ::google::protobuf::uint32 RoleOff::diamond() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.diamond)
  return diamond_;
}
 void RoleOff::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.diamond)
}

// optional uint32 coin = 8;
bool RoleOff::has_coin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoleOff::set_has_coin() {
  _has_bits_[0] |= 0x00000080u;
}
void RoleOff::clear_has_coin() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoleOff::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
 ::google::protobuf::uint32 RoleOff::coin() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.coin)
  return coin_;
}
 void RoleOff::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.coin)
}

// optional uint32 sexual = 9;
bool RoleOff::has_sexual() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoleOff::set_has_sexual() {
  _has_bits_[0] |= 0x00000100u;
}
void RoleOff::clear_has_sexual() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoleOff::clear_sexual() {
  sexual_ = 0u;
  clear_has_sexual();
}
 ::google::protobuf::uint32 RoleOff::sexual() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.sexual)
  return sexual_;
}
 void RoleOff::set_sexual(::google::protobuf::uint32 value) {
  set_has_sexual();
  sexual_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.sexual)
}

// optional uint32 room_card = 10;
bool RoleOff::has_room_card() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoleOff::set_has_room_card() {
  _has_bits_[0] |= 0x00000200u;
}
void RoleOff::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoleOff::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 RoleOff::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.room_card)
  return room_card_;
}
 void RoleOff::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.room_card)
}

// optional uint32 total_games = 11;
bool RoleOff::has_total_games() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RoleOff::set_has_total_games() {
  _has_bits_[0] |= 0x00000400u;
}
void RoleOff::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000400u;
}
void RoleOff::clear_total_games() {
  total_games_ = 0u;
  clear_has_total_games();
}
 ::google::protobuf::uint32 RoleOff::total_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.total_games)
  return total_games_;
}
 void RoleOff::set_total_games(::google::protobuf::uint32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.total_games)
}

// optional uint32 win_games = 12;
bool RoleOff::has_win_games() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RoleOff::set_has_win_games() {
  _has_bits_[0] |= 0x00000800u;
}
void RoleOff::clear_has_win_games() {
  _has_bits_[0] &= ~0x00000800u;
}
void RoleOff::clear_win_games() {
  win_games_ = 0u;
  clear_has_win_games();
}
 ::google::protobuf::uint32 RoleOff::win_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.win_games)
  return win_games_;
}
 void RoleOff::set_win_games(::google::protobuf::uint32 value) {
  set_has_win_games();
  win_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.win_games)
}

// optional uint32 con_games = 13;
bool RoleOff::has_con_games() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RoleOff::set_has_con_games() {
  _has_bits_[0] |= 0x00001000u;
}
void RoleOff::clear_has_con_games() {
  _has_bits_[0] &= ~0x00001000u;
}
void RoleOff::clear_con_games() {
  con_games_ = 0u;
  clear_has_con_games();
}
 ::google::protobuf::uint32 RoleOff::con_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.con_games)
  return con_games_;
}
 void RoleOff::set_con_games(::google::protobuf::uint32 value) {
  set_has_con_games();
  con_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.con_games)
}

// optional uint32 his_max_score = 14;
bool RoleOff::has_his_max_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RoleOff::set_has_his_max_score() {
  _has_bits_[0] |= 0x00002000u;
}
void RoleOff::clear_has_his_max_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void RoleOff::clear_his_max_score() {
  his_max_score_ = 0u;
  clear_has_his_max_score();
}
 ::google::protobuf::uint32 RoleOff::his_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.his_max_score)
  return his_max_score_;
}
 void RoleOff::set_his_max_score(::google::protobuf::uint32 value) {
  set_has_his_max_score();
  his_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.his_max_score)
}

// optional uint32 his_max_con = 15;
bool RoleOff::has_his_max_con() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RoleOff::set_has_his_max_con() {
  _has_bits_[0] |= 0x00004000u;
}
void RoleOff::clear_has_his_max_con() {
  _has_bits_[0] &= ~0x00004000u;
}
void RoleOff::clear_his_max_con() {
  his_max_con_ = 0u;
  clear_has_his_max_con();
}
 ::google::protobuf::uint32 RoleOff::his_max_con() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.his_max_con)
  return his_max_con_;
}
 void RoleOff::set_his_max_con(::google::protobuf::uint32 value) {
  set_has_his_max_con();
  his_max_con_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.his_max_con)
}

// optional uint32 week_max_score = 16;
bool RoleOff::has_week_max_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RoleOff::set_has_week_max_score() {
  _has_bits_[0] |= 0x00008000u;
}
void RoleOff::clear_has_week_max_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void RoleOff::clear_week_max_score() {
  week_max_score_ = 0u;
  clear_has_week_max_score();
}
 ::google::protobuf::uint32 RoleOff::week_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.week_max_score)
  return week_max_score_;
}
 void RoleOff::set_week_max_score(::google::protobuf::uint32 value) {
  set_has_week_max_score();
  week_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.week_max_score)
}

// optional uint64 top_wins_ymd = 17;
bool RoleOff::has_top_wins_ymd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RoleOff::set_has_top_wins_ymd() {
  _has_bits_[0] |= 0x00010000u;
}
void RoleOff::clear_has_top_wins_ymd() {
  _has_bits_[0] &= ~0x00010000u;
}
void RoleOff::clear_top_wins_ymd() {
  top_wins_ymd_ = GOOGLE_ULONGLONG(0);
  clear_has_top_wins_ymd();
}
 ::google::protobuf::uint64 RoleOff::top_wins_ymd() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.top_wins_ymd)
  return top_wins_ymd_;
}
 void RoleOff::set_top_wins_ymd(::google::protobuf::uint64 value) {
  set_has_top_wins_ymd();
  top_wins_ymd_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.top_wins_ymd)
}

// optional int32 top_wins_total = 18;
bool RoleOff::has_top_wins_total() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RoleOff::set_has_top_wins_total() {
  _has_bits_[0] |= 0x00020000u;
}
void RoleOff::clear_has_top_wins_total() {
  _has_bits_[0] &= ~0x00020000u;
}
void RoleOff::clear_top_wins_total() {
  top_wins_total_ = 0;
  clear_has_top_wins_total();
}
 ::google::protobuf::int32 RoleOff::top_wins_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.top_wins_total)
  return top_wins_total_;
}
 void RoleOff::set_top_wins_total(::google::protobuf::int32 value) {
  set_has_top_wins_total();
  top_wins_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.top_wins_total)
}

// optional uint64 top_score_ymd = 19;
bool RoleOff::has_top_score_ymd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void RoleOff::set_has_top_score_ymd() {
  _has_bits_[0] |= 0x00040000u;
}
void RoleOff::clear_has_top_score_ymd() {
  _has_bits_[0] &= ~0x00040000u;
}
void RoleOff::clear_top_score_ymd() {
  top_score_ymd_ = GOOGLE_ULONGLONG(0);
  clear_has_top_score_ymd();
}
 ::google::protobuf::uint64 RoleOff::top_score_ymd() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.top_score_ymd)
  return top_score_ymd_;
}
 void RoleOff::set_top_score_ymd(::google::protobuf::uint64 value) {
  set_has_top_score_ymd();
  top_score_ymd_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.top_score_ymd)
}

// optional int32 top_score_total = 20;
bool RoleOff::has_top_score_total() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void RoleOff::set_has_top_score_total() {
  _has_bits_[0] |= 0x00080000u;
}
void RoleOff::clear_has_top_score_total() {
  _has_bits_[0] &= ~0x00080000u;
}
void RoleOff::clear_top_score_total() {
  top_score_total_ = 0;
  clear_has_top_score_total();
}
 ::google::protobuf::int32 RoleOff::top_score_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.top_score_total)
  return top_score_total_;
}
 void RoleOff::set_top_score_total(::google::protobuf::int32 value) {
  set_has_top_score_total();
  top_score_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.top_score_total)
}

// optional uint64 blocktime = 21;
bool RoleOff::has_blocktime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void RoleOff::set_has_blocktime() {
  _has_bits_[0] |= 0x00100000u;
}
void RoleOff::clear_has_blocktime() {
  _has_bits_[0] &= ~0x00100000u;
}
void RoleOff::clear_blocktime() {
  blocktime_ = GOOGLE_ULONGLONG(0);
  clear_has_blocktime();
}
 ::google::protobuf::uint64 RoleOff::blocktime() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.blocktime)
  return blocktime_;
}
 void RoleOff::set_blocktime(::google::protobuf::uint64 value) {
  set_has_blocktime();
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.blocktime)
}

// optional uint32 today_play_num = 22;
bool RoleOff::has_today_play_num() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void RoleOff::set_has_today_play_num() {
  _has_bits_[0] |= 0x00200000u;
}
void RoleOff::clear_has_today_play_num() {
  _has_bits_[0] &= ~0x00200000u;
}
void RoleOff::clear_today_play_num() {
  today_play_num_ = 0u;
  clear_has_today_play_num();
}
 ::google::protobuf::uint32 RoleOff::today_play_num() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.today_play_num)
  return today_play_num_;
}
 void RoleOff::set_today_play_num(::google::protobuf::uint32 value) {
  set_has_today_play_num();
  today_play_num_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.today_play_num)
}

// optional string readname = 23;
bool RoleOff::has_readname() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void RoleOff::set_has_readname() {
  _has_bits_[0] |= 0x00400000u;
}
void RoleOff::clear_has_readname() {
  _has_bits_[0] &= ~0x00400000u;
}
void RoleOff::clear_readname() {
  readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readname();
}
 const ::std::string& RoleOff::readname() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.readname)
  return readname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_readname(const ::std::string& value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.readname)
}
 void RoleOff::set_readname(const char* value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.readname)
}
 void RoleOff::set_readname(const char* value, size_t size) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.readname)
}
 ::std::string* RoleOff::mutable_readname() {
  set_has_readname();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.readname)
  return readname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_readname() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.readname)
  clear_has_readname();
  return readname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_readname(::std::string* readname) {
  if (readname != NULL) {
    set_has_readname();
  } else {
    clear_has_readname();
  }
  readname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.readname)
}

// optional string readcard = 24;
bool RoleOff::has_readcard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void RoleOff::set_has_readcard() {
  _has_bits_[0] |= 0x00800000u;
}
void RoleOff::clear_has_readcard() {
  _has_bits_[0] &= ~0x00800000u;
}
void RoleOff::clear_readcard() {
  readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readcard();
}
 const ::std::string& RoleOff::readcard() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.readcard)
  return readcard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_readcard(const ::std::string& value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.readcard)
}
 void RoleOff::set_readcard(const char* value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.readcard)
}
 void RoleOff::set_readcard(const char* value, size_t size) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.readcard)
}
 ::std::string* RoleOff::mutable_readcard() {
  set_has_readcard();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.readcard)
  return readcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_readcard() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.readcard)
  clear_has_readcard();
  return readcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_readcard(::std::string* readcard) {
  if (readcard != NULL) {
    set_has_readcard();
  } else {
    clear_has_readcard();
  }
  readcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readcard);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.readcard)
}

// optional uint64 last_game_end = 25;
bool RoleOff::has_last_game_end() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void RoleOff::set_has_last_game_end() {
  _has_bits_[0] |= 0x01000000u;
}
void RoleOff::clear_has_last_game_end() {
  _has_bits_[0] &= ~0x01000000u;
}
void RoleOff::clear_last_game_end() {
  last_game_end_ = GOOGLE_ULONGLONG(0);
  clear_has_last_game_end();
}
 ::google::protobuf::uint64 RoleOff::last_game_end() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.last_game_end)
  return last_game_end_;
}
 void RoleOff::set_last_game_end(::google::protobuf::uint64 value) {
  set_has_last_game_end();
  last_game_end_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.last_game_end)
}

// optional uint64 login_time = 26;
bool RoleOff::has_login_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void RoleOff::set_has_login_time() {
  _has_bits_[0] |= 0x02000000u;
}
void RoleOff::clear_has_login_time() {
  _has_bits_[0] &= ~0x02000000u;
}
void RoleOff::clear_login_time() {
  login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_login_time();
}
 ::google::protobuf::uint64 RoleOff::login_time() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.login_time)
  return login_time_;
}
 void RoleOff::set_login_time(::google::protobuf::uint64 value) {
  set_has_login_time();
  login_time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.login_time)
}

// optional string ip = 27;
bool RoleOff::has_ip() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void RoleOff::set_has_ip() {
  _has_bits_[0] |= 0x04000000u;
}
void RoleOff::clear_has_ip() {
  _has_bits_[0] &= ~0x04000000u;
}
void RoleOff::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& RoleOff::ip() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleOff.ip)
}
 void RoleOff::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleOff.ip)
}
 void RoleOff::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleOff.ip)
}
 ::std::string* RoleOff::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleOff::release_ip() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleOff::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.ip)
}

// optional .msg_maj.Data data = 99;
bool RoleOff::has_data() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void RoleOff::set_has_data() {
  _has_bits_[0] |= 0x08000000u;
}
void RoleOff::clear_has_data() {
  _has_bits_[0] &= ~0x08000000u;
}
void RoleOff::clear_data() {
  if (data_ != NULL) data_->::msg_maj::Data::Clear();
  clear_has_data();
}
const ::msg_maj::Data& RoleOff::data() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleOff.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::msg_maj::Data* RoleOff::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::msg_maj::Data;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleOff.data)
  return data_;
}
::msg_maj::Data* RoleOff::release_data() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleOff.data)
  clear_has_data();
  ::msg_maj::Data* temp = data_;
  data_ = NULL;
  return temp;
}
void RoleOff::set_allocated_data(::msg_maj::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleOff.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleWs::kIdFieldNumber;
const int RoleWs::kAccountFieldNumber;
const int RoleWs::kNicknameFieldNumber;
const int RoleWs::kLogoIconFieldNumber;
const int RoleWs::kRoomCardFieldNumber;
const int RoleWs::kTotalGamesFieldNumber;
const int RoleWs::kWinGamesFieldNumber;
const int RoleWs::kHisMaxConFieldNumber;
const int RoleWs::kHisMaxScoreFieldNumber;
const int RoleWs::kTopScoreTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleWs::RoleWs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleWs)
}

void RoleWs::InitAsDefaultInstance() {
}

RoleWs::RoleWs(const RoleWs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleWs)
}

void RoleWs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_card_ = 0u;
  total_games_ = 0u;
  win_games_ = 0u;
  his_max_con_ = 0u;
  his_max_score_ = 0u;
  top_score_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleWs::~RoleWs() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleWs)
  SharedDtor();
}

void RoleWs::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoleWs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleWs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleWs_descriptor_;
}

const RoleWs& RoleWs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

RoleWs* RoleWs::default_instance_ = NULL;

RoleWs* RoleWs::New(::google::protobuf::Arena* arena) const {
  RoleWs* n = new RoleWs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleWs::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleWs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoleWs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoleWs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(room_card_, his_max_con_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_logo_icon()) {
      logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(his_max_score_, top_score_total_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleWs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleWs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleWs.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleWs.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_logo_icon;
        break;
      }

      // optional string logo_icon = 4;
      case 4: {
        if (tag == 34) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_icon().data(), this->logo_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleWs.logo_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_card;
        break;
      }

      // optional uint32 room_card = 5;
      case 5: {
        if (tag == 40) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_games;
        break;
      }

      // optional uint32 total_games = 6;
      case 6: {
        if (tag == 48) {
         parse_total_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_)));
          set_has_total_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_win_games;
        break;
      }

      // optional uint32 win_games = 7;
      case 7: {
        if (tag == 56) {
         parse_win_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_games_)));
          set_has_win_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_his_max_con;
        break;
      }

      // optional uint32 his_max_con = 8;
      case 8: {
        if (tag == 64) {
         parse_his_max_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_con_)));
          set_has_his_max_con();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_his_max_score;
        break;
      }

      // optional uint32 his_max_score = 9;
      case 9: {
        if (tag == 72) {
         parse_his_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_score_)));
          set_has_his_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_top_score_total;
        break;
      }

      // optional int32 top_score_total = 10;
      case 10: {
        if (tag == 80) {
         parse_top_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_score_total_)));
          set_has_top_score_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleWs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleWs)
  return false;
#undef DO_
}

void RoleWs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleWs)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string logo_icon = 4;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.logo_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logo_icon(), output);
  }

  // optional uint32 room_card = 5;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->room_card(), output);
  }

  // optional uint32 total_games = 6;
  if (has_total_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_games(), output);
  }

  // optional uint32 win_games = 7;
  if (has_win_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->win_games(), output);
  }

  // optional uint32 his_max_con = 8;
  if (has_his_max_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->his_max_con(), output);
  }

  // optional uint32 his_max_score = 9;
  if (has_his_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->his_max_score(), output);
  }

  // optional int32 top_score_total = 10;
  if (has_top_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->top_score_total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleWs)
}

::google::protobuf::uint8* RoleWs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleWs)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string logo_icon = 4;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleWs.logo_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logo_icon(), target);
  }

  // optional uint32 room_card = 5;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->room_card(), target);
  }

  // optional uint32 total_games = 6;
  if (has_total_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_games(), target);
  }

  // optional uint32 win_games = 7;
  if (has_win_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->win_games(), target);
  }

  // optional uint32 his_max_con = 8;
  if (has_his_max_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->his_max_con(), target);
  }

  // optional uint32 his_max_score = 9;
  if (has_his_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->his_max_score(), target);
  }

  // optional int32 top_score_total = 10;
  if (has_top_score_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->top_score_total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleWs)
  return target;
}

int RoleWs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleWs)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string logo_icon = 4;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_icon());
    }

    // optional uint32 room_card = 5;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_card());
    }

    // optional uint32 total_games = 6;
    if (has_total_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games());
    }

    // optional uint32 win_games = 7;
    if (has_win_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_games());
    }

    // optional uint32 his_max_con = 8;
    if (has_his_max_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_con());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 his_max_score = 9;
    if (has_his_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_score());
    }

    // optional int32 top_score_total = 10;
    if (has_top_score_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_score_total());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleWs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleWs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleWs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleWs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleWs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleWs)
    MergeFrom(*source);
  }
}

void RoleWs::MergeFrom(const RoleWs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleWs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_logo_icon()) {
      set_has_logo_icon();
      logo_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_icon_);
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_total_games()) {
      set_total_games(from.total_games());
    }
    if (from.has_win_games()) {
      set_win_games(from.win_games());
    }
    if (from.has_his_max_con()) {
      set_his_max_con(from.his_max_con());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_his_max_score()) {
      set_his_max_score(from.his_max_score());
    }
    if (from.has_top_score_total()) {
      set_top_score_total(from.top_score_total());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleWs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleWs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleWs::CopyFrom(const RoleWs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleWs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleWs::IsInitialized() const {

  return true;
}

void RoleWs::Swap(RoleWs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleWs::InternalSwap(RoleWs* other) {
  std::swap(id_, other->id_);
  account_.Swap(&other->account_);
  nickname_.Swap(&other->nickname_);
  logo_icon_.Swap(&other->logo_icon_);
  std::swap(room_card_, other->room_card_);
  std::swap(total_games_, other->total_games_);
  std::swap(win_games_, other->win_games_);
  std::swap(his_max_con_, other->his_max_con_);
  std::swap(his_max_score_, other->his_max_score_);
  std::swap(top_score_total_, other->top_score_total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleWs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleWs_descriptor_;
  metadata.reflection = RoleWs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleWs

// optional uint64 id = 1;
bool RoleWs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleWs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleWs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleWs::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 RoleWs::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.id)
  return id_;
}
 void RoleWs::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.id)
}

// optional string account = 2;
bool RoleWs::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleWs::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleWs::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleWs::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& RoleWs::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.account)
}
 void RoleWs::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleWs.account)
}
 void RoleWs::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleWs.account)
}
 ::std::string* RoleWs::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleWs.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleWs::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleWs.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleWs.account)
}

// optional string nickname = 3;
bool RoleWs::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleWs::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleWs::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleWs::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RoleWs::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.nickname)
}
 void RoleWs::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleWs.nickname)
}
 void RoleWs::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleWs.nickname)
}
 ::std::string* RoleWs::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleWs.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleWs::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleWs.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleWs.nickname)
}

// optional string logo_icon = 4;
bool RoleWs::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoleWs::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000008u;
}
void RoleWs::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoleWs::clear_logo_icon() {
  logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_icon();
}
 const ::std::string& RoleWs::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.logo_icon)
  return logo_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_logo_icon(const ::std::string& value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.logo_icon)
}
 void RoleWs::set_logo_icon(const char* value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleWs.logo_icon)
}
 void RoleWs::set_logo_icon(const char* value, size_t size) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleWs.logo_icon)
}
 ::std::string* RoleWs::mutable_logo_icon() {
  set_has_logo_icon();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleWs.logo_icon)
  return logo_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleWs::release_logo_icon() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleWs.logo_icon)
  clear_has_logo_icon();
  return logo_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleWs::set_allocated_logo_icon(::std::string* logo_icon) {
  if (logo_icon != NULL) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  logo_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_icon);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleWs.logo_icon)
}

// optional uint32 room_card = 5;
bool RoleWs::has_room_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoleWs::set_has_room_card() {
  _has_bits_[0] |= 0x00000010u;
}
void RoleWs::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoleWs::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 RoleWs::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.room_card)
  return room_card_;
}
 void RoleWs::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.room_card)
}

// optional uint32 total_games = 6;
bool RoleWs::has_total_games() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoleWs::set_has_total_games() {
  _has_bits_[0] |= 0x00000020u;
}
void RoleWs::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoleWs::clear_total_games() {
  total_games_ = 0u;
  clear_has_total_games();
}
 ::google::protobuf::uint32 RoleWs::total_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.total_games)
  return total_games_;
}
 void RoleWs::set_total_games(::google::protobuf::uint32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.total_games)
}

// optional uint32 win_games = 7;
bool RoleWs::has_win_games() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoleWs::set_has_win_games() {
  _has_bits_[0] |= 0x00000040u;
}
void RoleWs::clear_has_win_games() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoleWs::clear_win_games() {
  win_games_ = 0u;
  clear_has_win_games();
}
 ::google::protobuf::uint32 RoleWs::win_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.win_games)
  return win_games_;
}
 void RoleWs::set_win_games(::google::protobuf::uint32 value) {
  set_has_win_games();
  win_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.win_games)
}

// optional uint32 his_max_con = 8;
bool RoleWs::has_his_max_con() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoleWs::set_has_his_max_con() {
  _has_bits_[0] |= 0x00000080u;
}
void RoleWs::clear_has_his_max_con() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoleWs::clear_his_max_con() {
  his_max_con_ = 0u;
  clear_has_his_max_con();
}
 ::google::protobuf::uint32 RoleWs::his_max_con() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.his_max_con)
  return his_max_con_;
}
 void RoleWs::set_his_max_con(::google::protobuf::uint32 value) {
  set_has_his_max_con();
  his_max_con_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.his_max_con)
}

// optional uint32 his_max_score = 9;
bool RoleWs::has_his_max_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoleWs::set_has_his_max_score() {
  _has_bits_[0] |= 0x00000100u;
}
void RoleWs::clear_has_his_max_score() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoleWs::clear_his_max_score() {
  his_max_score_ = 0u;
  clear_has_his_max_score();
}
 ::google::protobuf::uint32 RoleWs::his_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.his_max_score)
  return his_max_score_;
}
 void RoleWs::set_his_max_score(::google::protobuf::uint32 value) {
  set_has_his_max_score();
  his_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.his_max_score)
}

// optional int32 top_score_total = 10;
bool RoleWs::has_top_score_total() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoleWs::set_has_top_score_total() {
  _has_bits_[0] |= 0x00000200u;
}
void RoleWs::clear_has_top_score_total() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoleWs::clear_top_score_total() {
  top_score_total_ = 0;
  clear_has_top_score_total();
}
 ::google::protobuf::int32 RoleWs::top_score_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleWs.top_score_total)
  return top_score_total_;
}
 void RoleWs::set_top_score_total(::google::protobuf::int32 value) {
  set_has_top_score_total();
  top_score_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleWs.top_score_total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleFep::kIdFieldNumber;
const int RoleFep::kSessionidFieldNumber;
const int RoleFep::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleFep::RoleFep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleFep)
}

void RoleFep::InitAsDefaultInstance() {
}

RoleFep::RoleFep(const RoleFep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleFep)
}

void RoleFep::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  sessionid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFep::~RoleFep() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleFep)
  SharedDtor();
}

void RoleFep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleFep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFep_descriptor_;
}

const RoleFep& RoleFep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

RoleFep* RoleFep::default_instance_ = NULL;

RoleFep* RoleFep::New(::google::protobuf::Arena* arena) const {
  RoleFep* n = new RoleFep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleFep::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleFep)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoleFep, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoleFep*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, serverid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleFep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleFep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional uint64 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleFep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleFep)
  return false;
#undef DO_
}

void RoleFep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleFep)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sessionid(), output);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleFep)
}

::google::protobuf::uint8* RoleFep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleFep)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 sessionid = 2;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sessionid(), target);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleFep)
  return target;
}

int RoleFep::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleFep)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleFep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleFep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleFep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleFep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleFep)
    MergeFrom(*source);
  }
}

void RoleFep::MergeFrom(const RoleFep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleFep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleFep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleFep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFep::CopyFrom(const RoleFep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleFep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFep::IsInitialized() const {

  return true;
}

void RoleFep::Swap(RoleFep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleFep::InternalSwap(RoleFep* other) {
  std::swap(id_, other->id_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleFep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFep_descriptor_;
  metadata.reflection = RoleFep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleFep

// optional uint64 id = 1;
bool RoleFep::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleFep::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleFep::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleFep::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 RoleFep::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleFep.id)
  return id_;
}
 void RoleFep::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleFep.id)
}

// optional uint64 sessionid = 2;
bool RoleFep::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleFep::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleFep::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleFep::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
 ::google::protobuf::uint64 RoleFep::sessionid() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleFep.sessionid)
  return sessionid_;
}
 void RoleFep::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleFep.sessionid)
}

// optional uint32 serverid = 3;
bool RoleFep::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleFep::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleFep::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleFep::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
 ::google::protobuf::uint32 RoleFep::serverid() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleFep.serverid)
  return serverid_;
}
 void RoleFep::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleFep.serverid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleC::kIdFieldNumber;
const int RoleC::kNicknameFieldNumber;
const int RoleC::kLogoIconFieldNumber;
const int RoleC::kSexualFieldNumber;
const int RoleC::kRoomCardFieldNumber;
const int RoleC::kTotalGamesFieldNumber;
const int RoleC::kWinGamesFieldNumber;
const int RoleC::kHisConGamesFieldNumber;
const int RoleC::kHisMaxScoreFieldNumber;
const int RoleC::kTopScoreTotalFieldNumber;
const int RoleC::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleC::RoleC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleC)
}

void RoleC::InitAsDefaultInstance() {
}

RoleC::RoleC(const RoleC& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleC)
}

void RoleC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sexual_ = 0u;
  room_card_ = 0u;
  total_games_ = 0u;
  win_games_ = 0u;
  his_con_games_ = 0u;
  his_max_score_ = 0u;
  top_score_total_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleC::~RoleC() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleC)
  SharedDtor();
}

void RoleC::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoleC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleC_descriptor_;
}

const RoleC& RoleC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

RoleC* RoleC::default_instance_ = NULL;

RoleC* RoleC::New(::google::protobuf::Arena* arena) const {
  RoleC* n = new RoleC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleC)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoleC, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoleC*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sexual_, his_con_games_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_logo_icon()) {
      logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    his_max_score_ = 0u;
    top_score_total_ = 0;
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleC.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_logo_icon;
        break;
      }

      // optional string logo_icon = 3;
      case 3: {
        if (tag == 26) {
         parse_logo_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_icon().data(), this->logo_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleC.logo_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sexual;
        break;
      }

      // optional uint32 sexual = 4;
      case 4: {
        if (tag == 32) {
         parse_sexual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sexual_)));
          set_has_sexual();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_room_card;
        break;
      }

      // optional uint32 room_card = 5;
      case 5: {
        if (tag == 40) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_games;
        break;
      }

      // optional uint32 total_games = 6;
      case 6: {
        if (tag == 48) {
         parse_total_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_)));
          set_has_total_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_win_games;
        break;
      }

      // optional uint32 win_games = 7;
      case 7: {
        if (tag == 56) {
         parse_win_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_games_)));
          set_has_win_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_his_con_games;
        break;
      }

      // optional uint32 his_con_games = 8;
      case 8: {
        if (tag == 64) {
         parse_his_con_games:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_con_games_)));
          set_has_his_con_games();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_his_max_score;
        break;
      }

      // optional uint32 his_max_score = 9;
      case 9: {
        if (tag == 72) {
         parse_his_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &his_max_score_)));
          set_has_his_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_top_score_total;
        break;
      }

      // optional int32 top_score_total = 10;
      case 10: {
        if (tag == 80) {
         parse_top_score_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_score_total_)));
          set_has_top_score_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_address;
        break;
      }

      // optional string address = 11;
      case 11: {
        if (tag == 90) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleC.address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleC)
  return false;
#undef DO_
}

void RoleC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleC)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string logo_icon = 3;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.logo_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->logo_icon(), output);
  }

  // optional uint32 sexual = 4;
  if (has_sexual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sexual(), output);
  }

  // optional uint32 room_card = 5;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->room_card(), output);
  }

  // optional uint32 total_games = 6;
  if (has_total_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_games(), output);
  }

  // optional uint32 win_games = 7;
  if (has_win_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->win_games(), output);
  }

  // optional uint32 his_con_games = 8;
  if (has_his_con_games()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->his_con_games(), output);
  }

  // optional uint32 his_max_score = 9;
  if (has_his_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->his_max_score(), output);
  }

  // optional int32 top_score_total = 10;
  if (has_top_score_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->top_score_total(), output);
  }

  // optional string address = 11;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleC)
}

::google::protobuf::uint8* RoleC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleC)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string logo_icon = 3;
  if (has_logo_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_icon().data(), this->logo_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.logo_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logo_icon(), target);
  }

  // optional uint32 sexual = 4;
  if (has_sexual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sexual(), target);
  }

  // optional uint32 room_card = 5;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->room_card(), target);
  }

  // optional uint32 total_games = 6;
  if (has_total_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_games(), target);
  }

  // optional uint32 win_games = 7;
  if (has_win_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->win_games(), target);
  }

  // optional uint32 his_con_games = 8;
  if (has_his_con_games()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->his_con_games(), target);
  }

  // optional uint32 his_max_score = 9;
  if (has_his_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->his_max_score(), target);
  }

  // optional int32 top_score_total = 10;
  if (has_top_score_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->top_score_total(), target);
  }

  // optional string address = 11;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleC.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleC)
  return target;
}

int RoleC::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleC)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string logo_icon = 3;
    if (has_logo_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_icon());
    }

    // optional uint32 sexual = 4;
    if (has_sexual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sexual());
    }

    // optional uint32 room_card = 5;
    if (has_room_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_card());
    }

    // optional uint32 total_games = 6;
    if (has_total_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games());
    }

    // optional uint32 win_games = 7;
    if (has_win_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_games());
    }

    // optional uint32 his_con_games = 8;
    if (has_his_con_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_con_games());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 his_max_score = 9;
    if (has_his_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->his_max_score());
    }

    // optional int32 top_score_total = 10;
    if (has_top_score_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_score_total());
    }

    // optional string address = 11;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleC* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleC)
    MergeFrom(*source);
  }
}

void RoleC::MergeFrom(const RoleC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleC)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_logo_icon()) {
      set_has_logo_icon();
      logo_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_icon_);
    }
    if (from.has_sexual()) {
      set_sexual(from.sexual());
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_total_games()) {
      set_total_games(from.total_games());
    }
    if (from.has_win_games()) {
      set_win_games(from.win_games());
    }
    if (from.has_his_con_games()) {
      set_his_con_games(from.his_con_games());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_his_max_score()) {
      set_his_max_score(from.his_max_score());
    }
    if (from.has_top_score_total()) {
      set_top_score_total(from.top_score_total());
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleC::CopyFrom(const RoleC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleC::IsInitialized() const {

  return true;
}

void RoleC::Swap(RoleC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleC::InternalSwap(RoleC* other) {
  std::swap(id_, other->id_);
  nickname_.Swap(&other->nickname_);
  logo_icon_.Swap(&other->logo_icon_);
  std::swap(sexual_, other->sexual_);
  std::swap(room_card_, other->room_card_);
  std::swap(total_games_, other->total_games_);
  std::swap(win_games_, other->win_games_);
  std::swap(his_con_games_, other->his_con_games_);
  std::swap(his_max_score_, other->his_max_score_);
  std::swap(top_score_total_, other->top_score_total_);
  address_.Swap(&other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleC_descriptor_;
  metadata.reflection = RoleC_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleC

// optional uint64 id = 1;
bool RoleC::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleC::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleC::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleC::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 RoleC::id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.id)
  return id_;
}
 void RoleC::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.id)
}

// optional string nickname = 2;
bool RoleC::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleC::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleC::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleC::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& RoleC::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.nickname)
}
 void RoleC::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleC.nickname)
}
 void RoleC::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleC.nickname)
}
 ::std::string* RoleC::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleC.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleC::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleC.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleC.nickname)
}

// optional string logo_icon = 3;
bool RoleC::has_logo_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleC::set_has_logo_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleC::clear_has_logo_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleC::clear_logo_icon() {
  logo_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_icon();
}
 const ::std::string& RoleC::logo_icon() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.logo_icon)
  return logo_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_logo_icon(const ::std::string& value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.logo_icon)
}
 void RoleC::set_logo_icon(const char* value) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleC.logo_icon)
}
 void RoleC::set_logo_icon(const char* value, size_t size) {
  set_has_logo_icon();
  logo_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleC.logo_icon)
}
 ::std::string* RoleC::mutable_logo_icon() {
  set_has_logo_icon();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleC.logo_icon)
  return logo_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleC::release_logo_icon() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleC.logo_icon)
  clear_has_logo_icon();
  return logo_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_allocated_logo_icon(::std::string* logo_icon) {
  if (logo_icon != NULL) {
    set_has_logo_icon();
  } else {
    clear_has_logo_icon();
  }
  logo_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_icon);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleC.logo_icon)
}

// optional uint32 sexual = 4;
bool RoleC::has_sexual() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoleC::set_has_sexual() {
  _has_bits_[0] |= 0x00000008u;
}
void RoleC::clear_has_sexual() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoleC::clear_sexual() {
  sexual_ = 0u;
  clear_has_sexual();
}
 ::google::protobuf::uint32 RoleC::sexual() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.sexual)
  return sexual_;
}
 void RoleC::set_sexual(::google::protobuf::uint32 value) {
  set_has_sexual();
  sexual_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.sexual)
}

// optional uint32 room_card = 5;
bool RoleC::has_room_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoleC::set_has_room_card() {
  _has_bits_[0] |= 0x00000010u;
}
void RoleC::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoleC::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 RoleC::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.room_card)
  return room_card_;
}
 void RoleC::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.room_card)
}

// optional uint32 total_games = 6;
bool RoleC::has_total_games() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoleC::set_has_total_games() {
  _has_bits_[0] |= 0x00000020u;
}
void RoleC::clear_has_total_games() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoleC::clear_total_games() {
  total_games_ = 0u;
  clear_has_total_games();
}
 ::google::protobuf::uint32 RoleC::total_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.total_games)
  return total_games_;
}
 void RoleC::set_total_games(::google::protobuf::uint32 value) {
  set_has_total_games();
  total_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.total_games)
}

// optional uint32 win_games = 7;
bool RoleC::has_win_games() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoleC::set_has_win_games() {
  _has_bits_[0] |= 0x00000040u;
}
void RoleC::clear_has_win_games() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoleC::clear_win_games() {
  win_games_ = 0u;
  clear_has_win_games();
}
 ::google::protobuf::uint32 RoleC::win_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.win_games)
  return win_games_;
}
 void RoleC::set_win_games(::google::protobuf::uint32 value) {
  set_has_win_games();
  win_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.win_games)
}

// optional uint32 his_con_games = 8;
bool RoleC::has_his_con_games() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoleC::set_has_his_con_games() {
  _has_bits_[0] |= 0x00000080u;
}
void RoleC::clear_has_his_con_games() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoleC::clear_his_con_games() {
  his_con_games_ = 0u;
  clear_has_his_con_games();
}
 ::google::protobuf::uint32 RoleC::his_con_games() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.his_con_games)
  return his_con_games_;
}
 void RoleC::set_his_con_games(::google::protobuf::uint32 value) {
  set_has_his_con_games();
  his_con_games_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.his_con_games)
}

// optional uint32 his_max_score = 9;
bool RoleC::has_his_max_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoleC::set_has_his_max_score() {
  _has_bits_[0] |= 0x00000100u;
}
void RoleC::clear_has_his_max_score() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoleC::clear_his_max_score() {
  his_max_score_ = 0u;
  clear_has_his_max_score();
}
 ::google::protobuf::uint32 RoleC::his_max_score() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.his_max_score)
  return his_max_score_;
}
 void RoleC::set_his_max_score(::google::protobuf::uint32 value) {
  set_has_his_max_score();
  his_max_score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.his_max_score)
}

// optional int32 top_score_total = 10;
bool RoleC::has_top_score_total() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoleC::set_has_top_score_total() {
  _has_bits_[0] |= 0x00000200u;
}
void RoleC::clear_has_top_score_total() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoleC::clear_top_score_total() {
  top_score_total_ = 0;
  clear_has_top_score_total();
}
 ::google::protobuf::int32 RoleC::top_score_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.top_score_total)
  return top_score_total_;
}
 void RoleC::set_top_score_total(::google::protobuf::int32 value) {
  set_has_top_score_total();
  top_score_total_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.top_score_total)
}

// optional string address = 11;
bool RoleC::has_address() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RoleC::set_has_address() {
  _has_bits_[0] |= 0x00000400u;
}
void RoleC::clear_has_address() {
  _has_bits_[0] &= ~0x00000400u;
}
void RoleC::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& RoleC::address() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleC.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleC.address)
}
 void RoleC::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleC.address)
}
 void RoleC::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleC.address)
}
 ::std::string* RoleC::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleC.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleC::release_address() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleC.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleC::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleC.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomCardData::kRoomCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomCardData::RoomCardData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoomCardData)
}

void RoomCardData::InitAsDefaultInstance() {
}

RoomCardData::RoomCardData(const RoomCardData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoomCardData)
}

void RoomCardData::SharedCtor() {
  _cached_size_ = 0;
  room_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCardData::~RoomCardData() {
  // @@protoc_insertion_point(destructor:msg_maj.RoomCardData)
  SharedDtor();
}

void RoomCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCardData_descriptor_;
}

const RoomCardData& RoomCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

RoomCardData* RoomCardData::default_instance_ = NULL;

RoomCardData* RoomCardData::New(::google::protobuf::Arena* arena) const {
  RoomCardData* n = new RoomCardData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomCardData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoomCardData)
  room_card_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoomCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoomCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 room_card = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoomCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoomCardData)
  return false;
#undef DO_
}

void RoomCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoomCardData)
  // optional uint32 room_card = 1;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_card(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoomCardData)
}

::google::protobuf::uint8* RoomCardData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoomCardData)
  // optional uint32 room_card = 1;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_card(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoomCardData)
  return target;
}

int RoomCardData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoomCardData)
  int total_size = 0;

  // optional uint32 room_card = 1;
  if (has_room_card()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_card());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCardData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoomCardData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoomCardData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomCardData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoomCardData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoomCardData)
    MergeFrom(*source);
  }
}

void RoomCardData::MergeFrom(const RoomCardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoomCardData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoomCardData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoomCardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCardData::CopyFrom(const RoomCardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoomCardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCardData::IsInitialized() const {

  return true;
}

void RoomCardData::Swap(RoomCardData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomCardData::InternalSwap(RoomCardData* other) {
  std::swap(room_card_, other->room_card_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCardData_descriptor_;
  metadata.reflection = RoomCardData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomCardData

// optional uint32 room_card = 1;
bool RoomCardData::has_room_card() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoomCardData::set_has_room_card() {
  _has_bits_[0] |= 0x00000001u;
}
void RoomCardData::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoomCardData::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 RoomCardData::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoomCardData.room_card)
  return room_card_;
}
 void RoomCardData::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoomCardData.room_card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRoleData::kRoomCardDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRoleData::UpdateRoleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.UpdateRoleData)
}

void UpdateRoleData::InitAsDefaultInstance() {
  room_card_data_ = const_cast< ::msg_maj::RoomCardData*>(&::msg_maj::RoomCardData::default_instance());
}

UpdateRoleData::UpdateRoleData(const UpdateRoleData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.UpdateRoleData)
}

void UpdateRoleData::SharedCtor() {
  _cached_size_ = 0;
  room_card_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoleData::~UpdateRoleData() {
  // @@protoc_insertion_point(destructor:msg_maj.UpdateRoleData)
  SharedDtor();
}

void UpdateRoleData::SharedDtor() {
  if (this != default_instance_) {
    delete room_card_data_;
  }
}

void UpdateRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRoleData_descriptor_;
}

const UpdateRoleData& UpdateRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

UpdateRoleData* UpdateRoleData::default_instance_ = NULL;

UpdateRoleData* UpdateRoleData::New(::google::protobuf::Arena* arena) const {
  UpdateRoleData* n = new UpdateRoleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.UpdateRoleData)
  if (has_room_card_data()) {
    if (room_card_data_ != NULL) room_card_data_->::msg_maj::RoomCardData::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.UpdateRoleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg_maj.RoomCardData room_card_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_card_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.UpdateRoleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.UpdateRoleData)
  return false;
#undef DO_
}

void UpdateRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.UpdateRoleData)
  // optional .msg_maj.RoomCardData room_card_data = 1;
  if (has_room_card_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_card_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.UpdateRoleData)
}

::google::protobuf::uint8* UpdateRoleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.UpdateRoleData)
  // optional .msg_maj.RoomCardData room_card_data = 1;
  if (has_room_card_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_card_data_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.UpdateRoleData)
  return target;
}

int UpdateRoleData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.UpdateRoleData)
  int total_size = 0;

  // optional .msg_maj.RoomCardData room_card_data = 1;
  if (has_room_card_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_card_data_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.UpdateRoleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateRoleData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRoleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.UpdateRoleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.UpdateRoleData)
    MergeFrom(*source);
  }
}

void UpdateRoleData::MergeFrom(const UpdateRoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.UpdateRoleData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_card_data()) {
      mutable_room_card_data()->::msg_maj::RoomCardData::MergeFrom(from.room_card_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UpdateRoleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.UpdateRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoleData::CopyFrom(const UpdateRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.UpdateRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleData::IsInitialized() const {

  return true;
}

void UpdateRoleData::Swap(UpdateRoleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRoleData::InternalSwap(UpdateRoleData* other) {
  std::swap(room_card_data_, other->room_card_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRoleData_descriptor_;
  metadata.reflection = UpdateRoleData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRoleData

// optional .msg_maj.RoomCardData room_card_data = 1;
bool UpdateRoleData::has_room_card_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateRoleData::set_has_room_card_data() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateRoleData::clear_has_room_card_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateRoleData::clear_room_card_data() {
  if (room_card_data_ != NULL) room_card_data_->::msg_maj::RoomCardData::Clear();
  clear_has_room_card_data();
}
const ::msg_maj::RoomCardData& UpdateRoleData::room_card_data() const {
  // @@protoc_insertion_point(field_get:msg_maj.UpdateRoleData.room_card_data)
  return room_card_data_ != NULL ? *room_card_data_ : *default_instance_->room_card_data_;
}
::msg_maj::RoomCardData* UpdateRoleData::mutable_room_card_data() {
  set_has_room_card_data();
  if (room_card_data_ == NULL) {
    room_card_data_ = new ::msg_maj::RoomCardData;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.UpdateRoleData.room_card_data)
  return room_card_data_;
}
::msg_maj::RoomCardData* UpdateRoleData::release_room_card_data() {
  // @@protoc_insertion_point(field_release:msg_maj.UpdateRoleData.room_card_data)
  clear_has_room_card_data();
  ::msg_maj::RoomCardData* temp = room_card_data_;
  room_card_data_ = NULL;
  return temp;
}
void UpdateRoleData::set_allocated_room_card_data(::msg_maj::RoomCardData* room_card_data) {
  delete room_card_data_;
  room_card_data_ = room_card_data;
  if (room_card_data) {
    set_has_room_card_data();
  } else {
    clear_has_room_card_data();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.UpdateRoleData.room_card_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoneyLog::kLogIdFieldNumber;
const int MoneyLog::kMoneyTypeFieldNumber;
const int MoneyLog::kMoneyNumFieldNumber;
const int MoneyLog::kLogTypeFieldNumber;
const int MoneyLog::kCharIdFieldNumber;
const int MoneyLog::kLogTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoneyLog::MoneyLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.MoneyLog)
}

void MoneyLog::InitAsDefaultInstance() {
}

MoneyLog::MoneyLog(const MoneyLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.MoneyLog)
}

void MoneyLog::SharedCtor() {
  _cached_size_ = 0;
  log_id_ = GOOGLE_ULONGLONG(0);
  money_type_ = 0;
  money_num_ = 0;
  log_type_ = 0;
  char_id_ = GOOGLE_ULONGLONG(0);
  log_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyLog::~MoneyLog() {
  // @@protoc_insertion_point(destructor:msg_maj.MoneyLog)
  SharedDtor();
}

void MoneyLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyLog_descriptor_;
}

const MoneyLog& MoneyLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

MoneyLog* MoneyLog::default_instance_ = NULL;

MoneyLog* MoneyLog::New(::google::protobuf::Arena* arena) const {
  MoneyLog* n = new MoneyLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoneyLog::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.MoneyLog)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MoneyLog, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MoneyLog*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(log_id_, log_type_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MoneyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.MoneyLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 log_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money_type;
        break;
      }

      // required int32 money_type = 2;
      case 2: {
        if (tag == 16) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money_num;
        break;
      }

      // required int32 money_num = 3;
      case 3: {
        if (tag == 24) {
         parse_money_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_num_)));
          set_has_money_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_log_type;
        break;
      }

      // required int32 log_type = 4;
      case 4: {
        if (tag == 32) {
         parse_log_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_type_)));
          set_has_log_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_char_id;
        break;
      }

      // required uint64 char_id = 6;
      case 6: {
        if (tag == 48) {
         parse_char_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_log_time;
        break;
      }

      // required uint64 log_time = 7;
      case 7: {
        if (tag == 56) {
         parse_log_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_time_)));
          set_has_log_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.MoneyLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.MoneyLog)
  return false;
#undef DO_
}

void MoneyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.MoneyLog)
  // required uint64 log_id = 1;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->log_id(), output);
  }

  // required int32 money_type = 2;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money_type(), output);
  }

  // required int32 money_num = 3;
  if (has_money_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money_num(), output);
  }

  // required int32 log_type = 4;
  if (has_log_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->log_type(), output);
  }

  // required uint64 char_id = 6;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->char_id(), output);
  }

  // required uint64 log_time = 7;
  if (has_log_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->log_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.MoneyLog)
}

::google::protobuf::uint8* MoneyLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.MoneyLog)
  // required uint64 log_id = 1;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->log_id(), target);
  }

  // required int32 money_type = 2;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money_type(), target);
  }

  // required int32 money_num = 3;
  if (has_money_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money_num(), target);
  }

  // required int32 log_type = 4;
  if (has_log_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->log_type(), target);
  }

  // required uint64 char_id = 6;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->char_id(), target);
  }

  // required uint64 log_time = 7;
  if (has_log_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->log_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.MoneyLog)
  return target;
}

int MoneyLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.MoneyLog)
  int total_size = 0;

  if (has_log_id()) {
    // required uint64 log_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_id());
  }

  if (has_money_type()) {
    // required int32 money_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money_type());
  }

  if (has_money_num()) {
    // required int32 money_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money_num());
  }

  if (has_log_type()) {
    // required int32 log_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->log_type());
  }

  if (has_char_id()) {
    // required uint64 char_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->char_id());
  }

  if (has_log_time()) {
    // required uint64 log_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_time());
  }

  return total_size;
}
int MoneyLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.MoneyLog)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 log_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_id());

    // required int32 money_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money_type());

    // required int32 money_num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money_num());

    // required int32 log_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->log_type());

    // required uint64 char_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->char_id());

    // required uint64 log_time = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->log_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.MoneyLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MoneyLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MoneyLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.MoneyLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.MoneyLog)
    MergeFrom(*source);
  }
}

void MoneyLog::MergeFrom(const MoneyLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.MoneyLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_money_num()) {
      set_money_num(from.money_num());
    }
    if (from.has_log_type()) {
      set_log_type(from.log_type());
    }
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_log_time()) {
      set_log_time(from.log_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MoneyLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.MoneyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyLog::CopyFrom(const MoneyLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.MoneyLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MoneyLog::Swap(MoneyLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoneyLog::InternalSwap(MoneyLog* other) {
  std::swap(log_id_, other->log_id_);
  std::swap(money_type_, other->money_type_);
  std::swap(money_num_, other->money_num_);
  std::swap(log_type_, other->log_type_);
  std::swap(char_id_, other->char_id_);
  std::swap(log_time_, other->log_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoneyLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyLog_descriptor_;
  metadata.reflection = MoneyLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoneyLog

// required uint64 log_id = 1;
bool MoneyLog::has_log_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoneyLog::set_has_log_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MoneyLog::clear_has_log_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoneyLog::clear_log_id() {
  log_id_ = GOOGLE_ULONGLONG(0);
  clear_has_log_id();
}
 ::google::protobuf::uint64 MoneyLog::log_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.log_id)
  return log_id_;
}
 void MoneyLog::set_log_id(::google::protobuf::uint64 value) {
  set_has_log_id();
  log_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.log_id)
}

// required int32 money_type = 2;
bool MoneyLog::has_money_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MoneyLog::set_has_money_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MoneyLog::clear_has_money_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MoneyLog::clear_money_type() {
  money_type_ = 0;
  clear_has_money_type();
}
 ::google::protobuf::int32 MoneyLog::money_type() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.money_type)
  return money_type_;
}
 void MoneyLog::set_money_type(::google::protobuf::int32 value) {
  set_has_money_type();
  money_type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.money_type)
}

// required int32 money_num = 3;
bool MoneyLog::has_money_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MoneyLog::set_has_money_num() {
  _has_bits_[0] |= 0x00000004u;
}
void MoneyLog::clear_has_money_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void MoneyLog::clear_money_num() {
  money_num_ = 0;
  clear_has_money_num();
}
 ::google::protobuf::int32 MoneyLog::money_num() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.money_num)
  return money_num_;
}
 void MoneyLog::set_money_num(::google::protobuf::int32 value) {
  set_has_money_num();
  money_num_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.money_num)
}

// required int32 log_type = 4;
bool MoneyLog::has_log_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MoneyLog::set_has_log_type() {
  _has_bits_[0] |= 0x00000008u;
}
void MoneyLog::clear_has_log_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void MoneyLog::clear_log_type() {
  log_type_ = 0;
  clear_has_log_type();
}
 ::google::protobuf::int32 MoneyLog::log_type() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.log_type)
  return log_type_;
}
 void MoneyLog::set_log_type(::google::protobuf::int32 value) {
  set_has_log_type();
  log_type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.log_type)
}

// required uint64 char_id = 6;
bool MoneyLog::has_char_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MoneyLog::set_has_char_id() {
  _has_bits_[0] |= 0x00000010u;
}
void MoneyLog::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void MoneyLog::clear_char_id() {
  char_id_ = GOOGLE_ULONGLONG(0);
  clear_has_char_id();
}
 ::google::protobuf::uint64 MoneyLog::char_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.char_id)
  return char_id_;
}
 void MoneyLog::set_char_id(::google::protobuf::uint64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.char_id)
}

// required uint64 log_time = 7;
bool MoneyLog::has_log_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MoneyLog::set_has_log_time() {
  _has_bits_[0] |= 0x00000020u;
}
void MoneyLog::clear_has_log_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void MoneyLog::clear_log_time() {
  log_time_ = GOOGLE_ULONGLONG(0);
  clear_has_log_time();
}
 ::google::protobuf::uint64 MoneyLog::log_time() const {
  // @@protoc_insertion_point(field_get:msg_maj.MoneyLog.log_time)
  return log_time_;
}
 void MoneyLog::set_log_time(::google::protobuf::uint64 value) {
  set_has_log_time();
  log_time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.MoneyLog.log_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GpsUploadReq::kLongitudeFieldNumber;
const int GpsUploadReq::kLatitudeFieldNumber;
const int GpsUploadReq::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GpsUploadReq::GpsUploadReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.GpsUploadReq)
}

void GpsUploadReq::InitAsDefaultInstance() {
}

GpsUploadReq::GpsUploadReq(const GpsUploadReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.GpsUploadReq)
}

void GpsUploadReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsUploadReq::~GpsUploadReq() {
  // @@protoc_insertion_point(destructor:msg_maj.GpsUploadReq)
  SharedDtor();
}

void GpsUploadReq::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GpsUploadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpsUploadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsUploadReq_descriptor_;
}

const GpsUploadReq& GpsUploadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

GpsUploadReq* GpsUploadReq::default_instance_ = NULL;

GpsUploadReq* GpsUploadReq::New(::google::protobuf::Arena* arena) const {
  GpsUploadReq* n = new GpsUploadReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GpsUploadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.GpsUploadReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GpsUploadReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GpsUploadReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(longitude_, latitude_);
    if (has_address()) {
      address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GpsUploadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.GpsUploadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double longitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // required string address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.GpsUploadReq.address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.GpsUploadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.GpsUploadReq)
  return false;
#undef DO_
}

void GpsUploadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.GpsUploadReq)
  // required double longitude = 1;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.GpsUploadReq.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.GpsUploadReq)
}

::google::protobuf::uint8* GpsUploadReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.GpsUploadReq)
  // required double longitude = 1;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.GpsUploadReq.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.GpsUploadReq)
  return target;
}

int GpsUploadReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.GpsUploadReq)
  int total_size = 0;

  if (has_longitude()) {
    // required double longitude = 1;
    total_size += 1 + 8;
  }

  if (has_latitude()) {
    // required double latitude = 2;
    total_size += 1 + 8;
  }

  if (has_address()) {
    // required string address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  return total_size;
}
int GpsUploadReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.GpsUploadReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double longitude = 1;
    total_size += 1 + 8;

    // required double latitude = 2;
    total_size += 1 + 8;

    // required string address = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsUploadReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.GpsUploadReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GpsUploadReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GpsUploadReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.GpsUploadReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.GpsUploadReq)
    MergeFrom(*source);
  }
}

void GpsUploadReq::MergeFrom(const GpsUploadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.GpsUploadReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_address()) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GpsUploadReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.GpsUploadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsUploadReq::CopyFrom(const GpsUploadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.GpsUploadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsUploadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GpsUploadReq::Swap(GpsUploadReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GpsUploadReq::InternalSwap(GpsUploadReq* other) {
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  address_.Swap(&other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GpsUploadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpsUploadReq_descriptor_;
  metadata.reflection = GpsUploadReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GpsUploadReq

// required double longitude = 1;
bool GpsUploadReq::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GpsUploadReq::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void GpsUploadReq::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void GpsUploadReq::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
 double GpsUploadReq::longitude() const {
  // @@protoc_insertion_point(field_get:msg_maj.GpsUploadReq.longitude)
  return longitude_;
}
 void GpsUploadReq::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.GpsUploadReq.longitude)
}

// required double latitude = 2;
bool GpsUploadReq::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GpsUploadReq::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void GpsUploadReq::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void GpsUploadReq::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
 double GpsUploadReq::latitude() const {
  // @@protoc_insertion_point(field_get:msg_maj.GpsUploadReq.latitude)
  return latitude_;
}
 void GpsUploadReq::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.GpsUploadReq.latitude)
}

// required string address = 3;
bool GpsUploadReq::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GpsUploadReq::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
void GpsUploadReq::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
void GpsUploadReq::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
 const ::std::string& GpsUploadReq::address() const {
  // @@protoc_insertion_point(field_get:msg_maj.GpsUploadReq.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GpsUploadReq::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.GpsUploadReq.address)
}
 void GpsUploadReq::set_address(const char* value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.GpsUploadReq.address)
}
 void GpsUploadReq::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.GpsUploadReq.address)
}
 ::std::string* GpsUploadReq::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:msg_maj.GpsUploadReq.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GpsUploadReq::release_address() {
  // @@protoc_insertion_point(field_release:msg_maj.GpsUploadReq.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GpsUploadReq::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.GpsUploadReq.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRoleReq::UpdateRoleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.UpdateRoleReq)
}

void UpdateRoleReq::InitAsDefaultInstance() {
}

UpdateRoleReq::UpdateRoleReq(const UpdateRoleReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.UpdateRoleReq)
}

void UpdateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRoleReq::~UpdateRoleReq() {
  // @@protoc_insertion_point(destructor:msg_maj.UpdateRoleReq)
  SharedDtor();
}

void UpdateRoleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRoleReq_descriptor_;
}

const UpdateRoleReq& UpdateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

UpdateRoleReq* UpdateRoleReq::default_instance_ = NULL;

UpdateRoleReq* UpdateRoleReq::New(::google::protobuf::Arena* arena) const {
  UpdateRoleReq* n = new UpdateRoleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.UpdateRoleReq)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.UpdateRoleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.UpdateRoleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.UpdateRoleReq)
  return false;
#undef DO_
}

void UpdateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.UpdateRoleReq)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.UpdateRoleReq)
}

::google::protobuf::uint8* UpdateRoleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.UpdateRoleReq)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.UpdateRoleReq)
  return target;
}

int UpdateRoleReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.UpdateRoleReq)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.UpdateRoleReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateRoleReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRoleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.UpdateRoleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.UpdateRoleReq)
    MergeFrom(*source);
  }
}

void UpdateRoleReq::MergeFrom(const UpdateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.UpdateRoleReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UpdateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.UpdateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoleReq::CopyFrom(const UpdateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.UpdateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleReq::IsInitialized() const {

  return true;
}

void UpdateRoleReq::Swap(UpdateRoleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateRoleReq::InternalSwap(UpdateRoleReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRoleReq_descriptor_;
  metadata.reflection = UpdateRoleReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateRoleReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRoleToWs::kUidFieldNumber;
const int SyncRoleToWs::kRoomIdFieldNumber;
const int SyncRoleToWs::kRoomSeatFieldNumber;
const int SyncRoleToWs::kRoomCardFieldNumber;
const int SyncRoleToWs::kDisconnectFieldNumber;
const int SyncRoleToWs::kRobotPlayingFieldNumber;
const int SyncRoleToWs::kHisConGamesFieldNumber;
const int SyncRoleToWs::kHisMaxScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRoleToWs::SyncRoleToWs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SyncRoleToWs)
}

void SyncRoleToWs::InitAsDefaultInstance() {
}

SyncRoleToWs::SyncRoleToWs(const SyncRoleToWs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SyncRoleToWs)
}

void SyncRoleToWs::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  room_id_ = GOOGLE_ULONGLONG(0);
  room_seat_ = 0u;
  room_card_ = 0u;
  disconnect_ = false;
  robotplaying_ = false;
  hiscongames_ = 0u;
  hismaxscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRoleToWs::~SyncRoleToWs() {
  // @@protoc_insertion_point(destructor:msg_maj.SyncRoleToWs)
  SharedDtor();
}

void SyncRoleToWs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRoleToWs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRoleToWs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRoleToWs_descriptor_;
}

const SyncRoleToWs& SyncRoleToWs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

SyncRoleToWs* SyncRoleToWs::default_instance_ = NULL;

SyncRoleToWs* SyncRoleToWs::New(::google::protobuf::Arena* arena) const {
  SyncRoleToWs* n = new SyncRoleToWs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRoleToWs::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SyncRoleToWs)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SyncRoleToWs, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SyncRoleToWs*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(uid_, hismaxscore_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SyncRoleToWs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SyncRoleToWs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint64 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_seat;
        break;
      }

      // required uint32 room_seat = 3;
      case 3: {
        if (tag == 24) {
         parse_room_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_seat_)));
          set_has_room_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_room_card;
        break;
      }

      // required uint32 room_card = 4;
      case 4: {
        if (tag == 32) {
         parse_room_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_card_)));
          set_has_room_card();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_disconnect;
        break;
      }

      // required bool disconnect = 5;
      case 5: {
        if (tag == 40) {
         parse_disconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disconnect_)));
          set_has_disconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_robotPlaying;
        break;
      }

      // required bool robotPlaying = 6;
      case 6: {
        if (tag == 48) {
         parse_robotPlaying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &robotplaying_)));
          set_has_robotplaying();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hisConGames;
        break;
      }

      // required uint32 hisConGames = 7;
      case 7: {
        if (tag == 56) {
         parse_hisConGames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hiscongames_)));
          set_has_hiscongames();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hisMaxScore;
        break;
      }

      // required uint32 hisMaxScore = 8;
      case 8: {
        if (tag == 64) {
         parse_hisMaxScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hismaxscore_)));
          set_has_hismaxscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SyncRoleToWs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SyncRoleToWs)
  return false;
#undef DO_
}

void SyncRoleToWs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SyncRoleToWs)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required uint64 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  // required uint32 room_seat = 3;
  if (has_room_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_seat(), output);
  }

  // required uint32 room_card = 4;
  if (has_room_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->room_card(), output);
  }

  // required bool disconnect = 5;
  if (has_disconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->disconnect(), output);
  }

  // required bool robotPlaying = 6;
  if (has_robotplaying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->robotplaying(), output);
  }

  // required uint32 hisConGames = 7;
  if (has_hiscongames()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hiscongames(), output);
  }

  // required uint32 hisMaxScore = 8;
  if (has_hismaxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hismaxscore(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SyncRoleToWs)
}

::google::protobuf::uint8* SyncRoleToWs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SyncRoleToWs)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required uint64 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  // required uint32 room_seat = 3;
  if (has_room_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_seat(), target);
  }

  // required uint32 room_card = 4;
  if (has_room_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->room_card(), target);
  }

  // required bool disconnect = 5;
  if (has_disconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->disconnect(), target);
  }

  // required bool robotPlaying = 6;
  if (has_robotplaying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->robotplaying(), target);
  }

  // required uint32 hisConGames = 7;
  if (has_hiscongames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hiscongames(), target);
  }

  // required uint32 hisMaxScore = 8;
  if (has_hismaxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hismaxscore(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SyncRoleToWs)
  return target;
}

int SyncRoleToWs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.SyncRoleToWs)
  int total_size = 0;

  if (has_uid()) {
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_room_id()) {
    // required uint64 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  if (has_room_seat()) {
    // required uint32 room_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_seat());
  }

  if (has_room_card()) {
    // required uint32 room_card = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_card());
  }

  if (has_disconnect()) {
    // required bool disconnect = 5;
    total_size += 1 + 1;
  }

  if (has_robotplaying()) {
    // required bool robotPlaying = 6;
    total_size += 1 + 1;
  }

  if (has_hiscongames()) {
    // required uint32 hisConGames = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hiscongames());
  }

  if (has_hismaxscore()) {
    // required uint32 hisMaxScore = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hismaxscore());
  }

  return total_size;
}
int SyncRoleToWs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SyncRoleToWs)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required uint64 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());

    // required uint32 room_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_seat());

    // required uint32 room_card = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_card());

    // required bool disconnect = 5;
    total_size += 1 + 1;

    // required bool robotPlaying = 6;
    total_size += 1 + 1;

    // required uint32 hisConGames = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hiscongames());

    // required uint32 hisMaxScore = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hismaxscore());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRoleToWs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SyncRoleToWs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SyncRoleToWs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRoleToWs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SyncRoleToWs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SyncRoleToWs)
    MergeFrom(*source);
  }
}

void SyncRoleToWs::MergeFrom(const SyncRoleToWs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SyncRoleToWs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_seat()) {
      set_room_seat(from.room_seat());
    }
    if (from.has_room_card()) {
      set_room_card(from.room_card());
    }
    if (from.has_disconnect()) {
      set_disconnect(from.disconnect());
    }
    if (from.has_robotplaying()) {
      set_robotplaying(from.robotplaying());
    }
    if (from.has_hiscongames()) {
      set_hiscongames(from.hiscongames());
    }
    if (from.has_hismaxscore()) {
      set_hismaxscore(from.hismaxscore());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SyncRoleToWs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SyncRoleToWs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRoleToWs::CopyFrom(const SyncRoleToWs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SyncRoleToWs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRoleToWs::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SyncRoleToWs::Swap(SyncRoleToWs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRoleToWs::InternalSwap(SyncRoleToWs* other) {
  std::swap(uid_, other->uid_);
  std::swap(room_id_, other->room_id_);
  std::swap(room_seat_, other->room_seat_);
  std::swap(room_card_, other->room_card_);
  std::swap(disconnect_, other->disconnect_);
  std::swap(robotplaying_, other->robotplaying_);
  std::swap(hiscongames_, other->hiscongames_);
  std::swap(hismaxscore_, other->hismaxscore_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRoleToWs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRoleToWs_descriptor_;
  metadata.reflection = SyncRoleToWs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRoleToWs

// required uint64 uid = 1;
bool SyncRoleToWs::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SyncRoleToWs::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void SyncRoleToWs::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SyncRoleToWs::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 SyncRoleToWs::uid() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.uid)
  return uid_;
}
 void SyncRoleToWs::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.uid)
}

// required uint64 room_id = 2;
bool SyncRoleToWs::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SyncRoleToWs::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SyncRoleToWs::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SyncRoleToWs::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
  clear_has_room_id();
}
 ::google::protobuf::uint64 SyncRoleToWs::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.room_id)
  return room_id_;
}
 void SyncRoleToWs::set_room_id(::google::protobuf::uint64 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.room_id)
}

// required uint32 room_seat = 3;
bool SyncRoleToWs::has_room_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SyncRoleToWs::set_has_room_seat() {
  _has_bits_[0] |= 0x00000004u;
}
void SyncRoleToWs::clear_has_room_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
void SyncRoleToWs::clear_room_seat() {
  room_seat_ = 0u;
  clear_has_room_seat();
}
 ::google::protobuf::uint32 SyncRoleToWs::room_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.room_seat)
  return room_seat_;
}
 void SyncRoleToWs::set_room_seat(::google::protobuf::uint32 value) {
  set_has_room_seat();
  room_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.room_seat)
}

// required uint32 room_card = 4;
bool SyncRoleToWs::has_room_card() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SyncRoleToWs::set_has_room_card() {
  _has_bits_[0] |= 0x00000008u;
}
void SyncRoleToWs::clear_has_room_card() {
  _has_bits_[0] &= ~0x00000008u;
}
void SyncRoleToWs::clear_room_card() {
  room_card_ = 0u;
  clear_has_room_card();
}
 ::google::protobuf::uint32 SyncRoleToWs::room_card() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.room_card)
  return room_card_;
}
 void SyncRoleToWs::set_room_card(::google::protobuf::uint32 value) {
  set_has_room_card();
  room_card_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.room_card)
}

// required bool disconnect = 5;
bool SyncRoleToWs::has_disconnect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SyncRoleToWs::set_has_disconnect() {
  _has_bits_[0] |= 0x00000010u;
}
void SyncRoleToWs::clear_has_disconnect() {
  _has_bits_[0] &= ~0x00000010u;
}
void SyncRoleToWs::clear_disconnect() {
  disconnect_ = false;
  clear_has_disconnect();
}
 bool SyncRoleToWs::disconnect() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.disconnect)
  return disconnect_;
}
 void SyncRoleToWs::set_disconnect(bool value) {
  set_has_disconnect();
  disconnect_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.disconnect)
}

// required bool robotPlaying = 6;
bool SyncRoleToWs::has_robotplaying() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SyncRoleToWs::set_has_robotplaying() {
  _has_bits_[0] |= 0x00000020u;
}
void SyncRoleToWs::clear_has_robotplaying() {
  _has_bits_[0] &= ~0x00000020u;
}
void SyncRoleToWs::clear_robotplaying() {
  robotplaying_ = false;
  clear_has_robotplaying();
}
 bool SyncRoleToWs::robotplaying() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.robotPlaying)
  return robotplaying_;
}
 void SyncRoleToWs::set_robotplaying(bool value) {
  set_has_robotplaying();
  robotplaying_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.robotPlaying)
}

// required uint32 hisConGames = 7;
bool SyncRoleToWs::has_hiscongames() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SyncRoleToWs::set_has_hiscongames() {
  _has_bits_[0] |= 0x00000040u;
}
void SyncRoleToWs::clear_has_hiscongames() {
  _has_bits_[0] &= ~0x00000040u;
}
void SyncRoleToWs::clear_hiscongames() {
  hiscongames_ = 0u;
  clear_has_hiscongames();
}
 ::google::protobuf::uint32 SyncRoleToWs::hiscongames() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.hisConGames)
  return hiscongames_;
}
 void SyncRoleToWs::set_hiscongames(::google::protobuf::uint32 value) {
  set_has_hiscongames();
  hiscongames_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.hisConGames)
}

// required uint32 hisMaxScore = 8;
bool SyncRoleToWs::has_hismaxscore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SyncRoleToWs::set_has_hismaxscore() {
  _has_bits_[0] |= 0x00000080u;
}
void SyncRoleToWs::clear_has_hismaxscore() {
  _has_bits_[0] &= ~0x00000080u;
}
void SyncRoleToWs::clear_hismaxscore() {
  hismaxscore_ = 0u;
  clear_has_hismaxscore();
}
 ::google::protobuf::uint32 SyncRoleToWs::hismaxscore() const {
  // @@protoc_insertion_point(field_get:msg_maj.SyncRoleToWs.hisMaxScore)
  return hismaxscore_;
}
 void SyncRoleToWs::set_hismaxscore(::google::protobuf::uint32 value) {
  set_has_hismaxscore();
  hismaxscore_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SyncRoleToWs.hisMaxScore)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CardinfoReq::kDoTypeFieldNumber;
const int CardinfoReq::kReadnameFieldNumber;
const int CardinfoReq::kReadcardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CardinfoReq::CardinfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.CardinfoReq)
}

void CardinfoReq::InitAsDefaultInstance() {
}

CardinfoReq::CardinfoReq(const CardinfoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.CardinfoReq)
}

void CardinfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  do_type_ = 0u;
  readname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardinfoReq::~CardinfoReq() {
  // @@protoc_insertion_point(destructor:msg_maj.CardinfoReq)
  SharedDtor();
}

void CardinfoReq::SharedDtor() {
  readname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readcard_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CardinfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardinfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardinfoReq_descriptor_;
}

const CardinfoReq& CardinfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

CardinfoReq* CardinfoReq::default_instance_ = NULL;

CardinfoReq* CardinfoReq::New(::google::protobuf::Arena* arena) const {
  CardinfoReq* n = new CardinfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CardinfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.CardinfoReq)
  if (_has_bits_[0 / 32] & 7u) {
    do_type_ = 0u;
    if (has_readname()) {
      readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_readcard()) {
      readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CardinfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.CardinfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 do_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do_type_)));
          set_has_do_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_readname;
        break;
      }

      // optional string readname = 2;
      case 2: {
        if (tag == 18) {
         parse_readname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readname().data(), this->readname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.CardinfoReq.readname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_readcard;
        break;
      }

      // optional string readcard = 3;
      case 3: {
        if (tag == 26) {
         parse_readcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->readcard().data(), this->readcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.CardinfoReq.readcard");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.CardinfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.CardinfoReq)
  return false;
#undef DO_
}

void CardinfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.CardinfoReq)
  // optional uint32 do_type = 1;
  if (has_do_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->do_type(), output);
  }

  // optional string readname = 2;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.CardinfoReq.readname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->readname(), output);
  }

  // optional string readcard = 3;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.CardinfoReq.readcard");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->readcard(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.CardinfoReq)
}

::google::protobuf::uint8* CardinfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.CardinfoReq)
  // optional uint32 do_type = 1;
  if (has_do_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->do_type(), target);
  }

  // optional string readname = 2;
  if (has_readname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readname().data(), this->readname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.CardinfoReq.readname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->readname(), target);
  }

  // optional string readcard = 3;
  if (has_readcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->readcard().data(), this->readcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.CardinfoReq.readcard");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->readcard(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.CardinfoReq)
  return target;
}

int CardinfoReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.CardinfoReq)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 do_type = 1;
    if (has_do_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->do_type());
    }

    // optional string readname = 2;
    if (has_readname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readname());
    }

    // optional string readcard = 3;
    if (has_readcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readcard());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardinfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.CardinfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CardinfoReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CardinfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.CardinfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.CardinfoReq)
    MergeFrom(*source);
  }
}

void CardinfoReq::MergeFrom(const CardinfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.CardinfoReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_type()) {
      set_do_type(from.do_type());
    }
    if (from.has_readname()) {
      set_has_readname();
      readname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readname_);
    }
    if (from.has_readcard()) {
      set_has_readcard();
      readcard_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.readcard_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CardinfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.CardinfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardinfoReq::CopyFrom(const CardinfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.CardinfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardinfoReq::IsInitialized() const {

  return true;
}

void CardinfoReq::Swap(CardinfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CardinfoReq::InternalSwap(CardinfoReq* other) {
  std::swap(do_type_, other->do_type_);
  readname_.Swap(&other->readname_);
  readcard_.Swap(&other->readcard_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CardinfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardinfoReq_descriptor_;
  metadata.reflection = CardinfoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CardinfoReq

// optional uint32 do_type = 1;
bool CardinfoReq::has_do_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CardinfoReq::set_has_do_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CardinfoReq::clear_has_do_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CardinfoReq::clear_do_type() {
  do_type_ = 0u;
  clear_has_do_type();
}
 ::google::protobuf::uint32 CardinfoReq::do_type() const {
  // @@protoc_insertion_point(field_get:msg_maj.CardinfoReq.do_type)
  return do_type_;
}
 void CardinfoReq::set_do_type(::google::protobuf::uint32 value) {
  set_has_do_type();
  do_type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.CardinfoReq.do_type)
}

// optional string readname = 2;
bool CardinfoReq::has_readname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CardinfoReq::set_has_readname() {
  _has_bits_[0] |= 0x00000002u;
}
void CardinfoReq::clear_has_readname() {
  _has_bits_[0] &= ~0x00000002u;
}
void CardinfoReq::clear_readname() {
  readname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readname();
}
 const ::std::string& CardinfoReq::readname() const {
  // @@protoc_insertion_point(field_get:msg_maj.CardinfoReq.readname)
  return readname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CardinfoReq::set_readname(const ::std::string& value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.CardinfoReq.readname)
}
 void CardinfoReq::set_readname(const char* value) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.CardinfoReq.readname)
}
 void CardinfoReq::set_readname(const char* value, size_t size) {
  set_has_readname();
  readname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.CardinfoReq.readname)
}
 ::std::string* CardinfoReq::mutable_readname() {
  set_has_readname();
  // @@protoc_insertion_point(field_mutable:msg_maj.CardinfoReq.readname)
  return readname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CardinfoReq::release_readname() {
  // @@protoc_insertion_point(field_release:msg_maj.CardinfoReq.readname)
  clear_has_readname();
  return readname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CardinfoReq::set_allocated_readname(::std::string* readname) {
  if (readname != NULL) {
    set_has_readname();
  } else {
    clear_has_readname();
  }
  readname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.CardinfoReq.readname)
}

// optional string readcard = 3;
bool CardinfoReq::has_readcard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CardinfoReq::set_has_readcard() {
  _has_bits_[0] |= 0x00000004u;
}
void CardinfoReq::clear_has_readcard() {
  _has_bits_[0] &= ~0x00000004u;
}
void CardinfoReq::clear_readcard() {
  readcard_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_readcard();
}
 const ::std::string& CardinfoReq::readcard() const {
  // @@protoc_insertion_point(field_get:msg_maj.CardinfoReq.readcard)
  return readcard_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CardinfoReq::set_readcard(const ::std::string& value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.CardinfoReq.readcard)
}
 void CardinfoReq::set_readcard(const char* value) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.CardinfoReq.readcard)
}
 void CardinfoReq::set_readcard(const char* value, size_t size) {
  set_has_readcard();
  readcard_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.CardinfoReq.readcard)
}
 ::std::string* CardinfoReq::mutable_readcard() {
  set_has_readcard();
  // @@protoc_insertion_point(field_mutable:msg_maj.CardinfoReq.readcard)
  return readcard_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CardinfoReq::release_readcard() {
  // @@protoc_insertion_point(field_release:msg_maj.CardinfoReq.readcard)
  clear_has_readcard();
  return readcard_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CardinfoReq::set_allocated_readcard(::std::string* readcard) {
  if (readcard != NULL) {
    set_has_readcard();
  } else {
    clear_has_readcard();
  }
  readcard_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), readcard);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.CardinfoReq.readcard)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyLoseGame::kLevelFieldNumber;
const int NotifyLoseGame::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyLoseGame::NotifyLoseGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.NotifyLoseGame)
}

void NotifyLoseGame::InitAsDefaultInstance() {
}

NotifyLoseGame::NotifyLoseGame(const NotifyLoseGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.NotifyLoseGame)
}

void NotifyLoseGame::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoseGame::~NotifyLoseGame() {
  // @@protoc_insertion_point(destructor:msg_maj.NotifyLoseGame)
  SharedDtor();
}

void NotifyLoseGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLoseGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLoseGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLoseGame_descriptor_;
}

const NotifyLoseGame& NotifyLoseGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5frole_2eproto();
  return *default_instance_;
}

NotifyLoseGame* NotifyLoseGame::default_instance_ = NULL;

NotifyLoseGame* NotifyLoseGame::New(::google::protobuf::Arena* arena) const {
  NotifyLoseGame* n = new NotifyLoseGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyLoseGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.NotifyLoseGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NotifyLoseGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NotifyLoseGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(level_, time_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotifyLoseGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.NotifyLoseGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.NotifyLoseGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.NotifyLoseGame)
  return false;
#undef DO_
}

void NotifyLoseGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.NotifyLoseGame)
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.NotifyLoseGame)
}

::google::protobuf::uint8* NotifyLoseGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.NotifyLoseGame)
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.NotifyLoseGame)
  return target;
}

int NotifyLoseGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.NotifyLoseGame)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoseGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.NotifyLoseGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NotifyLoseGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyLoseGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.NotifyLoseGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.NotifyLoseGame)
    MergeFrom(*source);
  }
}

void NotifyLoseGame::MergeFrom(const NotifyLoseGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.NotifyLoseGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NotifyLoseGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.NotifyLoseGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLoseGame::CopyFrom(const NotifyLoseGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.NotifyLoseGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoseGame::IsInitialized() const {

  return true;
}

void NotifyLoseGame::Swap(NotifyLoseGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyLoseGame::InternalSwap(NotifyLoseGame* other) {
  std::swap(level_, other->level_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyLoseGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLoseGame_descriptor_;
  metadata.reflection = NotifyLoseGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyLoseGame

// optional uint32 level = 1;
bool NotifyLoseGame::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NotifyLoseGame::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void NotifyLoseGame::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void NotifyLoseGame::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 NotifyLoseGame::level() const {
  // @@protoc_insertion_point(field_get:msg_maj.NotifyLoseGame.level)
  return level_;
}
 void NotifyLoseGame::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.NotifyLoseGame.level)
}

// optional uint32 time = 2;
bool NotifyLoseGame::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NotifyLoseGame::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void NotifyLoseGame::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void NotifyLoseGame::clear_time() {
  time_ = 0u;
  clear_has_time();
}
 ::google::protobuf::uint32 NotifyLoseGame::time() const {
  // @@protoc_insertion_point(field_get:msg_maj.NotifyLoseGame.time)
  return time_;
}
 void NotifyLoseGame::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.NotifyLoseGame.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_maj

// @@protoc_insertion_point(global_scope)
