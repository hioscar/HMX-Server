// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_maj {

namespace {

const ::google::protobuf::Descriptor* LoginWeixinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginWeixinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginAccountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAccountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KictoutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KictoutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginPlayerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginPlayerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDKTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDKTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SDKTokenResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SDKTokenResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAnotherLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAnotherLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPlayerExit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPlayerExit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSceneResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSceneResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_cmd_login_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* login_code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5flogin_2eproto() {
  protobuf_AddDesc_msg_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_login.proto");
  GOOGLE_CHECK(file != NULL);
  LoginWeixinReq_descriptor_ = file->message_type(0);
  static const int LoginWeixinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginWeixinReq, token_),
  };
  LoginWeixinReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginWeixinReq_descriptor_,
      LoginWeixinReq::default_instance_,
      LoginWeixinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginWeixinReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginWeixinReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginWeixinReq, _internal_metadata_),
      -1);
  LoginResp_descriptor_ = file->message_type(1);
  static const int LoginResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, port_),
  };
  LoginResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResp_descriptor_,
      LoginResp::default_instance_,
      LoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _internal_metadata_),
      -1);
  LoginAccountReq_descriptor_ = file->message_type(2);
  static const int LoginAccountReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountReq, password_),
  };
  LoginAccountReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginAccountReq_descriptor_,
      LoginAccountReq::default_instance_,
      LoginAccountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginAccountReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAccountReq, _internal_metadata_),
      -1);
  KictoutResp_descriptor_ = file->message_type(3);
  static const int KictoutResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KictoutResp, code_),
  };
  KictoutResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KictoutResp_descriptor_,
      KictoutResp::default_instance_,
      KictoutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KictoutResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(KictoutResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KictoutResp, _internal_metadata_),
      -1);
  LogoutReq_descriptor_ = file->message_type(4);
  static const int LogoutReq_offsets_[1] = {
  };
  LogoutReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutReq_descriptor_,
      LogoutReq::default_instance_,
      LogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LogoutReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _internal_metadata_),
      -1);
  LoginPlayerReq_descriptor_ = file->message_type(5);
  static const int LoginPlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerReq, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerReq, serverid_),
  };
  LoginPlayerReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginPlayerReq_descriptor_,
      LoginPlayerReq::default_instance_,
      LoginPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginPlayerReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerReq, _internal_metadata_),
      -1);
  LoginPlayerResp_descriptor_ = file->message_type(6);
  static const int LoginPlayerResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, is_reconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, srv_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, is_free_),
  };
  LoginPlayerResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginPlayerResp_descriptor_,
      LoginPlayerResp::default_instance_,
      LoginPlayerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginPlayerResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginPlayerResp, _internal_metadata_),
      -1);
  SDKTokenReq_descriptor_ = file->message_type(7);
  static const int SDKTokenReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenReq, token_),
  };
  SDKTokenReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SDKTokenReq_descriptor_,
      SDKTokenReq::default_instance_,
      SDKTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(SDKTokenReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenReq, _internal_metadata_),
      -1);
  SDKTokenResp_descriptor_ = file->message_type(8);
  static const int SDKTokenResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, icon_add_),
  };
  SDKTokenResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SDKTokenResp_descriptor_,
      SDKTokenResp::default_instance_,
      SDKTokenResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(SDKTokenResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SDKTokenResp, _internal_metadata_),
      -1);
  NotifyAnotherLogin_descriptor_ = file->message_type(9);
  static const int NotifyAnotherLogin_offsets_[1] = {
  };
  NotifyAnotherLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyAnotherLogin_descriptor_,
      NotifyAnotherLogin::default_instance_,
      NotifyAnotherLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAnotherLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(NotifyAnotherLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAnotherLogin, _internal_metadata_),
      -1);
  NotifyPlayerExit_descriptor_ = file->message_type(10);
  static const int NotifyPlayerExit_offsets_[1] = {
  };
  NotifyPlayerExit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyPlayerExit_descriptor_,
      NotifyPlayerExit::default_instance_,
      NotifyPlayerExit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerExit, _has_bits_[0]),
      -1,
      -1,
      sizeof(NotifyPlayerExit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPlayerExit, _internal_metadata_),
      -1);
  ChangeSceneReq_descriptor_ = file->message_type(11);
  static const int ChangeSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneReq, scene_id_),
  };
  ChangeSceneReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeSceneReq_descriptor_,
      ChangeSceneReq::default_instance_,
      ChangeSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeSceneReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneReq, _internal_metadata_),
      -1);
  ChangeSceneResp_descriptor_ = file->message_type(12);
  static const int ChangeSceneResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResp, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResp, result_),
  };
  ChangeSceneResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangeSceneResp_descriptor_,
      ChangeSceneResp::default_instance_,
      ChangeSceneResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChangeSceneResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSceneResp, _internal_metadata_),
      -1);
  c_cmd_login_descriptor_ = file->enum_type(0);
  login_code_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginWeixinReq_descriptor_, &LoginWeixinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResp_descriptor_, &LoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginAccountReq_descriptor_, &LoginAccountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KictoutResp_descriptor_, &KictoutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutReq_descriptor_, &LogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginPlayerReq_descriptor_, &LoginPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginPlayerResp_descriptor_, &LoginPlayerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SDKTokenReq_descriptor_, &SDKTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SDKTokenResp_descriptor_, &SDKTokenResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyAnotherLogin_descriptor_, &NotifyAnotherLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyPlayerExit_descriptor_, &NotifyPlayerExit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeSceneReq_descriptor_, &ChangeSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangeSceneResp_descriptor_, &ChangeSceneResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5flogin_2eproto() {
  delete LoginWeixinReq::default_instance_;
  delete LoginWeixinReq_reflection_;
  delete LoginResp::default_instance_;
  delete LoginResp_reflection_;
  delete LoginAccountReq::default_instance_;
  delete LoginAccountReq_reflection_;
  delete KictoutResp::default_instance_;
  delete KictoutResp_reflection_;
  delete LogoutReq::default_instance_;
  delete LogoutReq_reflection_;
  delete LoginPlayerReq::default_instance_;
  delete LoginPlayerReq_reflection_;
  delete LoginPlayerResp::default_instance_;
  delete LoginPlayerResp_reflection_;
  delete SDKTokenReq::default_instance_;
  delete SDKTokenReq_reflection_;
  delete SDKTokenResp::default_instance_;
  delete SDKTokenResp_reflection_;
  delete NotifyAnotherLogin::default_instance_;
  delete NotifyAnotherLogin_reflection_;
  delete NotifyPlayerExit::default_instance_;
  delete NotifyPlayerExit_reflection_;
  delete ChangeSceneReq::default_instance_;
  delete ChangeSceneReq_reflection_;
  delete ChangeSceneResp::default_instance_;
  delete ChangeSceneResp_reflection_;
}

void protobuf_AddDesc_msg_5flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::msg_maj::protobuf_AddDesc_msg_5frole_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_login.proto\022\007msg_maj\032\016msg_role.pro"
    "to\"\037\n\016LoginWeixinReq\022\r\n\005token\030\002 \002(\t\"H\n\tL"
    "oginResp\022!\n\004code\030\001 \002(\0162\023.msg_maj.login_c"
    "ode\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\"4\n\017LoginAc"
    "countReq\022\017\n\007account\030\001 \002(\t\022\020\n\010password\030\002 "
    "\002(\t\"0\n\013KictoutResp\022!\n\004code\030\001 \002(\0162\023.msg_m"
    "aj.login_code\"\013\n\tLogoutReq\"3\n\016LoginPlaye"
    "rReq\022\017\n\007account\030\001 \001(\t\022\020\n\010serverid\030\002 \001(\r\""
    "\212\001\n\017LoginPlayerResp\022!\n\004code\030\001 \002(\0162\023.msg_"
    "maj.login_code\022\024\n\014is_reconnect\030\002 \001(\010\022\033\n\004"
    "role\030\003 \001(\0132\r.msg_maj.Role\022\020\n\010srv_time\030\004 "
    "\001(\004\022\017\n\007is_free\030\005 \001(\010\"\034\n\013SDKTokenReq\022\r\n\005t"
    "oken\030\001 \001(\t\"[\n\014SDKTokenResp\022\016\n\006result\030\001 \001"
    "(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\017\n\007account\030"
    "\004 \001(\t\022\020\n\010icon_add\030\005 \001(\t\"\024\n\022NotifyAnother"
    "Login\"\022\n\020NotifyPlayerExit\"\"\n\016ChangeScene"
    "Req\022\020\n\010scene_id\030\001 \001(\005\"3\n\017ChangeSceneResp"
    "\022\020\n\010scene_id\030\001 \001(\005\022\016\n\006result\030\002 \001(\005*\336\002\n\013c"
    "_cmd_login\022\024\n\020login_weixin_req\020\001\022\016\n\nlogi"
    "n_resp\020\002\022\025\n\021login_account_req\020\003\022\030\n\024prelo"
    "gin_account_req\020\004\022\031\n\025prelogin_account_re"
    "sp\020\005\022\020\n\014kictout_resp\020\006\022\016\n\nlogout_req\020\007\022\024"
    "\n\020login_player_req\020\010\022\025\n\021login_player_res"
    "p\020\t\022\021\n\rsdk_token_req\020\n\022\022\n\016sdk_token_resp"
    "\020\013\022\030\n\024notify_another_login\020\014\022\027\n\023notify_d"
    "is_conntion\020\r\022\024\n\020change_scene_req\020\016\022\025\n\021c"
    "hange_scene_resp\020\017\022\007\n\003max\020\024*\222\003\n\nlogin_co"
    "de\022\013\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002\022\017\n\013ERR_ACCOUNT"
    "\020\003\022\021\n\rTOKEN_TIMEOUT\020\004\022\017\n\013TOKEN_ERROR\020\005\022\017"
    "\n\013OTHER_LOGIN\020\006\022\021\n\rFORCE_KICTOUT\020\007\022\022\n\016DA"
    "TA_EXCEPTION\020\010\022\026\n\022PLAT_JOSNSTR_ERROR\020\t\022\023"
    "\n\017PLAT_CHECK_FAIL\020\n\022\026\n\022PLAT_ARG_NOTENOUG"
    "H\020\013\022\020\n\014MYSQL_ISNULL\020\014\022\r\n\tSQL_ERROR\020\r\022\020\n\014"
    "PLAT_UNNKOWN\020\016\022\023\n\017SCENE_NOT_FOUND\020\017\022\022\n\016W"
    "SUSER_IS_NULL\020\020\022\032\n\026PROXY_ACCESS_NOT_LOGI"
    "N\020\021\022\023\n\017NOT_BING_SERVER\020\022\022\024\n\020PLAT_REQ_TIM"
    "EOUT\020\023\022\030\n\024SERVER_IS_BREPAIRING\020\024", 1472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_login.proto", &protobuf_RegisterTypes);
  LoginWeixinReq::default_instance_ = new LoginWeixinReq();
  LoginResp::default_instance_ = new LoginResp();
  LoginAccountReq::default_instance_ = new LoginAccountReq();
  KictoutResp::default_instance_ = new KictoutResp();
  LogoutReq::default_instance_ = new LogoutReq();
  LoginPlayerReq::default_instance_ = new LoginPlayerReq();
  LoginPlayerResp::default_instance_ = new LoginPlayerResp();
  SDKTokenReq::default_instance_ = new SDKTokenReq();
  SDKTokenResp::default_instance_ = new SDKTokenResp();
  NotifyAnotherLogin::default_instance_ = new NotifyAnotherLogin();
  NotifyPlayerExit::default_instance_ = new NotifyPlayerExit();
  ChangeSceneReq::default_instance_ = new ChangeSceneReq();
  ChangeSceneResp::default_instance_ = new ChangeSceneResp();
  LoginWeixinReq::default_instance_->InitAsDefaultInstance();
  LoginResp::default_instance_->InitAsDefaultInstance();
  LoginAccountReq::default_instance_->InitAsDefaultInstance();
  KictoutResp::default_instance_->InitAsDefaultInstance();
  LogoutReq::default_instance_->InitAsDefaultInstance();
  LoginPlayerReq::default_instance_->InitAsDefaultInstance();
  LoginPlayerResp::default_instance_->InitAsDefaultInstance();
  SDKTokenReq::default_instance_->InitAsDefaultInstance();
  SDKTokenResp::default_instance_->InitAsDefaultInstance();
  NotifyAnotherLogin::default_instance_->InitAsDefaultInstance();
  NotifyPlayerExit::default_instance_->InitAsDefaultInstance();
  ChangeSceneReq::default_instance_->InitAsDefaultInstance();
  ChangeSceneResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5flogin_2eproto {
  StaticDescriptorInitializer_msg_5flogin_2eproto() {
    protobuf_AddDesc_msg_5flogin_2eproto();
  }
} static_descriptor_initializer_msg_5flogin_2eproto_;
const ::google::protobuf::EnumDescriptor* c_cmd_login_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_cmd_login_descriptor_;
}
bool c_cmd_login_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* login_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_code_descriptor_;
}
bool login_code_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginWeixinReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginWeixinReq::LoginWeixinReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginWeixinReq)
}

void LoginWeixinReq::InitAsDefaultInstance() {
}

LoginWeixinReq::LoginWeixinReq(const LoginWeixinReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginWeixinReq)
}

void LoginWeixinReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginWeixinReq::~LoginWeixinReq() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginWeixinReq)
  SharedDtor();
}

void LoginWeixinReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginWeixinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginWeixinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginWeixinReq_descriptor_;
}

const LoginWeixinReq& LoginWeixinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LoginWeixinReq* LoginWeixinReq::default_instance_ = NULL;

LoginWeixinReq* LoginWeixinReq::New(::google::protobuf::Arena* arena) const {
  LoginWeixinReq* n = new LoginWeixinReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginWeixinReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginWeixinReq)
  if (has_token()) {
    token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginWeixinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginWeixinReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginWeixinReq.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginWeixinReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginWeixinReq)
  return false;
#undef DO_
}

void LoginWeixinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginWeixinReq)
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginWeixinReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginWeixinReq)
}

::google::protobuf::uint8* LoginWeixinReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginWeixinReq)
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginWeixinReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginWeixinReq)
  return target;
}

int LoginWeixinReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginWeixinReq)
  int total_size = 0;

  // required string token = 2;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginWeixinReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginWeixinReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginWeixinReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginWeixinReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginWeixinReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginWeixinReq)
    MergeFrom(*source);
  }
}

void LoginWeixinReq::MergeFrom(const LoginWeixinReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginWeixinReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginWeixinReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginWeixinReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginWeixinReq::CopyFrom(const LoginWeixinReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginWeixinReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginWeixinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginWeixinReq::Swap(LoginWeixinReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginWeixinReq::InternalSwap(LoginWeixinReq* other) {
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginWeixinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginWeixinReq_descriptor_;
  metadata.reflection = LoginWeixinReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginWeixinReq

// required string token = 2;
bool LoginWeixinReq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginWeixinReq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginWeixinReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginWeixinReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& LoginWeixinReq::token() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginWeixinReq.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginWeixinReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginWeixinReq.token)
}
 void LoginWeixinReq::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginWeixinReq.token)
}
 void LoginWeixinReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginWeixinReq.token)
}
 ::std::string* LoginWeixinReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginWeixinReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginWeixinReq::release_token() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginWeixinReq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginWeixinReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginWeixinReq.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResp::kCodeFieldNumber;
const int LoginResp::kIpFieldNumber;
const int LoginResp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResp::LoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginResp)
}

void LoginResp::InitAsDefaultInstance() {
}

LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginResp)
}

void LoginResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 1;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResp::~LoginResp() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginResp)
  SharedDtor();
}

void LoginResp::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResp_descriptor_;
}

const LoginResp& LoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LoginResp* LoginResp::default_instance_ = NULL;

LoginResp* LoginResp::New(::google::protobuf::Arena* arena) const {
  LoginResp* n = new LoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginResp)
  if (_has_bits_[0 / 32] & 7u) {
    code_ = 1;
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.login_code code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::login_code_IsValid(value)) {
            set_code(static_cast< ::msg_maj::login_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginResp.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginResp)
  return false;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginResp.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginResp)
}

::google::protobuf::uint8* LoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginResp.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginResp)
  return target;
}

int LoginResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginResp)
  int total_size = 0;

  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginResp)
    MergeFrom(*source);
  }
}

void LoginResp::MergeFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResp::CopyFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResp::InternalSwap(LoginResp* other) {
  std::swap(code_, other->code_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResp_descriptor_;
  metadata.reflection = LoginResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResp

// required .msg_maj.login_code code = 1;
bool LoginResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResp::clear_code() {
  code_ = 1;
  clear_has_code();
}
 ::msg_maj::login_code LoginResp::code() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginResp.code)
  return static_cast< ::msg_maj::login_code >(code_);
}
 void LoginResp::set_code(::msg_maj::login_code value) {
  assert(::msg_maj::login_code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginResp.code)
}

// optional string ip = 2;
bool LoginResp::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResp::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResp::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& LoginResp::ip() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginResp.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResp::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginResp.ip)
}
 void LoginResp::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginResp.ip)
}
 void LoginResp::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginResp.ip)
}
 ::std::string* LoginResp::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginResp.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginResp::release_ip() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginResp.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginResp::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginResp.ip)
}

// optional uint32 port = 3;
bool LoginResp::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginResp::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginResp::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginResp::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 LoginResp::port() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginResp.port)
  return port_;
}
 void LoginResp::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginResp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAccountReq::kAccountFieldNumber;
const int LoginAccountReq::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAccountReq::LoginAccountReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginAccountReq)
}

void LoginAccountReq::InitAsDefaultInstance() {
}

LoginAccountReq::LoginAccountReq(const LoginAccountReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginAccountReq)
}

void LoginAccountReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginAccountReq::~LoginAccountReq() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginAccountReq)
  SharedDtor();
}

void LoginAccountReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginAccountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAccountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAccountReq_descriptor_;
}

const LoginAccountReq& LoginAccountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LoginAccountReq* LoginAccountReq::default_instance_ = NULL;

LoginAccountReq* LoginAccountReq::New(::google::protobuf::Arena* arena) const {
  LoginAccountReq* n = new LoginAccountReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAccountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginAccountReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginAccountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginAccountReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginAccountReq.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginAccountReq.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginAccountReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginAccountReq)
  return false;
#undef DO_
}

void LoginAccountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginAccountReq)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginAccountReq.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginAccountReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginAccountReq)
}

::google::protobuf::uint8* LoginAccountReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginAccountReq)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginAccountReq.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginAccountReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginAccountReq)
  return target;
}

int LoginAccountReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.LoginAccountReq)
  int total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int LoginAccountReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginAccountReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAccountReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginAccountReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginAccountReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAccountReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginAccountReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginAccountReq)
    MergeFrom(*source);
  }
}

void LoginAccountReq::MergeFrom(const LoginAccountReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginAccountReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginAccountReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginAccountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAccountReq::CopyFrom(const LoginAccountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginAccountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAccountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginAccountReq::Swap(LoginAccountReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAccountReq::InternalSwap(LoginAccountReq* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAccountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAccountReq_descriptor_;
  metadata.reflection = LoginAccountReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAccountReq

// required string account = 1;
bool LoginAccountReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginAccountReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginAccountReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginAccountReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& LoginAccountReq::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginAccountReq.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAccountReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginAccountReq.account)
}
 void LoginAccountReq::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginAccountReq.account)
}
 void LoginAccountReq::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginAccountReq.account)
}
 ::std::string* LoginAccountReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginAccountReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginAccountReq::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginAccountReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAccountReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginAccountReq.account)
}

// required string password = 2;
bool LoginAccountReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginAccountReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginAccountReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginAccountReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& LoginAccountReq::password() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginAccountReq.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAccountReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginAccountReq.password)
}
 void LoginAccountReq::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginAccountReq.password)
}
 void LoginAccountReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginAccountReq.password)
}
 ::std::string* LoginAccountReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginAccountReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginAccountReq::release_password() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginAccountReq.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAccountReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginAccountReq.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KictoutResp::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KictoutResp::KictoutResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.KictoutResp)
}

void KictoutResp::InitAsDefaultInstance() {
}

KictoutResp::KictoutResp(const KictoutResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.KictoutResp)
}

void KictoutResp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KictoutResp::~KictoutResp() {
  // @@protoc_insertion_point(destructor:msg_maj.KictoutResp)
  SharedDtor();
}

void KictoutResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KictoutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KictoutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KictoutResp_descriptor_;
}

const KictoutResp& KictoutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

KictoutResp* KictoutResp::default_instance_ = NULL;

KictoutResp* KictoutResp::New(::google::protobuf::Arena* arena) const {
  KictoutResp* n = new KictoutResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KictoutResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.KictoutResp)
  code_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KictoutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.KictoutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.login_code code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::login_code_IsValid(value)) {
            set_code(static_cast< ::msg_maj::login_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.KictoutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.KictoutResp)
  return false;
#undef DO_
}

void KictoutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.KictoutResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.KictoutResp)
}

::google::protobuf::uint8* KictoutResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.KictoutResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.KictoutResp)
  return target;
}

int KictoutResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.KictoutResp)
  int total_size = 0;

  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KictoutResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.KictoutResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KictoutResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KictoutResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.KictoutResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.KictoutResp)
    MergeFrom(*source);
  }
}

void KictoutResp::MergeFrom(const KictoutResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.KictoutResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KictoutResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.KictoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KictoutResp::CopyFrom(const KictoutResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.KictoutResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KictoutResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KictoutResp::Swap(KictoutResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KictoutResp::InternalSwap(KictoutResp* other) {
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KictoutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KictoutResp_descriptor_;
  metadata.reflection = KictoutResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KictoutResp

// required .msg_maj.login_code code = 1;
bool KictoutResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KictoutResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void KictoutResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void KictoutResp::clear_code() {
  code_ = 1;
  clear_has_code();
}
 ::msg_maj::login_code KictoutResp::code() const {
  // @@protoc_insertion_point(field_get:msg_maj.KictoutResp.code)
  return static_cast< ::msg_maj::login_code >(code_);
}
 void KictoutResp::set_code(::msg_maj::login_code value) {
  assert(::msg_maj::login_code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.KictoutResp.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutReq::LogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LogoutReq)
}

void LogoutReq::InitAsDefaultInstance() {
}

LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LogoutReq)
}

void LogoutReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:msg_maj.LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReq_descriptor_;
}

const LogoutReq& LogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LogoutReq* LogoutReq::default_instance_ = NULL;

LogoutReq* LogoutReq::New(::google::protobuf::Arena* arena) const {
  LogoutReq* n = new LogoutReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LogoutReq)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LogoutReq)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LogoutReq)
}

::google::protobuf::uint8* LogoutReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LogoutReq)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LogoutReq)
  return target;
}

int LogoutReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LogoutReq)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LogoutReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogoutReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LogoutReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LogoutReq)
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LogoutReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {

  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutReq::InternalSwap(LogoutReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutReq_descriptor_;
  metadata.reflection = LogoutReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginPlayerReq::kAccountFieldNumber;
const int LoginPlayerReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginPlayerReq::LoginPlayerReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginPlayerReq)
}

void LoginPlayerReq::InitAsDefaultInstance() {
}

LoginPlayerReq::LoginPlayerReq(const LoginPlayerReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginPlayerReq)
}

void LoginPlayerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginPlayerReq::~LoginPlayerReq() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginPlayerReq)
  SharedDtor();
}

void LoginPlayerReq::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginPlayerReq_descriptor_;
}

const LoginPlayerReq& LoginPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LoginPlayerReq* LoginPlayerReq::default_instance_ = NULL;

LoginPlayerReq* LoginPlayerReq::New(::google::protobuf::Arena* arena) const {
  LoginPlayerReq* n = new LoginPlayerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginPlayerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginPlayerReq)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginPlayerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginPlayerReq.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginPlayerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginPlayerReq)
  return false;
#undef DO_
}

void LoginPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginPlayerReq)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginPlayerReq.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginPlayerReq)
}

::google::protobuf::uint8* LoginPlayerReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginPlayerReq)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginPlayerReq.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginPlayerReq)
  return target;
}

int LoginPlayerReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginPlayerReq)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginPlayerReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginPlayerReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginPlayerReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginPlayerReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginPlayerReq)
    MergeFrom(*source);
  }
}

void LoginPlayerReq::MergeFrom(const LoginPlayerReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginPlayerReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginPlayerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginPlayerReq::CopyFrom(const LoginPlayerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginPlayerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPlayerReq::IsInitialized() const {

  return true;
}

void LoginPlayerReq::Swap(LoginPlayerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginPlayerReq::InternalSwap(LoginPlayerReq* other) {
  account_.Swap(&other->account_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginPlayerReq_descriptor_;
  metadata.reflection = LoginPlayerReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginPlayerReq

// optional string account = 1;
bool LoginPlayerReq::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginPlayerReq::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginPlayerReq::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginPlayerReq::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& LoginPlayerReq::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerReq.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginPlayerReq::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerReq.account)
}
 void LoginPlayerReq::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginPlayerReq.account)
}
 void LoginPlayerReq::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginPlayerReq.account)
}
 ::std::string* LoginPlayerReq::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginPlayerReq.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginPlayerReq::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginPlayerReq.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginPlayerReq::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginPlayerReq.account)
}

// optional uint32 serverid = 2;
bool LoginPlayerReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginPlayerReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginPlayerReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginPlayerReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
 ::google::protobuf::uint32 LoginPlayerReq::serverid() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerReq.serverid)
  return serverid_;
}
 void LoginPlayerReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerReq.serverid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginPlayerResp::kCodeFieldNumber;
const int LoginPlayerResp::kIsReconnectFieldNumber;
const int LoginPlayerResp::kRoleFieldNumber;
const int LoginPlayerResp::kSrvTimeFieldNumber;
const int LoginPlayerResp::kIsFreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginPlayerResp::LoginPlayerResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginPlayerResp)
}

void LoginPlayerResp::InitAsDefaultInstance() {
  role_ = const_cast< ::msg_maj::Role*>(&::msg_maj::Role::default_instance());
}

LoginPlayerResp::LoginPlayerResp(const LoginPlayerResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginPlayerResp)
}

void LoginPlayerResp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 1;
  is_reconnect_ = false;
  role_ = NULL;
  srv_time_ = GOOGLE_ULONGLONG(0);
  is_free_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginPlayerResp::~LoginPlayerResp() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginPlayerResp)
  SharedDtor();
}

void LoginPlayerResp::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void LoginPlayerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginPlayerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginPlayerResp_descriptor_;
}

const LoginPlayerResp& LoginPlayerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

LoginPlayerResp* LoginPlayerResp::default_instance_ = NULL;

LoginPlayerResp* LoginPlayerResp::New(::google::protobuf::Arena* arena) const {
  LoginPlayerResp* n = new LoginPlayerResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginPlayerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginPlayerResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginPlayerResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginPlayerResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(is_reconnect_, is_free_);
    code_ = 1;
    if (has_role()) {
      if (role_ != NULL) role_->::msg_maj::Role::Clear();
    }
    srv_time_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginPlayerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginPlayerResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.login_code code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::login_code_IsValid(value)) {
            set_code(static_cast< ::msg_maj::login_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_reconnect;
        break;
      }

      // optional bool is_reconnect = 2;
      case 2: {
        if (tag == 16) {
         parse_is_reconnect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reconnect_)));
          set_has_is_reconnect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional .msg_maj.Role role = 3;
      case 3: {
        if (tag == 26) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_srv_time;
        break;
      }

      // optional uint64 srv_time = 4;
      case 4: {
        if (tag == 32) {
         parse_srv_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srv_time_)));
          set_has_srv_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_free;
        break;
      }

      // optional bool is_free = 5;
      case 5: {
        if (tag == 40) {
         parse_is_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_free_)));
          set_has_is_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginPlayerResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginPlayerResp)
  return false;
#undef DO_
}

void LoginPlayerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginPlayerResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional bool is_reconnect = 2;
  if (has_is_reconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reconnect(), output);
  }

  // optional .msg_maj.Role role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->role_, output);
  }

  // optional uint64 srv_time = 4;
  if (has_srv_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->srv_time(), output);
  }

  // optional bool is_free = 5;
  if (has_is_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_free(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginPlayerResp)
}

::google::protobuf::uint8* LoginPlayerResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginPlayerResp)
  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional bool is_reconnect = 2;
  if (has_is_reconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reconnect(), target);
  }

  // optional .msg_maj.Role role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->role_, false, target);
  }

  // optional uint64 srv_time = 4;
  if (has_srv_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->srv_time(), target);
  }

  // optional bool is_free = 5;
  if (has_is_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_free(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginPlayerResp)
  return target;
}

int LoginPlayerResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginPlayerResp)
  int total_size = 0;

  // required .msg_maj.login_code code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional bool is_reconnect = 2;
    if (has_is_reconnect()) {
      total_size += 1 + 1;
    }

    // optional .msg_maj.Role role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->role_);
    }

    // optional uint64 srv_time = 4;
    if (has_srv_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->srv_time());
    }

    // optional bool is_free = 5;
    if (has_is_free()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginPlayerResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginPlayerResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginPlayerResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginPlayerResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginPlayerResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginPlayerResp)
    MergeFrom(*source);
  }
}

void LoginPlayerResp::MergeFrom(const LoginPlayerResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginPlayerResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_is_reconnect()) {
      set_is_reconnect(from.is_reconnect());
    }
    if (from.has_role()) {
      mutable_role()->::msg_maj::Role::MergeFrom(from.role());
    }
    if (from.has_srv_time()) {
      set_srv_time(from.srv_time());
    }
    if (from.has_is_free()) {
      set_is_free(from.is_free());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginPlayerResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginPlayerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginPlayerResp::CopyFrom(const LoginPlayerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginPlayerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPlayerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginPlayerResp::Swap(LoginPlayerResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginPlayerResp::InternalSwap(LoginPlayerResp* other) {
  std::swap(code_, other->code_);
  std::swap(is_reconnect_, other->is_reconnect_);
  std::swap(role_, other->role_);
  std::swap(srv_time_, other->srv_time_);
  std::swap(is_free_, other->is_free_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginPlayerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginPlayerResp_descriptor_;
  metadata.reflection = LoginPlayerResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginPlayerResp

// required .msg_maj.login_code code = 1;
bool LoginPlayerResp::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginPlayerResp::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginPlayerResp::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginPlayerResp::clear_code() {
  code_ = 1;
  clear_has_code();
}
 ::msg_maj::login_code LoginPlayerResp::code() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerResp.code)
  return static_cast< ::msg_maj::login_code >(code_);
}
 void LoginPlayerResp::set_code(::msg_maj::login_code value) {
  assert(::msg_maj::login_code_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerResp.code)
}

// optional bool is_reconnect = 2;
bool LoginPlayerResp::has_is_reconnect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginPlayerResp::set_has_is_reconnect() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginPlayerResp::clear_has_is_reconnect() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginPlayerResp::clear_is_reconnect() {
  is_reconnect_ = false;
  clear_has_is_reconnect();
}
 bool LoginPlayerResp::is_reconnect() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerResp.is_reconnect)
  return is_reconnect_;
}
 void LoginPlayerResp::set_is_reconnect(bool value) {
  set_has_is_reconnect();
  is_reconnect_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerResp.is_reconnect)
}

// optional .msg_maj.Role role = 3;
bool LoginPlayerResp::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginPlayerResp::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginPlayerResp::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginPlayerResp::clear_role() {
  if (role_ != NULL) role_->::msg_maj::Role::Clear();
  clear_has_role();
}
const ::msg_maj::Role& LoginPlayerResp::role() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerResp.role)
  return role_ != NULL ? *role_ : *default_instance_->role_;
}
::msg_maj::Role* LoginPlayerResp::mutable_role() {
  set_has_role();
  if (role_ == NULL) {
    role_ = new ::msg_maj::Role;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginPlayerResp.role)
  return role_;
}
::msg_maj::Role* LoginPlayerResp::release_role() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginPlayerResp.role)
  clear_has_role();
  ::msg_maj::Role* temp = role_;
  role_ = NULL;
  return temp;
}
void LoginPlayerResp::set_allocated_role(::msg_maj::Role* role) {
  delete role_;
  role_ = role;
  if (role) {
    set_has_role();
  } else {
    clear_has_role();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginPlayerResp.role)
}

// optional uint64 srv_time = 4;
bool LoginPlayerResp::has_srv_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginPlayerResp::set_has_srv_time() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginPlayerResp::clear_has_srv_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginPlayerResp::clear_srv_time() {
  srv_time_ = GOOGLE_ULONGLONG(0);
  clear_has_srv_time();
}
 ::google::protobuf::uint64 LoginPlayerResp::srv_time() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerResp.srv_time)
  return srv_time_;
}
 void LoginPlayerResp::set_srv_time(::google::protobuf::uint64 value) {
  set_has_srv_time();
  srv_time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerResp.srv_time)
}

// optional bool is_free = 5;
bool LoginPlayerResp::has_is_free() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginPlayerResp::set_has_is_free() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginPlayerResp::clear_has_is_free() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginPlayerResp::clear_is_free() {
  is_free_ = false;
  clear_has_is_free();
}
 bool LoginPlayerResp::is_free() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginPlayerResp.is_free)
  return is_free_;
}
 void LoginPlayerResp::set_is_free(bool value) {
  set_has_is_free();
  is_free_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginPlayerResp.is_free)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SDKTokenReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SDKTokenReq::SDKTokenReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SDKTokenReq)
}

void SDKTokenReq::InitAsDefaultInstance() {
}

SDKTokenReq::SDKTokenReq(const SDKTokenReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SDKTokenReq)
}

void SDKTokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDKTokenReq::~SDKTokenReq() {
  // @@protoc_insertion_point(destructor:msg_maj.SDKTokenReq)
  SharedDtor();
}

void SDKTokenReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SDKTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDKTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDKTokenReq_descriptor_;
}

const SDKTokenReq& SDKTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

SDKTokenReq* SDKTokenReq::default_instance_ = NULL;

SDKTokenReq* SDKTokenReq::New(::google::protobuf::Arena* arena) const {
  SDKTokenReq* n = new SDKTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SDKTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SDKTokenReq)
  if (has_token()) {
    token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SDKTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SDKTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SDKTokenReq.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SDKTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SDKTokenReq)
  return false;
#undef DO_
}

void SDKTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SDKTokenReq)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SDKTokenReq)
}

::google::protobuf::uint8* SDKTokenReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SDKTokenReq)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SDKTokenReq)
  return target;
}

int SDKTokenReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SDKTokenReq)
  int total_size = 0;

  // optional string token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDKTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SDKTokenReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SDKTokenReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SDKTokenReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SDKTokenReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SDKTokenReq)
    MergeFrom(*source);
  }
}

void SDKTokenReq::MergeFrom(const SDKTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SDKTokenReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SDKTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SDKTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKTokenReq::CopyFrom(const SDKTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SDKTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKTokenReq::IsInitialized() const {

  return true;
}

void SDKTokenReq::Swap(SDKTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKTokenReq::InternalSwap(SDKTokenReq* other) {
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SDKTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDKTokenReq_descriptor_;
  metadata.reflection = SDKTokenReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SDKTokenReq

// optional string token = 1;
bool SDKTokenReq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SDKTokenReq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void SDKTokenReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void SDKTokenReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& SDKTokenReq::token() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenReq.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenReq.token)
}
 void SDKTokenReq::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SDKTokenReq.token)
}
 void SDKTokenReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SDKTokenReq.token)
}
 ::std::string* SDKTokenReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:msg_maj.SDKTokenReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKTokenReq::release_token() {
  // @@protoc_insertion_point(field_release:msg_maj.SDKTokenReq.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SDKTokenReq.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SDKTokenResp::kResultFieldNumber;
const int SDKTokenResp::kIpFieldNumber;
const int SDKTokenResp::kPortFieldNumber;
const int SDKTokenResp::kAccountFieldNumber;
const int SDKTokenResp::kIconAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SDKTokenResp::SDKTokenResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SDKTokenResp)
}

void SDKTokenResp::InitAsDefaultInstance() {
}

SDKTokenResp::SDKTokenResp(const SDKTokenResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SDKTokenResp)
}

void SDKTokenResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_add_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SDKTokenResp::~SDKTokenResp() {
  // @@protoc_insertion_point(destructor:msg_maj.SDKTokenResp)
  SharedDtor();
}

void SDKTokenResp::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_add_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SDKTokenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SDKTokenResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SDKTokenResp_descriptor_;
}

const SDKTokenResp& SDKTokenResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

SDKTokenResp* SDKTokenResp::default_instance_ = NULL;

SDKTokenResp* SDKTokenResp::New(::google::protobuf::Arena* arena) const {
  SDKTokenResp* n = new SDKTokenResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SDKTokenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SDKTokenResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SDKTokenResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SDKTokenResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(result_, port_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_icon_add()) {
      icon_add_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SDKTokenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SDKTokenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SDKTokenResp.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (tag == 34) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SDKTokenResp.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_icon_add;
        break;
      }

      // optional string icon_add = 5;
      case 5: {
        if (tag == 42) {
         parse_icon_add:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_add()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_add().data(), this->icon_add().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SDKTokenResp.icon_add");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SDKTokenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SDKTokenResp)
  return false;
#undef DO_
}

void SDKTokenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SDKTokenResp)
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->account(), output);
  }

  // optional string icon_add = 5;
  if (has_icon_add()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_add().data(), this->icon_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.icon_add");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->icon_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SDKTokenResp)
}

::google::protobuf::uint8* SDKTokenResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SDKTokenResp)
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional string icon_add = 5;
  if (has_icon_add()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_add().data(), this->icon_add().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SDKTokenResp.icon_add");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SDKTokenResp)
  return target;
}

int SDKTokenResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SDKTokenResp)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string icon_add = 5;
    if (has_icon_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_add());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SDKTokenResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SDKTokenResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SDKTokenResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SDKTokenResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SDKTokenResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SDKTokenResp)
    MergeFrom(*source);
  }
}

void SDKTokenResp::MergeFrom(const SDKTokenResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SDKTokenResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_icon_add()) {
      set_has_icon_add();
      icon_add_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_add_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SDKTokenResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SDKTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SDKTokenResp::CopyFrom(const SDKTokenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SDKTokenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKTokenResp::IsInitialized() const {

  return true;
}

void SDKTokenResp::Swap(SDKTokenResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SDKTokenResp::InternalSwap(SDKTokenResp* other) {
  std::swap(result_, other->result_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  account_.Swap(&other->account_);
  icon_add_.Swap(&other->icon_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SDKTokenResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SDKTokenResp_descriptor_;
  metadata.reflection = SDKTokenResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SDKTokenResp

// optional int32 result = 1;
bool SDKTokenResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SDKTokenResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void SDKTokenResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void SDKTokenResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 SDKTokenResp::result() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenResp.result)
  return result_;
}
 void SDKTokenResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenResp.result)
}

// optional string ip = 2;
bool SDKTokenResp::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SDKTokenResp::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void SDKTokenResp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void SDKTokenResp::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& SDKTokenResp::ip() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenResp.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenResp.ip)
}
 void SDKTokenResp::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SDKTokenResp.ip)
}
 void SDKTokenResp::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SDKTokenResp.ip)
}
 ::std::string* SDKTokenResp::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:msg_maj.SDKTokenResp.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKTokenResp::release_ip() {
  // @@protoc_insertion_point(field_release:msg_maj.SDKTokenResp.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SDKTokenResp.ip)
}

// optional uint32 port = 3;
bool SDKTokenResp::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SDKTokenResp::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void SDKTokenResp::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void SDKTokenResp::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 SDKTokenResp::port() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenResp.port)
  return port_;
}
 void SDKTokenResp::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenResp.port)
}

// optional string account = 4;
bool SDKTokenResp::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SDKTokenResp::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void SDKTokenResp::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void SDKTokenResp::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& SDKTokenResp::account() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenResp.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenResp.account)
}
 void SDKTokenResp::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SDKTokenResp.account)
}
 void SDKTokenResp::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SDKTokenResp.account)
}
 ::std::string* SDKTokenResp::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:msg_maj.SDKTokenResp.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKTokenResp::release_account() {
  // @@protoc_insertion_point(field_release:msg_maj.SDKTokenResp.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SDKTokenResp.account)
}

// optional string icon_add = 5;
bool SDKTokenResp::has_icon_add() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SDKTokenResp::set_has_icon_add() {
  _has_bits_[0] |= 0x00000010u;
}
void SDKTokenResp::clear_has_icon_add() {
  _has_bits_[0] &= ~0x00000010u;
}
void SDKTokenResp::clear_icon_add() {
  icon_add_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon_add();
}
 const ::std::string& SDKTokenResp::icon_add() const {
  // @@protoc_insertion_point(field_get:msg_maj.SDKTokenResp.icon_add)
  return icon_add_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_icon_add(const ::std::string& value) {
  set_has_icon_add();
  icon_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SDKTokenResp.icon_add)
}
 void SDKTokenResp::set_icon_add(const char* value) {
  set_has_icon_add();
  icon_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SDKTokenResp.icon_add)
}
 void SDKTokenResp::set_icon_add(const char* value, size_t size) {
  set_has_icon_add();
  icon_add_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SDKTokenResp.icon_add)
}
 ::std::string* SDKTokenResp::mutable_icon_add() {
  set_has_icon_add();
  // @@protoc_insertion_point(field_mutable:msg_maj.SDKTokenResp.icon_add)
  return icon_add_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SDKTokenResp::release_icon_add() {
  // @@protoc_insertion_point(field_release:msg_maj.SDKTokenResp.icon_add)
  clear_has_icon_add();
  return icon_add_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SDKTokenResp::set_allocated_icon_add(::std::string* icon_add) {
  if (icon_add != NULL) {
    set_has_icon_add();
  } else {
    clear_has_icon_add();
  }
  icon_add_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon_add);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SDKTokenResp.icon_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyAnotherLogin::NotifyAnotherLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.NotifyAnotherLogin)
}

void NotifyAnotherLogin::InitAsDefaultInstance() {
}

NotifyAnotherLogin::NotifyAnotherLogin(const NotifyAnotherLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.NotifyAnotherLogin)
}

void NotifyAnotherLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAnotherLogin::~NotifyAnotherLogin() {
  // @@protoc_insertion_point(destructor:msg_maj.NotifyAnotherLogin)
  SharedDtor();
}

void NotifyAnotherLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAnotherLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAnotherLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAnotherLogin_descriptor_;
}

const NotifyAnotherLogin& NotifyAnotherLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

NotifyAnotherLogin* NotifyAnotherLogin::default_instance_ = NULL;

NotifyAnotherLogin* NotifyAnotherLogin::New(::google::protobuf::Arena* arena) const {
  NotifyAnotherLogin* n = new NotifyAnotherLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyAnotherLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.NotifyAnotherLogin)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotifyAnotherLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.NotifyAnotherLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.NotifyAnotherLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.NotifyAnotherLogin)
  return false;
#undef DO_
}

void NotifyAnotherLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.NotifyAnotherLogin)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.NotifyAnotherLogin)
}

::google::protobuf::uint8* NotifyAnotherLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.NotifyAnotherLogin)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.NotifyAnotherLogin)
  return target;
}

int NotifyAnotherLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.NotifyAnotherLogin)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAnotherLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.NotifyAnotherLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NotifyAnotherLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyAnotherLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.NotifyAnotherLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.NotifyAnotherLogin)
    MergeFrom(*source);
  }
}

void NotifyAnotherLogin::MergeFrom(const NotifyAnotherLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.NotifyAnotherLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NotifyAnotherLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.NotifyAnotherLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAnotherLogin::CopyFrom(const NotifyAnotherLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.NotifyAnotherLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAnotherLogin::IsInitialized() const {

  return true;
}

void NotifyAnotherLogin::Swap(NotifyAnotherLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyAnotherLogin::InternalSwap(NotifyAnotherLogin* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyAnotherLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAnotherLogin_descriptor_;
  metadata.reflection = NotifyAnotherLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyAnotherLogin

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyPlayerExit::NotifyPlayerExit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.NotifyPlayerExit)
}

void NotifyPlayerExit::InitAsDefaultInstance() {
}

NotifyPlayerExit::NotifyPlayerExit(const NotifyPlayerExit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.NotifyPlayerExit)
}

void NotifyPlayerExit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPlayerExit::~NotifyPlayerExit() {
  // @@protoc_insertion_point(destructor:msg_maj.NotifyPlayerExit)
  SharedDtor();
}

void NotifyPlayerExit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPlayerExit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPlayerExit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPlayerExit_descriptor_;
}

const NotifyPlayerExit& NotifyPlayerExit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

NotifyPlayerExit* NotifyPlayerExit::default_instance_ = NULL;

NotifyPlayerExit* NotifyPlayerExit::New(::google::protobuf::Arena* arena) const {
  NotifyPlayerExit* n = new NotifyPlayerExit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyPlayerExit::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.NotifyPlayerExit)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NotifyPlayerExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.NotifyPlayerExit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.NotifyPlayerExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.NotifyPlayerExit)
  return false;
#undef DO_
}

void NotifyPlayerExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.NotifyPlayerExit)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.NotifyPlayerExit)
}

::google::protobuf::uint8* NotifyPlayerExit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.NotifyPlayerExit)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.NotifyPlayerExit)
  return target;
}

int NotifyPlayerExit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.NotifyPlayerExit)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPlayerExit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.NotifyPlayerExit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NotifyPlayerExit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyPlayerExit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.NotifyPlayerExit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.NotifyPlayerExit)
    MergeFrom(*source);
  }
}

void NotifyPlayerExit::MergeFrom(const NotifyPlayerExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.NotifyPlayerExit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NotifyPlayerExit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.NotifyPlayerExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPlayerExit::CopyFrom(const NotifyPlayerExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.NotifyPlayerExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPlayerExit::IsInitialized() const {

  return true;
}

void NotifyPlayerExit::Swap(NotifyPlayerExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyPlayerExit::InternalSwap(NotifyPlayerExit* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyPlayerExit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPlayerExit_descriptor_;
  metadata.reflection = NotifyPlayerExit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyPlayerExit

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeSceneReq::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeSceneReq::ChangeSceneReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ChangeSceneReq)
}

void ChangeSceneReq::InitAsDefaultInstance() {
}

ChangeSceneReq::ChangeSceneReq(const ChangeSceneReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ChangeSceneReq)
}

void ChangeSceneReq::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneReq::~ChangeSceneReq() {
  // @@protoc_insertion_point(destructor:msg_maj.ChangeSceneReq)
  SharedDtor();
}

void ChangeSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneReq_descriptor_;
}

const ChangeSceneReq& ChangeSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

ChangeSceneReq* ChangeSceneReq::default_instance_ = NULL;

ChangeSceneReq* ChangeSceneReq::New(::google::protobuf::Arena* arena) const {
  ChangeSceneReq* n = new ChangeSceneReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ChangeSceneReq)
  scene_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ChangeSceneReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ChangeSceneReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ChangeSceneReq)
  return false;
#undef DO_
}

void ChangeSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ChangeSceneReq)
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ChangeSceneReq)
}

::google::protobuf::uint8* ChangeSceneReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ChangeSceneReq)
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ChangeSceneReq)
  return target;
}

int ChangeSceneReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ChangeSceneReq)
  int total_size = 0;

  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ChangeSceneReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeSceneReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeSceneReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ChangeSceneReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ChangeSceneReq)
    MergeFrom(*source);
  }
}

void ChangeSceneReq::MergeFrom(const ChangeSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ChangeSceneReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ChangeSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneReq::CopyFrom(const ChangeSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ChangeSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneReq::IsInitialized() const {

  return true;
}

void ChangeSceneReq::Swap(ChangeSceneReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeSceneReq::InternalSwap(ChangeSceneReq* other) {
  std::swap(scene_id_, other->scene_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneReq_descriptor_;
  metadata.reflection = ChangeSceneReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeSceneReq

// optional int32 scene_id = 1;
bool ChangeSceneReq::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeSceneReq::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeSceneReq::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeSceneReq::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
 ::google::protobuf::int32 ChangeSceneReq::scene_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.ChangeSceneReq.scene_id)
  return scene_id_;
}
 void ChangeSceneReq::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ChangeSceneReq.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeSceneResp::kSceneIdFieldNumber;
const int ChangeSceneResp::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeSceneResp::ChangeSceneResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ChangeSceneResp)
}

void ChangeSceneResp::InitAsDefaultInstance() {
}

ChangeSceneResp::ChangeSceneResp(const ChangeSceneResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ChangeSceneResp)
}

void ChangeSceneResp::SharedCtor() {
  _cached_size_ = 0;
  scene_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSceneResp::~ChangeSceneResp() {
  // @@protoc_insertion_point(destructor:msg_maj.ChangeSceneResp)
  SharedDtor();
}

void ChangeSceneResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSceneResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSceneResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSceneResp_descriptor_;
}

const ChangeSceneResp& ChangeSceneResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5flogin_2eproto();
  return *default_instance_;
}

ChangeSceneResp* ChangeSceneResp::default_instance_ = NULL;

ChangeSceneResp* ChangeSceneResp::New(::google::protobuf::Arena* arena) const {
  ChangeSceneResp* n = new ChangeSceneResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeSceneResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ChangeSceneResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChangeSceneResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChangeSceneResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(scene_id_, result_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChangeSceneResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ChangeSceneResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scene_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ChangeSceneResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ChangeSceneResp)
  return false;
#undef DO_
}

void ChangeSceneResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ChangeSceneResp)
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scene_id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ChangeSceneResp)
}

::google::protobuf::uint8* ChangeSceneResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ChangeSceneResp)
  // optional int32 scene_id = 1;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scene_id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ChangeSceneResp)
  return target;
}

int ChangeSceneResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ChangeSceneResp)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 scene_id = 1;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSceneResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ChangeSceneResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChangeSceneResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeSceneResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ChangeSceneResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ChangeSceneResp)
    MergeFrom(*source);
  }
}

void ChangeSceneResp::MergeFrom(const ChangeSceneResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ChangeSceneResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChangeSceneResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ChangeSceneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSceneResp::CopyFrom(const ChangeSceneResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ChangeSceneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSceneResp::IsInitialized() const {

  return true;
}

void ChangeSceneResp::Swap(ChangeSceneResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeSceneResp::InternalSwap(ChangeSceneResp* other) {
  std::swap(scene_id_, other->scene_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeSceneResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSceneResp_descriptor_;
  metadata.reflection = ChangeSceneResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeSceneResp

// optional int32 scene_id = 1;
bool ChangeSceneResp::has_scene_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeSceneResp::set_has_scene_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeSceneResp::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeSceneResp::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
 ::google::protobuf::int32 ChangeSceneResp::scene_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.ChangeSceneResp.scene_id)
  return scene_id_;
}
 void ChangeSceneResp::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ChangeSceneResp.scene_id)
}

// optional int32 result = 2;
bool ChangeSceneResp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChangeSceneResp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void ChangeSceneResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChangeSceneResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 ChangeSceneResp::result() const {
  // @@protoc_insertion_point(field_get:msg_maj.ChangeSceneResp.result)
  return result_;
}
 void ChangeSceneResp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ChangeSceneResp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_maj

// @@protoc_insertion_point(global_scope)
