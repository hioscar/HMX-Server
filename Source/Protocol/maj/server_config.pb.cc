// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fogs {
namespace proto {
namespace msg {

namespace {

const ::google::protobuf::Descriptor* DBConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConServerConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_server_5fconfig_2eproto() {
  protobuf_AddDesc_server_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_config.proto");
  GOOGLE_CHECK(file != NULL);
  DBConfig_descriptor_ = file->message_type(0);
  static const int DBConfig_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, table_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, readtimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, writetimeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, conntimeout_),
  };
  DBConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DBConfig_descriptor_,
      DBConfig::default_instance_,
      DBConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DBConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBConfig, _internal_metadata_),
      -1);
  ConServerConfig_descriptor_ = file->message_type(1);
  static const int ConServerConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, port_),
  };
  ConServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConServerConfig_descriptor_,
      ConServerConfig::default_instance_,
      ConServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConServerConfig, _internal_metadata_),
      -1);
  ServerConfig_descriptor_ = file->message_type(2);
  static const int ServerConfig_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, server_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, client_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, reconnet_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, con_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, sdk_web_),
  };
  ServerConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConfig_descriptor_,
      ServerConfig::default_instance_,
      ServerConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DBConfig_descriptor_, &DBConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConServerConfig_descriptor_, &ConServerConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConfig_descriptor_, &ServerConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fconfig_2eproto() {
  delete DBConfig::default_instance_;
  delete DBConfig_reflection_;
  delete ConServerConfig::default_instance_;
  delete ConServerConfig_reflection_;
  delete ServerConfig::default_instance_;
  delete ServerConfig_reflection_;
}

void protobuf_AddDesc_server_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_server_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023server_config.proto\022\016fogs.proto.msg\"\240\001"
    "\n\010DBConfig\022\014\n\004name\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004"
    "port\030\003 \001(\r\022\014\n\004user\030\004 \001(\t\022\013\n\003pwd\030\005 \001(\t\022\021\n"
    "\ttable_num\030\006 \001(\r\022\023\n\013readtimeout\030\007 \001(\r\022\024\n"
    "\014writetimeout\030\010 \001(\r\022\023\n\013conntimeout\030\t \001(\r"
    "\"S\n\017ConServerConfig\022\014\n\004name\030\001 \001(\t\022\014\n\004typ"
    "e\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030"
    "\005 \001(\r\"\377\001\n\014ServerConfig\022\014\n\004name\030\001 \001(\t\022\014\n\004"
    "type\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\021\n\tserver_ip\030\004 \001("
    "\t\022\021\n\tclient_ip\030\005 \001(\t\022\014\n\004port\030\006 \001(\r\022\022\n\nth"
    "read_num\030\007 \001(\r\022\025\n\rreconnet_time\030\010 \001(\r\0221\n"
    "\010con_list\030\t \003(\0132\037.fogs.proto.msg.ConServ"
    "erConfig\022$\n\002db\030\n \001(\0132\030.fogs.proto.msg.DB"
    "Config\022\017\n\007sdk_web\030\013 \001(\t", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_config.proto", &protobuf_RegisterTypes);
  DBConfig::default_instance_ = new DBConfig();
  ConServerConfig::default_instance_ = new ConServerConfig();
  ServerConfig::default_instance_ = new ServerConfig();
  DBConfig::default_instance_->InitAsDefaultInstance();
  ConServerConfig::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fconfig_2eproto {
  StaticDescriptorInitializer_server_5fconfig_2eproto() {
    protobuf_AddDesc_server_5fconfig_2eproto();
  }
} static_descriptor_initializer_server_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DBConfig::kNameFieldNumber;
const int DBConfig::kIpFieldNumber;
const int DBConfig::kPortFieldNumber;
const int DBConfig::kUserFieldNumber;
const int DBConfig::kPwdFieldNumber;
const int DBConfig::kTableNumFieldNumber;
const int DBConfig::kReadtimeoutFieldNumber;
const int DBConfig::kWritetimeoutFieldNumber;
const int DBConfig::kConntimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DBConfig::DBConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fogs.proto.msg.DBConfig)
}

void DBConfig::InitAsDefaultInstance() {
}

DBConfig::DBConfig(const DBConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fogs.proto.msg.DBConfig)
}

void DBConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_num_ = 0u;
  readtimeout_ = 0u;
  writetimeout_ = 0u;
  conntimeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBConfig::~DBConfig() {
  // @@protoc_insertion_point(destructor:fogs.proto.msg.DBConfig)
  SharedDtor();
}

void DBConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DBConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBConfig_descriptor_;
}

const DBConfig& DBConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();
  return *default_instance_;
}

DBConfig* DBConfig::default_instance_ = NULL;

DBConfig* DBConfig::New(::google::protobuf::Arena* arena) const {
  DBConfig* n = new DBConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DBConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:fogs.proto.msg.DBConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DBConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DBConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(port_, table_num_);
    ZR_(readtimeout_, writetimeout_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user()) {
      user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_pwd()) {
      pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  conntimeout_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DBConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fogs.proto.msg.DBConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.DBConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.DBConfig.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.DBConfig.user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pwd;
        break;
      }

      // optional string pwd = 5;
      case 5: {
        if (tag == 42) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.DBConfig.pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_table_num;
        break;
      }

      // optional uint32 table_num = 6;
      case 6: {
        if (tag == 48) {
         parse_table_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_num_)));
          set_has_table_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_readtimeout;
        break;
      }

      // optional uint32 readtimeout = 7;
      case 7: {
        if (tag == 56) {
         parse_readtimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &readtimeout_)));
          set_has_readtimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_writetimeout;
        break;
      }

      // optional uint32 writetimeout = 8;
      case 8: {
        if (tag == 64) {
         parse_writetimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &writetimeout_)));
          set_has_writetimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_conntimeout;
        break;
      }

      // optional uint32 conntimeout = 9;
      case 9: {
        if (tag == 72) {
         parse_conntimeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conntimeout_)));
          set_has_conntimeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fogs.proto.msg.DBConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fogs.proto.msg.DBConfig)
  return false;
#undef DO_
}

void DBConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fogs.proto.msg.DBConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pwd(), output);
  }

  // optional uint32 table_num = 6;
  if (has_table_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->table_num(), output);
  }

  // optional uint32 readtimeout = 7;
  if (has_readtimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->readtimeout(), output);
  }

  // optional uint32 writetimeout = 8;
  if (has_writetimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->writetimeout(), output);
  }

  // optional uint32 conntimeout = 9;
  if (has_conntimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->conntimeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fogs.proto.msg.DBConfig)
}

::google::protobuf::uint8* DBConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fogs.proto.msg.DBConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.DBConfig.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }

  // optional uint32 table_num = 6;
  if (has_table_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->table_num(), target);
  }

  // optional uint32 readtimeout = 7;
  if (has_readtimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->readtimeout(), target);
  }

  // optional uint32 writetimeout = 8;
  if (has_writetimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->writetimeout(), target);
  }

  // optional uint32 conntimeout = 9;
  if (has_conntimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->conntimeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fogs.proto.msg.DBConfig)
  return target;
}

int DBConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fogs.proto.msg.DBConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // optional uint32 table_num = 6;
    if (has_table_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->table_num());
    }

    // optional uint32 readtimeout = 7;
    if (has_readtimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->readtimeout());
    }

    // optional uint32 writetimeout = 8;
    if (has_writetimeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->writetimeout());
    }

  }
  // optional uint32 conntimeout = 9;
  if (has_conntimeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->conntimeout());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fogs.proto.msg.DBConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DBConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DBConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fogs.proto.msg.DBConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fogs.proto.msg.DBConfig)
    MergeFrom(*source);
  }
}

void DBConfig::MergeFrom(const DBConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fogs.proto.msg.DBConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_pwd()) {
      set_has_pwd();
      pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
    }
    if (from.has_table_num()) {
      set_table_num(from.table_num());
    }
    if (from.has_readtimeout()) {
      set_readtimeout(from.readtimeout());
    }
    if (from.has_writetimeout()) {
      set_writetimeout(from.writetimeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_conntimeout()) {
      set_conntimeout(from.conntimeout());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DBConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fogs.proto.msg.DBConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBConfig::CopyFrom(const DBConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fogs.proto.msg.DBConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBConfig::IsInitialized() const {

  return true;
}

void DBConfig::Swap(DBConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DBConfig::InternalSwap(DBConfig* other) {
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  user_.Swap(&other->user_);
  pwd_.Swap(&other->pwd_);
  std::swap(table_num_, other->table_num_);
  std::swap(readtimeout_, other->readtimeout_);
  std::swap(writetimeout_, other->writetimeout_);
  std::swap(conntimeout_, other->conntimeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DBConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBConfig_descriptor_;
  metadata.reflection = DBConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DBConfig

// optional string name = 1;
bool DBConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DBConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void DBConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void DBConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& DBConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.name)
}
 void DBConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.name)
}
 void DBConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.name)
}
 ::std::string* DBConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.name)
}

// optional string ip = 2;
bool DBConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DBConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void DBConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void DBConfig::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& DBConfig::ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.ip)
}
 void DBConfig::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.ip)
}
 void DBConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.ip)
}
 ::std::string* DBConfig::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.ip)
}

// optional uint32 port = 3;
bool DBConfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DBConfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
void DBConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
void DBConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 DBConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.port)
  return port_;
}
 void DBConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.port)
}

// optional string user = 4;
bool DBConfig::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DBConfig::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
void DBConfig::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
void DBConfig::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
 const ::std::string& DBConfig::user() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.user)
}
 void DBConfig::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.user)
}
 void DBConfig::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.user)
}
 ::std::string* DBConfig::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_user() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.user)
}

// optional string pwd = 5;
bool DBConfig::has_pwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DBConfig::set_has_pwd() {
  _has_bits_[0] |= 0x00000010u;
}
void DBConfig::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000010u;
}
void DBConfig::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
 const ::std::string& DBConfig::pwd() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.pwd)
  return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.pwd)
}
 void DBConfig::set_pwd(const char* value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.pwd)
}
 void DBConfig::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.pwd)
}
 ::std::string* DBConfig::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DBConfig::release_pwd() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DBConfig::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.pwd)
}

// optional uint32 table_num = 6;
bool DBConfig::has_table_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DBConfig::set_has_table_num() {
  _has_bits_[0] |= 0x00000020u;
}
void DBConfig::clear_has_table_num() {
  _has_bits_[0] &= ~0x00000020u;
}
void DBConfig::clear_table_num() {
  table_num_ = 0u;
  clear_has_table_num();
}
 ::google::protobuf::uint32 DBConfig::table_num() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.table_num)
  return table_num_;
}
 void DBConfig::set_table_num(::google::protobuf::uint32 value) {
  set_has_table_num();
  table_num_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.table_num)
}

// optional uint32 readtimeout = 7;
bool DBConfig::has_readtimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DBConfig::set_has_readtimeout() {
  _has_bits_[0] |= 0x00000040u;
}
void DBConfig::clear_has_readtimeout() {
  _has_bits_[0] &= ~0x00000040u;
}
void DBConfig::clear_readtimeout() {
  readtimeout_ = 0u;
  clear_has_readtimeout();
}
 ::google::protobuf::uint32 DBConfig::readtimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.readtimeout)
  return readtimeout_;
}
 void DBConfig::set_readtimeout(::google::protobuf::uint32 value) {
  set_has_readtimeout();
  readtimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.readtimeout)
}

// optional uint32 writetimeout = 8;
bool DBConfig::has_writetimeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DBConfig::set_has_writetimeout() {
  _has_bits_[0] |= 0x00000080u;
}
void DBConfig::clear_has_writetimeout() {
  _has_bits_[0] &= ~0x00000080u;
}
void DBConfig::clear_writetimeout() {
  writetimeout_ = 0u;
  clear_has_writetimeout();
}
 ::google::protobuf::uint32 DBConfig::writetimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.writetimeout)
  return writetimeout_;
}
 void DBConfig::set_writetimeout(::google::protobuf::uint32 value) {
  set_has_writetimeout();
  writetimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.writetimeout)
}

// optional uint32 conntimeout = 9;
bool DBConfig::has_conntimeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DBConfig::set_has_conntimeout() {
  _has_bits_[0] |= 0x00000100u;
}
void DBConfig::clear_has_conntimeout() {
  _has_bits_[0] &= ~0x00000100u;
}
void DBConfig::clear_conntimeout() {
  conntimeout_ = 0u;
  clear_has_conntimeout();
}
 ::google::protobuf::uint32 DBConfig::conntimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.conntimeout)
  return conntimeout_;
}
 void DBConfig::set_conntimeout(::google::protobuf::uint32 value) {
  set_has_conntimeout();
  conntimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.conntimeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConServerConfig::kNameFieldNumber;
const int ConServerConfig::kTypeFieldNumber;
const int ConServerConfig::kIdFieldNumber;
const int ConServerConfig::kIpFieldNumber;
const int ConServerConfig::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConServerConfig::ConServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fogs.proto.msg.ConServerConfig)
}

void ConServerConfig::InitAsDefaultInstance() {
}

ConServerConfig::ConServerConfig(const ConServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fogs.proto.msg.ConServerConfig)
}

void ConServerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  id_ = 0u;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConServerConfig::~ConServerConfig() {
  // @@protoc_insertion_point(destructor:fogs.proto.msg.ConServerConfig)
  SharedDtor();
}

void ConServerConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConServerConfig_descriptor_;
}

const ConServerConfig& ConServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();
  return *default_instance_;
}

ConServerConfig* ConServerConfig::default_instance_ = NULL;

ConServerConfig* ConServerConfig::New(::google::protobuf::Arena* arena) const {
  ConServerConfig* n = new ConServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:fogs.proto.msg.ConServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(type_, id_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fogs.proto.msg.ConServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ConServerConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (tag == 34) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ConServerConfig.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional uint32 port = 5;
      case 5: {
        if (tag == 40) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fogs.proto.msg.ConServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fogs.proto.msg.ConServerConfig)
  return false;
#undef DO_
}

void ConServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fogs.proto.msg.ConServerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ConServerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ConServerConfig.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fogs.proto.msg.ConServerConfig)
}

::google::protobuf::uint8* ConServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fogs.proto.msg.ConServerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ConServerConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ConServerConfig.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fogs.proto.msg.ConServerConfig)
  return target;
}

int ConServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fogs.proto.msg.ConServerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fogs.proto.msg.ConServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fogs.proto.msg.ConServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fogs.proto.msg.ConServerConfig)
    MergeFrom(*source);
  }
}

void ConServerConfig::MergeFrom(const ConServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fogs.proto.msg.ConServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fogs.proto.msg.ConServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConServerConfig::CopyFrom(const ConServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fogs.proto.msg.ConServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConServerConfig::IsInitialized() const {

  return true;
}

void ConServerConfig::Swap(ConServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConServerConfig::InternalSwap(ConServerConfig* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConServerConfig_descriptor_;
  metadata.reflection = ConServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConServerConfig

// optional string name = 1;
bool ConServerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConServerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ConServerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConServerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ConServerConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConServerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.name)
}
 void ConServerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ConServerConfig.name)
}
 void ConServerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ConServerConfig.name)
}
 ::std::string* ConServerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ConServerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConServerConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ConServerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConServerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ConServerConfig.name)
}

// optional uint32 type = 2;
bool ConServerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConServerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ConServerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConServerConfig::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 ConServerConfig::type() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.type)
  return type_;
}
 void ConServerConfig::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.type)
}

// optional uint32 id = 3;
bool ConServerConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConServerConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConServerConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConServerConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 ConServerConfig::id() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.id)
  return id_;
}
 void ConServerConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.id)
}

// optional string ip = 4;
bool ConServerConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConServerConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void ConServerConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConServerConfig::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& ConServerConfig::ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConServerConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.ip)
}
 void ConServerConfig::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ConServerConfig.ip)
}
 void ConServerConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ConServerConfig.ip)
}
 ::std::string* ConServerConfig::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ConServerConfig.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConServerConfig::release_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ConServerConfig.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConServerConfig::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ConServerConfig.ip)
}

// optional uint32 port = 5;
bool ConServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
void ConServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConServerConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 ConServerConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.port)
  return port_;
}
 void ConServerConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConfig::kNameFieldNumber;
const int ServerConfig::kTypeFieldNumber;
const int ServerConfig::kIdFieldNumber;
const int ServerConfig::kServerIpFieldNumber;
const int ServerConfig::kClientIpFieldNumber;
const int ServerConfig::kPortFieldNumber;
const int ServerConfig::kThreadNumFieldNumber;
const int ServerConfig::kReconnetTimeFieldNumber;
const int ServerConfig::kConListFieldNumber;
const int ServerConfig::kDbFieldNumber;
const int ServerConfig::kSdkWebFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConfig::ServerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fogs.proto.msg.ServerConfig)
}

void ServerConfig::InitAsDefaultInstance() {
  db_ = const_cast< ::fogs::proto::msg::DBConfig*>(&::fogs::proto::msg::DBConfig::default_instance());
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fogs.proto.msg.ServerConfig)
}

void ServerConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  id_ = 0u;
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  thread_num_ = 0u;
  reconnet_time_ = 0u;
  db_ = NULL;
  sdk_web_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  // @@protoc_insertion_point(destructor:fogs.proto.msg.ServerConfig)
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sdk_web_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete db_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConfig_descriptor_;
}

const ServerConfig& ServerConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New(::google::protobuf::Arena* arena) const {
  ServerConfig* n = new ServerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:fogs.proto.msg.ServerConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(type_, id_);
    ZR_(port_, thread_num_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_server_ip()) {
      server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_client_ip()) {
      client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    reconnet_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1536u) {
    if (has_db()) {
      if (db_ != NULL) db_->::fogs::proto::msg::DBConfig::Clear();
    }
    if (has_sdk_web()) {
      sdk_web_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  con_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fogs.proto.msg.ServerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ServerConfig.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_ip;
        break;
      }

      // optional string server_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_server_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ip().data(), this->server_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ServerConfig.server_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_ip;
        break;
      }

      // optional string client_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_client_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ServerConfig.client_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional uint32 port = 6;
      case 6: {
        if (tag == 48) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_thread_num;
        break;
      }

      // optional uint32 thread_num = 7;
      case 7: {
        if (tag == 56) {
         parse_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_num_)));
          set_has_thread_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reconnet_time;
        break;
      }

      // optional uint32 reconnet_time = 8;
      case 8: {
        if (tag == 64) {
         parse_reconnet_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reconnet_time_)));
          set_has_reconnet_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_con_list;
        break;
      }

      // repeated .fogs.proto.msg.ConServerConfig con_list = 9;
      case 9: {
        if (tag == 74) {
         parse_con_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_con_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_con_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_con_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(82)) goto parse_db;
        break;
      }

      // optional .fogs.proto.msg.DBConfig db = 10;
      case 10: {
        if (tag == 82) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sdk_web;
        break;
      }

      // optional string sdk_web = 11;
      case 11: {
        if (tag == 90) {
         parse_sdk_web:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdk_web()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sdk_web().data(), this->sdk_web().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fogs.proto.msg.ServerConfig.sdk_web");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fogs.proto.msg.ServerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fogs.proto.msg.ServerConfig)
  return false;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fogs.proto.msg.ServerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->server_ip(), output);
  }

  // optional string client_ip = 5;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_ip(), output);
  }

  // optional uint32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->port(), output);
  }

  // optional uint32 thread_num = 7;
  if (has_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->thread_num(), output);
  }

  // optional uint32 reconnet_time = 8;
  if (has_reconnet_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reconnet_time(), output);
  }

  // repeated .fogs.proto.msg.ConServerConfig con_list = 9;
  for (unsigned int i = 0, n = this->con_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->con_list(i), output);
  }

  // optional .fogs.proto.msg.DBConfig db = 10;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->db_, output);
  }

  // optional string sdk_web = 11;
  if (has_sdk_web()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdk_web().data(), this->sdk_web().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.sdk_web");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sdk_web(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fogs.proto.msg.ServerConfig)
}

::google::protobuf::uint8* ServerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fogs.proto.msg.ServerConfig)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional string server_ip = 4;
  if (has_server_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ip().data(), this->server_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_ip(), target);
  }

  // optional string client_ip = 5;
  if (has_client_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_ip(), target);
  }

  // optional uint32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->port(), target);
  }

  // optional uint32 thread_num = 7;
  if (has_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->thread_num(), target);
  }

  // optional uint32 reconnet_time = 8;
  if (has_reconnet_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reconnet_time(), target);
  }

  // repeated .fogs.proto.msg.ConServerConfig con_list = 9;
  for (unsigned int i = 0, n = this->con_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->con_list(i), false, target);
  }

  // optional .fogs.proto.msg.DBConfig db = 10;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->db_, false, target);
  }

  // optional string sdk_web = 11;
  if (has_sdk_web()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sdk_web().data(), this->sdk_web().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fogs.proto.msg.ServerConfig.sdk_web");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sdk_web(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fogs.proto.msg.ServerConfig)
  return target;
}

int ServerConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fogs.proto.msg.ServerConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string server_ip = 4;
    if (has_server_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_ip());
    }

    // optional string client_ip = 5;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_ip());
    }

    // optional uint32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 thread_num = 7;
    if (has_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_num());
    }

    // optional uint32 reconnet_time = 8;
    if (has_reconnet_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reconnet_time());
    }

  }
  if (_has_bits_[9 / 32] & 1536u) {
    // optional .fogs.proto.msg.DBConfig db = 10;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->db_);
    }

    // optional string sdk_web = 11;
    if (has_sdk_web()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdk_web());
    }

  }
  // repeated .fogs.proto.msg.ConServerConfig con_list = 9;
  total_size += 1 * this->con_list_size();
  for (int i = 0; i < this->con_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->con_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fogs.proto.msg.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fogs.proto.msg.ServerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fogs.proto.msg.ServerConfig)
    MergeFrom(*source);
  }
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fogs.proto.msg.ServerConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  con_list_.MergeFrom(from.con_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_server_ip()) {
      set_has_server_ip();
      server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
    }
    if (from.has_client_ip()) {
      set_has_client_ip();
      client_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_thread_num()) {
      set_thread_num(from.thread_num());
    }
    if (from.has_reconnet_time()) {
      set_reconnet_time(from.reconnet_time());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_db()) {
      mutable_db()->::fogs::proto::msg::DBConfig::MergeFrom(from.db());
    }
    if (from.has_sdk_web()) {
      set_has_sdk_web();
      sdk_web_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sdk_web_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fogs.proto.msg.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fogs.proto.msg.ServerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {

  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConfig::InternalSwap(ServerConfig* other) {
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(id_, other->id_);
  server_ip_.Swap(&other->server_ip_);
  client_ip_.Swap(&other->client_ip_);
  std::swap(port_, other->port_);
  std::swap(thread_num_, other->thread_num_);
  std::swap(reconnet_time_, other->reconnet_time_);
  con_list_.UnsafeArenaSwap(&other->con_list_);
  std::swap(db_, other->db_);
  sdk_web_.Swap(&other->sdk_web_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConfig_descriptor_;
  metadata.reflection = ServerConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConfig

// optional string name = 1;
bool ServerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ServerConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.name)
}
 void ServerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.name)
}
 void ServerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.name)
}
 ::std::string* ServerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.name)
}

// optional uint32 type = 2;
bool ServerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerConfig::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 ServerConfig::type() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.type)
  return type_;
}
 void ServerConfig::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.type)
}

// optional uint32 id = 3;
bool ServerConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 ServerConfig::id() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.id)
  return id_;
}
 void ServerConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.id)
}

// optional string server_ip = 4;
bool ServerConfig::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerConfig::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerConfig::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerConfig::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ip();
}
 const ::std::string& ServerConfig::server_ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.server_ip)
  return server_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.server_ip)
}
 void ServerConfig::set_server_ip(const char* value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.server_ip)
}
 void ServerConfig::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.server_ip)
}
 ::std::string* ServerConfig::mutable_server_ip() {
  set_has_server_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_server_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.server_ip)
  clear_has_server_ip();
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    set_has_server_ip();
  } else {
    clear_has_server_ip();
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.server_ip)
}

// optional string client_ip = 5;
bool ServerConfig::has_client_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerConfig::set_has_client_ip() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerConfig::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerConfig::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_ip();
}
 const ::std::string& ServerConfig::client_ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.client_ip)
  return client_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.client_ip)
}
 void ServerConfig::set_client_ip(const char* value) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.client_ip)
}
 void ServerConfig::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.client_ip)
}
 ::std::string* ServerConfig::mutable_client_ip() {
  set_has_client_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.client_ip)
  return client_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_client_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.client_ip)
  clear_has_client_ip();
  return client_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    set_has_client_ip();
  } else {
    clear_has_client_ip();
  }
  client_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.client_ip)
}

// optional uint32 port = 6;
bool ServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.port)
  return port_;
}
 void ServerConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.port)
}

// optional uint32 thread_num = 7;
bool ServerConfig::has_thread_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerConfig::set_has_thread_num() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerConfig::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerConfig::clear_thread_num() {
  thread_num_ = 0u;
  clear_has_thread_num();
}
 ::google::protobuf::uint32 ServerConfig::thread_num() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.thread_num)
  return thread_num_;
}
 void ServerConfig::set_thread_num(::google::protobuf::uint32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.thread_num)
}

// optional uint32 reconnet_time = 8;
bool ServerConfig::has_reconnet_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ServerConfig::set_has_reconnet_time() {
  _has_bits_[0] |= 0x00000080u;
}
void ServerConfig::clear_has_reconnet_time() {
  _has_bits_[0] &= ~0x00000080u;
}
void ServerConfig::clear_reconnet_time() {
  reconnet_time_ = 0u;
  clear_has_reconnet_time();
}
 ::google::protobuf::uint32 ServerConfig::reconnet_time() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.reconnet_time)
  return reconnet_time_;
}
 void ServerConfig::set_reconnet_time(::google::protobuf::uint32 value) {
  set_has_reconnet_time();
  reconnet_time_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.reconnet_time)
}

// repeated .fogs.proto.msg.ConServerConfig con_list = 9;
int ServerConfig::con_list_size() const {
  return con_list_.size();
}
void ServerConfig::clear_con_list() {
  con_list_.Clear();
}
const ::fogs::proto::msg::ConServerConfig& ServerConfig::con_list(int index) const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Get(index);
}
::fogs::proto::msg::ConServerConfig* ServerConfig::mutable_con_list(int index) {
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Mutable(index);
}
::fogs::proto::msg::ConServerConfig* ServerConfig::add_con_list() {
  // @@protoc_insertion_point(field_add:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >*
ServerConfig::mutable_con_list() {
  // @@protoc_insertion_point(field_mutable_list:fogs.proto.msg.ServerConfig.con_list)
  return &con_list_;
}
const ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >&
ServerConfig::con_list() const {
  // @@protoc_insertion_point(field_list:fogs.proto.msg.ServerConfig.con_list)
  return con_list_;
}

// optional .fogs.proto.msg.DBConfig db = 10;
bool ServerConfig::has_db() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ServerConfig::set_has_db() {
  _has_bits_[0] |= 0x00000200u;
}
void ServerConfig::clear_has_db() {
  _has_bits_[0] &= ~0x00000200u;
}
void ServerConfig::clear_db() {
  if (db_ != NULL) db_->::fogs::proto::msg::DBConfig::Clear();
  clear_has_db();
}
const ::fogs::proto::msg::DBConfig& ServerConfig::db() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.db)
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
::fogs::proto::msg::DBConfig* ServerConfig::mutable_db() {
  set_has_db();
  if (db_ == NULL) {
    db_ = new ::fogs::proto::msg::DBConfig;
  }
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.db)
  return db_;
}
::fogs::proto::msg::DBConfig* ServerConfig::release_db() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.db)
  clear_has_db();
  ::fogs::proto::msg::DBConfig* temp = db_;
  db_ = NULL;
  return temp;
}
void ServerConfig::set_allocated_db(::fogs::proto::msg::DBConfig* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.db)
}

// optional string sdk_web = 11;
bool ServerConfig::has_sdk_web() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ServerConfig::set_has_sdk_web() {
  _has_bits_[0] |= 0x00000400u;
}
void ServerConfig::clear_has_sdk_web() {
  _has_bits_[0] &= ~0x00000400u;
}
void ServerConfig::clear_sdk_web() {
  sdk_web_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdk_web();
}
 const ::std::string& ServerConfig::sdk_web() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.sdk_web)
  return sdk_web_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_sdk_web(const ::std::string& value) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.sdk_web)
}
 void ServerConfig::set_sdk_web(const char* value) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.sdk_web)
}
 void ServerConfig::set_sdk_web(const char* value, size_t size) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.sdk_web)
}
 ::std::string* ServerConfig::mutable_sdk_web() {
  set_has_sdk_web();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.sdk_web)
  return sdk_web_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerConfig::release_sdk_web() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.sdk_web)
  clear_has_sdk_web();
  return sdk_web_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerConfig::set_allocated_sdk_web(::std::string* sdk_web) {
  if (sdk_web != NULL) {
    set_has_sdk_web();
  } else {
    clear_has_sdk_web();
  }
  sdk_web_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_web);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.sdk_web)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace fogs

// @@protoc_insertion_point(global_scope)
