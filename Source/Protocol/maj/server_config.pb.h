// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef PROTOBUF_server_5fconfig_2eproto__INCLUDED
#define PROTOBUF_server_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fogs {
namespace proto {
namespace msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_server_5fconfig_2eproto();
void protobuf_AssignDesc_server_5fconfig_2eproto();
void protobuf_ShutdownFile_server_5fconfig_2eproto();

class ConServerConfig;
class DBConfig;
class ServerConfig;

// ===================================================================

class DBConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fogs.proto.msg.DBConfig) */ {
 public:
  DBConfig();
  virtual ~DBConfig();

  DBConfig(const DBConfig& from);

  inline DBConfig& operator=(const DBConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBConfig& default_instance();

  void Swap(DBConfig* other);

  // implements Message ----------------------------------------------

  inline DBConfig* New() const { return New(NULL); }

  DBConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBConfig& from);
  void MergeFrom(const DBConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DBConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional string user = 4;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional string pwd = 5;
  bool has_pwd() const;
  void clear_pwd();
  static const int kPwdFieldNumber = 5;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // optional uint32 table_num = 6;
  bool has_table_num() const;
  void clear_table_num();
  static const int kTableNumFieldNumber = 6;
  ::google::protobuf::uint32 table_num() const;
  void set_table_num(::google::protobuf::uint32 value);

  // optional uint32 readtimeout = 7;
  bool has_readtimeout() const;
  void clear_readtimeout();
  static const int kReadtimeoutFieldNumber = 7;
  ::google::protobuf::uint32 readtimeout() const;
  void set_readtimeout(::google::protobuf::uint32 value);

  // optional uint32 writetimeout = 8;
  bool has_writetimeout() const;
  void clear_writetimeout();
  static const int kWritetimeoutFieldNumber = 8;
  ::google::protobuf::uint32 writetimeout() const;
  void set_writetimeout(::google::protobuf::uint32 value);

  // optional uint32 conntimeout = 9;
  bool has_conntimeout() const;
  void clear_conntimeout();
  static const int kConntimeoutFieldNumber = 9;
  ::google::protobuf::uint32 conntimeout() const;
  void set_conntimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fogs.proto.msg.DBConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_table_num();
  inline void clear_has_table_num();
  inline void set_has_readtimeout();
  inline void clear_has_readtimeout();
  inline void set_has_writetimeout();
  inline void clear_has_writetimeout();
  inline void set_has_conntimeout();
  inline void clear_has_conntimeout();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 table_num_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::uint32 readtimeout_;
  ::google::protobuf::uint32 writetimeout_;
  ::google::protobuf::uint32 conntimeout_;
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static DBConfig* default_instance_;
};
// -------------------------------------------------------------------

class ConServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fogs.proto.msg.ConServerConfig) */ {
 public:
  ConServerConfig();
  virtual ~ConServerConfig();

  ConServerConfig(const ConServerConfig& from);

  inline ConServerConfig& operator=(const ConServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConServerConfig& default_instance();

  void Swap(ConServerConfig* other);

  // implements Message ----------------------------------------------

  inline ConServerConfig* New() const { return New(NULL); }

  ConServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConServerConfig& from);
  void MergeFrom(const ConServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string ip = 4;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 5;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fogs.proto.msg.ConServerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ConServerConfig* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fogs.proto.msg.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional string server_ip = 4;
  bool has_server_ip() const;
  void clear_server_ip();
  static const int kServerIpFieldNumber = 4;
  const ::std::string& server_ip() const;
  void set_server_ip(const ::std::string& value);
  void set_server_ip(const char* value);
  void set_server_ip(const char* value, size_t size);
  ::std::string* mutable_server_ip();
  ::std::string* release_server_ip();
  void set_allocated_server_ip(::std::string* server_ip);

  // optional string client_ip = 5;
  bool has_client_ip() const;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 5;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);

  // optional uint32 port = 6;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // optional uint32 thread_num = 7;
  bool has_thread_num() const;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 7;
  ::google::protobuf::uint32 thread_num() const;
  void set_thread_num(::google::protobuf::uint32 value);

  // optional uint32 reconnet_time = 8;
  bool has_reconnet_time() const;
  void clear_reconnet_time();
  static const int kReconnetTimeFieldNumber = 8;
  ::google::protobuf::uint32 reconnet_time() const;
  void set_reconnet_time(::google::protobuf::uint32 value);

  // repeated .fogs.proto.msg.ConServerConfig con_list = 9;
  int con_list_size() const;
  void clear_con_list();
  static const int kConListFieldNumber = 9;
  const ::fogs::proto::msg::ConServerConfig& con_list(int index) const;
  ::fogs::proto::msg::ConServerConfig* mutable_con_list(int index);
  ::fogs::proto::msg::ConServerConfig* add_con_list();
  ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >*
      mutable_con_list();
  const ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >&
      con_list() const;

  // optional .fogs.proto.msg.DBConfig db = 10;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 10;
  const ::fogs::proto::msg::DBConfig& db() const;
  ::fogs::proto::msg::DBConfig* mutable_db();
  ::fogs::proto::msg::DBConfig* release_db();
  void set_allocated_db(::fogs::proto::msg::DBConfig* db);

  // optional string sdk_web = 11;
  bool has_sdk_web() const;
  void clear_sdk_web();
  static const int kSdkWebFieldNumber = 11;
  const ::std::string& sdk_web() const;
  void set_sdk_web(const ::std::string& value);
  void set_sdk_web(const char* value);
  void set_sdk_web(const char* value, size_t size);
  ::std::string* mutable_sdk_web();
  ::std::string* release_sdk_web();
  void set_allocated_sdk_web(::std::string* sdk_web);

  // @@protoc_insertion_point(class_scope:fogs.proto.msg.ServerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_server_ip();
  inline void clear_has_server_ip();
  inline void set_has_client_ip();
  inline void clear_has_client_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_reconnet_time();
  inline void clear_has_reconnet_time();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_sdk_web();
  inline void clear_has_sdk_web();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::internal::ArenaStringPtr server_ip_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 thread_num_;
  ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig > con_list_;
  ::fogs::proto::msg::DBConfig* db_;
  ::google::protobuf::internal::ArenaStringPtr sdk_web_;
  ::google::protobuf::uint32 reconnet_time_;
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DBConfig

// optional string name = 1;
inline bool DBConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DBConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.name)
}
inline void DBConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.name)
}
inline void DBConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.name)
}
inline ::std::string* DBConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.name)
}

// optional string ip = 2;
inline bool DBConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBConfig::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& DBConfig::ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.ip)
}
inline void DBConfig::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.ip)
}
inline void DBConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.ip)
}
inline ::std::string* DBConfig::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.ip)
}

// optional uint32 port = 3;
inline bool DBConfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBConfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 DBConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.port)
  return port_;
}
inline void DBConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.port)
}

// optional string user = 4;
inline bool DBConfig::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBConfig::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBConfig::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBConfig::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& DBConfig::user() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.user)
  return user_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.user)
}
inline void DBConfig::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.user)
}
inline void DBConfig::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.user)
}
inline ::std::string* DBConfig::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_user() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.user)
}

// optional string pwd = 5;
inline bool DBConfig::has_pwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBConfig::set_has_pwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBConfig::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBConfig::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pwd();
}
inline const ::std::string& DBConfig::pwd() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.pwd)
  return pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_pwd(const ::std::string& value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.pwd)
}
inline void DBConfig::set_pwd(const char* value) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.DBConfig.pwd)
}
inline void DBConfig::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.DBConfig.pwd)
}
inline ::std::string* DBConfig::mutable_pwd() {
  set_has_pwd();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.DBConfig.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DBConfig::release_pwd() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.DBConfig.pwd)
  clear_has_pwd();
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DBConfig::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    set_has_pwd();
  } else {
    clear_has_pwd();
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.DBConfig.pwd)
}

// optional uint32 table_num = 6;
inline bool DBConfig::has_table_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBConfig::set_has_table_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBConfig::clear_has_table_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBConfig::clear_table_num() {
  table_num_ = 0u;
  clear_has_table_num();
}
inline ::google::protobuf::uint32 DBConfig::table_num() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.table_num)
  return table_num_;
}
inline void DBConfig::set_table_num(::google::protobuf::uint32 value) {
  set_has_table_num();
  table_num_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.table_num)
}

// optional uint32 readtimeout = 7;
inline bool DBConfig::has_readtimeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBConfig::set_has_readtimeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBConfig::clear_has_readtimeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBConfig::clear_readtimeout() {
  readtimeout_ = 0u;
  clear_has_readtimeout();
}
inline ::google::protobuf::uint32 DBConfig::readtimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.readtimeout)
  return readtimeout_;
}
inline void DBConfig::set_readtimeout(::google::protobuf::uint32 value) {
  set_has_readtimeout();
  readtimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.readtimeout)
}

// optional uint32 writetimeout = 8;
inline bool DBConfig::has_writetimeout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBConfig::set_has_writetimeout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBConfig::clear_has_writetimeout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBConfig::clear_writetimeout() {
  writetimeout_ = 0u;
  clear_has_writetimeout();
}
inline ::google::protobuf::uint32 DBConfig::writetimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.writetimeout)
  return writetimeout_;
}
inline void DBConfig::set_writetimeout(::google::protobuf::uint32 value) {
  set_has_writetimeout();
  writetimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.writetimeout)
}

// optional uint32 conntimeout = 9;
inline bool DBConfig::has_conntimeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DBConfig::set_has_conntimeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DBConfig::clear_has_conntimeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DBConfig::clear_conntimeout() {
  conntimeout_ = 0u;
  clear_has_conntimeout();
}
inline ::google::protobuf::uint32 DBConfig::conntimeout() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.DBConfig.conntimeout)
  return conntimeout_;
}
inline void DBConfig::set_conntimeout(::google::protobuf::uint32 value) {
  set_has_conntimeout();
  conntimeout_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.DBConfig.conntimeout)
}

// -------------------------------------------------------------------

// ConServerConfig

// optional string name = 1;
inline bool ConServerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConServerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConServerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConServerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ConServerConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConServerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.name)
}
inline void ConServerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ConServerConfig.name)
}
inline void ConServerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ConServerConfig.name)
}
inline ::std::string* ConServerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ConServerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConServerConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ConServerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConServerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ConServerConfig.name)
}

// optional uint32 type = 2;
inline bool ConServerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConServerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConServerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConServerConfig::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ConServerConfig::type() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.type)
  return type_;
}
inline void ConServerConfig::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.type)
}

// optional uint32 id = 3;
inline bool ConServerConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConServerConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConServerConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConServerConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ConServerConfig::id() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.id)
  return id_;
}
inline void ConServerConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.id)
}

// optional string ip = 4;
inline bool ConServerConfig::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConServerConfig::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConServerConfig::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConServerConfig::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& ConServerConfig::ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConServerConfig::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.ip)
}
inline void ConServerConfig::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ConServerConfig.ip)
}
inline void ConServerConfig::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ConServerConfig.ip)
}
inline ::std::string* ConServerConfig::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ConServerConfig.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConServerConfig::release_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ConServerConfig.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConServerConfig::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ConServerConfig.ip)
}

// optional uint32 port = 5;
inline bool ConServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConServerConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ConServerConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ConServerConfig.port)
  return port_;
}
inline void ConServerConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ConServerConfig.port)
}

// -------------------------------------------------------------------

// ServerConfig

// optional string name = 1;
inline bool ServerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ServerConfig::name() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.name)
}
inline void ServerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.name)
}
inline void ServerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.name)
}
inline ::std::string* ServerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_name() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.name)
}

// optional uint32 type = 2;
inline bool ServerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ServerConfig::type() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.type)
  return type_;
}
inline void ServerConfig::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.type)
}

// optional uint32 id = 3;
inline bool ServerConfig::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ServerConfig::id() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.id)
  return id_;
}
inline void ServerConfig::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.id)
}

// optional string server_ip = 4;
inline bool ServerConfig::has_server_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_server_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_server_ip() {
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_ip();
}
inline const ::std::string& ServerConfig::server_ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.server_ip)
  return server_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_server_ip(const ::std::string& value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.server_ip)
}
inline void ServerConfig::set_server_ip(const char* value) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.server_ip)
}
inline void ServerConfig::set_server_ip(const char* value, size_t size) {
  set_has_server_ip();
  server_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.server_ip)
}
inline ::std::string* ServerConfig::mutable_server_ip() {
  set_has_server_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.server_ip)
  return server_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_server_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.server_ip)
  clear_has_server_ip();
  return server_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_server_ip(::std::string* server_ip) {
  if (server_ip != NULL) {
    set_has_server_ip();
  } else {
    clear_has_server_ip();
  }
  server_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.server_ip)
}

// optional string client_ip = 5;
inline bool ServerConfig::has_client_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_client_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_client_ip() {
  client_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_ip();
}
inline const ::std::string& ServerConfig::client_ip() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.client_ip)
  return client_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_client_ip(const ::std::string& value) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.client_ip)
}
inline void ServerConfig::set_client_ip(const char* value) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.client_ip)
}
inline void ServerConfig::set_client_ip(const char* value, size_t size) {
  set_has_client_ip();
  client_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.client_ip)
}
inline ::std::string* ServerConfig::mutable_client_ip() {
  set_has_client_ip();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.client_ip)
  return client_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_client_ip() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.client_ip)
  clear_has_client_ip();
  return client_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    set_has_client_ip();
  } else {
    clear_has_client_ip();
  }
  client_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.client_ip)
}

// optional uint32 port = 6;
inline bool ServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.port)
  return port_;
}
inline void ServerConfig::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.port)
}

// optional uint32 thread_num = 7;
inline bool ServerConfig::has_thread_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig::set_has_thread_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig::clear_thread_num() {
  thread_num_ = 0u;
  clear_has_thread_num();
}
inline ::google::protobuf::uint32 ServerConfig::thread_num() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.thread_num)
  return thread_num_;
}
inline void ServerConfig::set_thread_num(::google::protobuf::uint32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.thread_num)
}

// optional uint32 reconnet_time = 8;
inline bool ServerConfig::has_reconnet_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig::set_has_reconnet_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig::clear_has_reconnet_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig::clear_reconnet_time() {
  reconnet_time_ = 0u;
  clear_has_reconnet_time();
}
inline ::google::protobuf::uint32 ServerConfig::reconnet_time() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.reconnet_time)
  return reconnet_time_;
}
inline void ServerConfig::set_reconnet_time(::google::protobuf::uint32 value) {
  set_has_reconnet_time();
  reconnet_time_ = value;
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.reconnet_time)
}

// repeated .fogs.proto.msg.ConServerConfig con_list = 9;
inline int ServerConfig::con_list_size() const {
  return con_list_.size();
}
inline void ServerConfig::clear_con_list() {
  con_list_.Clear();
}
inline const ::fogs::proto::msg::ConServerConfig& ServerConfig::con_list(int index) const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Get(index);
}
inline ::fogs::proto::msg::ConServerConfig* ServerConfig::mutable_con_list(int index) {
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Mutable(index);
}
inline ::fogs::proto::msg::ConServerConfig* ServerConfig::add_con_list() {
  // @@protoc_insertion_point(field_add:fogs.proto.msg.ServerConfig.con_list)
  return con_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >*
ServerConfig::mutable_con_list() {
  // @@protoc_insertion_point(field_mutable_list:fogs.proto.msg.ServerConfig.con_list)
  return &con_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fogs::proto::msg::ConServerConfig >&
ServerConfig::con_list() const {
  // @@protoc_insertion_point(field_list:fogs.proto.msg.ServerConfig.con_list)
  return con_list_;
}

// optional .fogs.proto.msg.DBConfig db = 10;
inline bool ServerConfig::has_db() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerConfig::set_has_db() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerConfig::clear_has_db() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerConfig::clear_db() {
  if (db_ != NULL) db_->::fogs::proto::msg::DBConfig::Clear();
  clear_has_db();
}
inline const ::fogs::proto::msg::DBConfig& ServerConfig::db() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.db)
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::fogs::proto::msg::DBConfig* ServerConfig::mutable_db() {
  set_has_db();
  if (db_ == NULL) {
    db_ = new ::fogs::proto::msg::DBConfig;
  }
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.db)
  return db_;
}
inline ::fogs::proto::msg::DBConfig* ServerConfig::release_db() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.db)
  clear_has_db();
  ::fogs::proto::msg::DBConfig* temp = db_;
  db_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_db(::fogs::proto::msg::DBConfig* db) {
  delete db_;
  db_ = db;
  if (db) {
    set_has_db();
  } else {
    clear_has_db();
  }
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.db)
}

// optional string sdk_web = 11;
inline bool ServerConfig::has_sdk_web() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerConfig::set_has_sdk_web() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerConfig::clear_has_sdk_web() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerConfig::clear_sdk_web() {
  sdk_web_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdk_web();
}
inline const ::std::string& ServerConfig::sdk_web() const {
  // @@protoc_insertion_point(field_get:fogs.proto.msg.ServerConfig.sdk_web)
  return sdk_web_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_sdk_web(const ::std::string& value) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fogs.proto.msg.ServerConfig.sdk_web)
}
inline void ServerConfig::set_sdk_web(const char* value) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fogs.proto.msg.ServerConfig.sdk_web)
}
inline void ServerConfig::set_sdk_web(const char* value, size_t size) {
  set_has_sdk_web();
  sdk_web_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fogs.proto.msg.ServerConfig.sdk_web)
}
inline ::std::string* ServerConfig::mutable_sdk_web() {
  set_has_sdk_web();
  // @@protoc_insertion_point(field_mutable:fogs.proto.msg.ServerConfig.sdk_web)
  return sdk_web_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_sdk_web() {
  // @@protoc_insertion_point(field_release:fogs.proto.msg.ServerConfig.sdk_web)
  clear_has_sdk_web();
  return sdk_web_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_sdk_web(::std::string* sdk_web) {
  if (sdk_web != NULL) {
    set_has_sdk_web();
  } else {
    clear_has_sdk_web();
  }
  sdk_web_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_web);
  // @@protoc_insertion_point(field_set_allocated:fogs.proto.msg.ServerConfig.sdk_web)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace proto
}  // namespace fogs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fconfig_2eproto__INCLUDED
