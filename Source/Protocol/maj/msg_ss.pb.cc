// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_ss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_ss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_maj {

namespace {

const ::google::protobuf::Descriptor* LoginToScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginToScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginTokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginTokenNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRobotJoinRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRobotJoinRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerBrepairingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerBrepairingNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransterToSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransterToSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransterToSceneResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransterToSceneResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_cmd_ss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RouteType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fss_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fss_2eproto() {
  protobuf_AddDesc_msg_5fss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_ss.proto");
  GOOGLE_CHECK(file != NULL);
  LoginToScene_descriptor_ = file->message_type(0);
  static const int LoginToScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, repeat_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, new_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, join_room_id_),
  };
  LoginToScene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginToScene_descriptor_,
      LoginToScene::default_instance_,
      LoginToScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginToScene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToScene, _internal_metadata_),
      -1);
  LoginToken_descriptor_ = file->message_type(1);
  static const int LoginToken_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, ip_),
  };
  LoginToken_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginToken_descriptor_,
      LoginToken::default_instance_,
      LoginToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginToken),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginToken, _internal_metadata_),
      -1);
  LoginTokenNotify_descriptor_ = file->message_type(2);
  static const int LoginTokenNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginTokenNotify, acctoken_),
  };
  LoginTokenNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginTokenNotify_descriptor_,
      LoginTokenNotify::default_instance_,
      LoginTokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginTokenNotify, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginTokenNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginTokenNotify, _internal_metadata_),
      -1);
  KickSession_descriptor_ = file->message_type(3);
  static const int KickSession_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickSession, session_id_),
  };
  KickSession_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KickSession_descriptor_,
      KickSession::default_instance_,
      KickSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickSession, _has_bits_[0]),
      -1,
      -1,
      sizeof(KickSession),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickSession, _internal_metadata_),
      -1);
  ReqRobotJoinRoom_descriptor_ = file->message_type(4);
  static const int ReqRobotJoinRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRobotJoinRoom, room_id_),
  };
  ReqRobotJoinRoom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRobotJoinRoom_descriptor_,
      ReqRobotJoinRoom::default_instance_,
      ReqRobotJoinRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRobotJoinRoom, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqRobotJoinRoom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRobotJoinRoom, _internal_metadata_),
      -1);
  ServerBrepairingNotify_descriptor_ = file->message_type(5);
  static const int ServerBrepairingNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBrepairingNotify, status_),
  };
  ServerBrepairingNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerBrepairingNotify_descriptor_,
      ServerBrepairingNotify::default_instance_,
      ServerBrepairingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBrepairingNotify, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerBrepairingNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerBrepairingNotify, _internal_metadata_),
      -1);
  RouteHead_descriptor_ = file->message_type(6);
  static const int RouteHead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteHead, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteHead, to_id_),
  };
  RouteHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteHead_descriptor_,
      RouteHead::default_instance_,
      RouteHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteHead, _has_bits_[0]),
      -1,
      -1,
      sizeof(RouteHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteHead, _internal_metadata_),
      -1);
  TransterToSceneReq_descriptor_ = file->message_type(7);
  static const int TransterToSceneReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneReq, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneReq, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneReq, role_list_),
  };
  TransterToSceneReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransterToSceneReq_descriptor_,
      TransterToSceneReq::default_instance_,
      TransterToSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransterToSceneReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneReq, _internal_metadata_),
      -1);
  TransterToSceneResp_descriptor_ = file->message_type(8);
  static const int TransterToSceneResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneResp, head_),
  };
  TransterToSceneResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransterToSceneResp_descriptor_,
      TransterToSceneResp::default_instance_,
      TransterToSceneResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(TransterToSceneResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransterToSceneResp, _internal_metadata_),
      -1);
  c_cmd_ss_descriptor_ = file->enum_type(0);
  RouteType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginToScene_descriptor_, &LoginToScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginToken_descriptor_, &LoginToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginTokenNotify_descriptor_, &LoginTokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KickSession_descriptor_, &KickSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRobotJoinRoom_descriptor_, &ReqRobotJoinRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerBrepairingNotify_descriptor_, &ServerBrepairingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteHead_descriptor_, &RouteHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransterToSceneReq_descriptor_, &TransterToSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransterToSceneResp_descriptor_, &TransterToSceneResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fss_2eproto() {
  delete LoginToScene::default_instance_;
  delete LoginToScene_reflection_;
  delete LoginToken::default_instance_;
  delete LoginToken_reflection_;
  delete LoginTokenNotify::default_instance_;
  delete LoginTokenNotify_reflection_;
  delete KickSession::default_instance_;
  delete KickSession_reflection_;
  delete ReqRobotJoinRoom::default_instance_;
  delete ReqRobotJoinRoom_reflection_;
  delete ServerBrepairingNotify::default_instance_;
  delete ServerBrepairingNotify_reflection_;
  delete RouteHead::default_instance_;
  delete RouteHead_reflection_;
  delete TransterToSceneReq::default_instance_;
  delete TransterToSceneReq_reflection_;
  delete TransterToSceneResp::default_instance_;
  delete TransterToSceneResp_reflection_;
}

void protobuf_AddDesc_msg_5fss_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5fss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::msg_maj::protobuf_AddDesc_msg_5frole_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014msg_ss.proto\022\007msg_maj\032\016msg_role.proto\""
    "_\n\014LoginToScene\022\013\n\003uid\030\001 \001(\004\022\024\n\014repeat_l"
    "ogin\030\002 \001(\010\022\026\n\016new_session_id\030\003 \001(\r\022\024\n\014jo"
    "in_room_id\030\004 \001(\r\"\235\001\n\nLoginToken\022\016\n\006openi"
    "d\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\013\n\003sex\030\003 \001(\005\022\020"
    "\n\010province\030\004 \001(\t\022\014\n\004city\030\005 \001(\t\022\017\n\007countr"
    "y\030\006 \001(\t\022\022\n\nheadimgurl\030\007 \001(\t\022\017\n\007unionid\030\010"
    " \001(\t\022\n\n\002ip\030\t \001(\t\"9\n\020LoginTokenNotify\022%\n\010"
    "acctoken\030\001 \001(\0132\023.msg_maj.LoginToken\"!\n\013K"
    "ickSession\022\022\n\nsession_id\030\001 \001(\004\"#\n\020ReqRob"
    "otJoinRoom\022\017\n\007room_id\030\001 \001(\005\"(\n\026ServerBre"
    "pairingNotify\022\016\n\006status\030\001 \001(\005\"+\n\tRouteHe"
    "ad\022\017\n\007from_id\030\001 \002(\005\022\r\n\005to_id\030\002 \002(\005\"V\n\022Tr"
    "ansterToSceneReq\022\017\n\007from_id\030\001 \002(\005\022\r\n\005to_"
    "id\030\002 \002(\005\022 \n\trole_list\030\003 \003(\0132\r.msg_maj.Ro"
    "le\"7\n\023TransterToSceneResp\022 \n\004head\030\001 \001(\0132"
    "\022.msg_maj.RouteHead*\204\017\n\010c_cmd_ss\022\026\n\022logi"
    "n_to_scene_req\020\001\022\031\n\025QueryPlayerResponseI"
    "D\020\002\022\027\n\023QueryMailResponseID\020\005\022\035\n\031QueryMai"
    "lSysLogResponseID\020\006\022\030\n\024GetMaxUUIDRespons"
    "eID\020\007\022\022\n\016SendRoomCardID\020\010\022\026\n\022SendEditRoo"
    "mCardID\020\t\022\016\n\nSendMailID\020\n\022\020\n\014SendNoticeI"
    "D\020\013\022\022\n\016DeleteNoticeID\020\014\022\023\n\017SendBlockUser"
    "ID\020\r\022\030\n\024SessionAccountNameID\020\016\022\024\n\020Update"
    "RoomInfoID\020\017\022\026\n\022ChangeGameServerID\020\020\022\035\n\031"
    "ZhanjiQueryListResponseID\020\021\022\035\n\031ZhanjiRes"
    "pReplyResponseID\020\022\022\030\n\024NotifyOnConnection"
    "ID\020\023\022\027\n\023VerifyPaiResponseID\020\024\022\026\n\022ReloadC"
    "onfigFormID\020\025\022\026\n\022HandshakeRequestID\020\027\022\030\n"
    "\024QueryPlayerRequestID\020\030\022\027\n\023SavePlayerDat"
    "aReqID\020\031\022\034\n\030ZhanJiRecordAddRequestID\020\032\022\031"
    "\n\025ZhanJiFinishRequestID\020\033\022\034\n\030ZhanjiQuery"
    "ListRequestID\020\034\022\035\n\031ZhanjiQueryReplyReque"
    "stID\020\035\022\026\n\022QueryMailRequestID\020\036\022\025\n\021SaveMa"
    "ilRequestID\020\037\022\027\n\023GetMaxUUIDRequestID\020 \022\026"
    "\n\022RechargeRoomCardID\020!\022\034\n\030QueryMailSysLo"
    "gRequestID\020\"\022\033\n\027SaveMailSysLogRequestID\020"
    "#\022\027\n\023UpdateRankRequestID\020$\022\034\n\030InnRecordA"
    "ddLogRequestID\020%\022\023\n\017UpdateFepUserID\020&\022\034\n"
    "\030UpdateRankSortResponseID\020\'\022\026\n\022QueryRank"
    "RequestID\020(\022\027\n\023QueryRankResponseID\020)\022\034\n\030"
    "QueryAdminFindUserInfoID\0203\022\031\n\025SaveMoneyL"
    "ogRequestID\020<\022\026\n\022SaveOnlinePlayerID\020=\022\034\n"
    "\030ZhanjiQueryRoomRequestID\020>\022\035\n\031ZhanjiQue"
    "ryRoomResponseID\020\?\022\033\n\027ZhanjiQueryInnRequ"
    "estID\020@\022\034\n\030ZhanjiQueryInnResponseID\020A\022\026\n"
    "\022GetFreeConfigReqID\020B\022\027\n\023GetFreeConfigRe"
    "spID\020C\022\030\n\024GetRewardConfigReqID\020D\022\031\n\025GetR"
    "ewardConfigRespID\020E\022\030\n\024GetNotifyConfigRe"
    "qID\020F\022\031\n\025GetNotifyConfigRespID\020G\022\031\n\025GetR"
    "oomSetConfigReqID\020H\022\032\n\026GetRoomSetConfigR"
    "espID\020I\022\026\n\022RespEditRoomCardID\020L\022\026\n\022RespS"
    "endRoomCardID\020M\022\022\n\016SendFindUserID\020N\022\022\n\016R"
    "espFindUserID\020O\022\024\n\020SendFindOnlineID\020P\022\024\n"
    "\020RespFindOnlineID\020Q\022\034\n\030GetBindingAgentIn"
    "foReqID\020R\022\035\n\031GetBindingAgentInfoRespID\020S"
    "\022\025\n\021BindingAgentReqID\020T\022\026\n\022BindingAgentR"
    "espID\020U\022\023\n\017RefreshConfigID\020V\022\021\n\rRefreshF"
    "reeID\020W\022\030\n\024InputInviteCodeReqID\020Z\022\031\n\025Inp"
    "utInviteCodeRespID\020[\022\026\n\022LoginTokenNotify"
    "ID\020d\022\027\n\023req_robot_join_room\020n\022\022\n\016UserEdi"
    "tCardID\020o\022\027\n\023SaveRoomOptionReqID\020p\022\031\n\025Up"
    "dateRoomOptionReqID\020q\022\036\n\032ServerIsBrepair"
    "ingNotifyID\020r\022\030\n\024TransterToSceneReqID\020s\022"
    "\031\n\025TransterToSceneRespID\020t*\034\n\tRouteType\022"
    "\017\n\013route_t_sws\020\001", 2616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_ss.proto", &protobuf_RegisterTypes);
  LoginToScene::default_instance_ = new LoginToScene();
  LoginToken::default_instance_ = new LoginToken();
  LoginTokenNotify::default_instance_ = new LoginTokenNotify();
  KickSession::default_instance_ = new KickSession();
  ReqRobotJoinRoom::default_instance_ = new ReqRobotJoinRoom();
  ServerBrepairingNotify::default_instance_ = new ServerBrepairingNotify();
  RouteHead::default_instance_ = new RouteHead();
  TransterToSceneReq::default_instance_ = new TransterToSceneReq();
  TransterToSceneResp::default_instance_ = new TransterToSceneResp();
  LoginToScene::default_instance_->InitAsDefaultInstance();
  LoginToken::default_instance_->InitAsDefaultInstance();
  LoginTokenNotify::default_instance_->InitAsDefaultInstance();
  KickSession::default_instance_->InitAsDefaultInstance();
  ReqRobotJoinRoom::default_instance_->InitAsDefaultInstance();
  ServerBrepairingNotify::default_instance_->InitAsDefaultInstance();
  RouteHead::default_instance_->InitAsDefaultInstance();
  TransterToSceneReq::default_instance_->InitAsDefaultInstance();
  TransterToSceneResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fss_2eproto {
  StaticDescriptorInitializer_msg_5fss_2eproto() {
    protobuf_AddDesc_msg_5fss_2eproto();
  }
} static_descriptor_initializer_msg_5fss_2eproto_;
const ::google::protobuf::EnumDescriptor* c_cmd_ss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_cmd_ss_descriptor_;
}
bool c_cmd_ss_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 51:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 90:
    case 91:
    case 100:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteType_descriptor_;
}
bool RouteType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginToScene::kUidFieldNumber;
const int LoginToScene::kRepeatLoginFieldNumber;
const int LoginToScene::kNewSessionIdFieldNumber;
const int LoginToScene::kJoinRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginToScene::LoginToScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginToScene)
}

void LoginToScene::InitAsDefaultInstance() {
}

LoginToScene::LoginToScene(const LoginToScene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginToScene)
}

void LoginToScene::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  repeat_login_ = false;
  new_session_id_ = 0u;
  join_room_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginToScene::~LoginToScene() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginToScene)
  SharedDtor();
}

void LoginToScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginToScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginToScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginToScene_descriptor_;
}

const LoginToScene& LoginToScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

LoginToScene* LoginToScene::default_instance_ = NULL;

LoginToScene* LoginToScene::New(::google::protobuf::Arena* arena) const {
  LoginToScene* n = new LoginToScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginToScene::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginToScene)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginToScene, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginToScene*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, join_room_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginToScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginToScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeat_login;
        break;
      }

      // optional bool repeat_login = 2;
      case 2: {
        if (tag == 16) {
         parse_repeat_login:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &repeat_login_)));
          set_has_repeat_login();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_new_session_id;
        break;
      }

      // optional uint32 new_session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_new_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_session_id_)));
          set_has_new_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_join_room_id;
        break;
      }

      // optional uint32 join_room_id = 4;
      case 4: {
        if (tag == 32) {
         parse_join_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_room_id_)));
          set_has_join_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginToScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginToScene)
  return false;
#undef DO_
}

void LoginToScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginToScene)
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bool repeat_login = 2;
  if (has_repeat_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->repeat_login(), output);
  }

  // optional uint32 new_session_id = 3;
  if (has_new_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->new_session_id(), output);
  }

  // optional uint32 join_room_id = 4;
  if (has_join_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->join_room_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginToScene)
}

::google::protobuf::uint8* LoginToScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginToScene)
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bool repeat_login = 2;
  if (has_repeat_login()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->repeat_login(), target);
  }

  // optional uint32 new_session_id = 3;
  if (has_new_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->new_session_id(), target);
  }

  // optional uint32 join_room_id = 4;
  if (has_join_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->join_room_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginToScene)
  return target;
}

int LoginToScene::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginToScene)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional bool repeat_login = 2;
    if (has_repeat_login()) {
      total_size += 1 + 1;
    }

    // optional uint32 new_session_id = 3;
    if (has_new_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_session_id());
    }

    // optional uint32 join_room_id = 4;
    if (has_join_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_room_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginToScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginToScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginToScene* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginToScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginToScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginToScene)
    MergeFrom(*source);
  }
}

void LoginToScene::MergeFrom(const LoginToScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginToScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_repeat_login()) {
      set_repeat_login(from.repeat_login());
    }
    if (from.has_new_session_id()) {
      set_new_session_id(from.new_session_id());
    }
    if (from.has_join_room_id()) {
      set_join_room_id(from.join_room_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginToScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginToScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginToScene::CopyFrom(const LoginToScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginToScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginToScene::IsInitialized() const {

  return true;
}

void LoginToScene::Swap(LoginToScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginToScene::InternalSwap(LoginToScene* other) {
  std::swap(uid_, other->uid_);
  std::swap(repeat_login_, other->repeat_login_);
  std::swap(new_session_id_, other->new_session_id_);
  std::swap(join_room_id_, other->join_room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginToScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginToScene_descriptor_;
  metadata.reflection = LoginToScene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginToScene

// optional uint64 uid = 1;
bool LoginToScene::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginToScene::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginToScene::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginToScene::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 LoginToScene::uid() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToScene.uid)
  return uid_;
}
 void LoginToScene::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginToScene.uid)
}

// optional bool repeat_login = 2;
bool LoginToScene::has_repeat_login() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginToScene::set_has_repeat_login() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginToScene::clear_has_repeat_login() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginToScene::clear_repeat_login() {
  repeat_login_ = false;
  clear_has_repeat_login();
}
 bool LoginToScene::repeat_login() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToScene.repeat_login)
  return repeat_login_;
}
 void LoginToScene::set_repeat_login(bool value) {
  set_has_repeat_login();
  repeat_login_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginToScene.repeat_login)
}

// optional uint32 new_session_id = 3;
bool LoginToScene::has_new_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginToScene::set_has_new_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginToScene::clear_has_new_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginToScene::clear_new_session_id() {
  new_session_id_ = 0u;
  clear_has_new_session_id();
}
 ::google::protobuf::uint32 LoginToScene::new_session_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToScene.new_session_id)
  return new_session_id_;
}
 void LoginToScene::set_new_session_id(::google::protobuf::uint32 value) {
  set_has_new_session_id();
  new_session_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginToScene.new_session_id)
}

// optional uint32 join_room_id = 4;
bool LoginToScene::has_join_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginToScene::set_has_join_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginToScene::clear_has_join_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginToScene::clear_join_room_id() {
  join_room_id_ = 0u;
  clear_has_join_room_id();
}
 ::google::protobuf::uint32 LoginToScene::join_room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToScene.join_room_id)
  return join_room_id_;
}
 void LoginToScene::set_join_room_id(::google::protobuf::uint32 value) {
  set_has_join_room_id();
  join_room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginToScene.join_room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginToken::kOpenidFieldNumber;
const int LoginToken::kNicknameFieldNumber;
const int LoginToken::kSexFieldNumber;
const int LoginToken::kProvinceFieldNumber;
const int LoginToken::kCityFieldNumber;
const int LoginToken::kCountryFieldNumber;
const int LoginToken::kHeadimgurlFieldNumber;
const int LoginToken::kUnionidFieldNumber;
const int LoginToken::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginToken::LoginToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginToken)
}

void LoginToken::InitAsDefaultInstance() {
}

LoginToken::LoginToken(const LoginToken& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginToken)
}

void LoginToken::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginToken::~LoginToken() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginToken)
  SharedDtor();
}

void LoginToken::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginToken_descriptor_;
}

const LoginToken& LoginToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

LoginToken* LoginToken::default_instance_ = NULL;

LoginToken* LoginToken::New(::google::protobuf::Arena* arena) const {
  LoginToken* n = new LoginToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginToken::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginToken)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sex_ = 0;
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_headimgurl()) {
      headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_unionid()) {
      unionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_ip()) {
    ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_province;
        break;
      }

      // optional string province = 4;
      case 4: {
        if (tag == 34) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (tag == 50) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headimgurl;
        break;
      }

      // optional string headimgurl = 7;
      case 7: {
        if (tag == 58) {
         parse_headimgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.headimgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unionid;
        break;
      }

      // optional string unionid = 8;
      case 8: {
        if (tag == 66) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ip;
        break;
      }

      // optional string ip = 9;
      case 9: {
        if (tag == 74) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.LoginToken.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginToken)
  return false;
#undef DO_
}

void LoginToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginToken)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->province(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country(), output);
  }

  // optional string headimgurl = 7;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.headimgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->headimgurl(), output);
  }

  // optional string unionid = 8;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unionid(), output);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginToken)
}

::google::protobuf::uint8* LoginToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginToken)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->province(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string headimgurl = 7;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.headimgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->headimgurl(), target);
  }

  // optional string unionid = 8;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unionid(), target);
  }

  // optional string ip = 9;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.LoginToken.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginToken)
  return target;
}

int LoginToken::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginToken)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string province = 4;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string headimgurl = 7;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional string unionid = 8;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  // optional string ip = 9;
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginToken)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginToken* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginToken)
    MergeFrom(*source);
  }
}

void LoginToken::MergeFrom(const LoginToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginToken)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_headimgurl()) {
      set_has_headimgurl();
      headimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgurl_);
    }
    if (from.has_unionid()) {
      set_has_unionid();
      unionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unionid_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginToken::CopyFrom(const LoginToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginToken::IsInitialized() const {

  return true;
}

void LoginToken::Swap(LoginToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginToken::InternalSwap(LoginToken* other) {
  openid_.Swap(&other->openid_);
  nickname_.Swap(&other->nickname_);
  std::swap(sex_, other->sex_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  country_.Swap(&other->country_);
  headimgurl_.Swap(&other->headimgurl_);
  unionid_.Swap(&other->unionid_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginToken_descriptor_;
  metadata.reflection = LoginToken_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginToken

// optional string openid = 1;
bool LoginToken::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginToken::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginToken::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginToken::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& LoginToken::openid() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.openid)
}
 void LoginToken::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.openid)
}
 void LoginToken::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.openid)
}
 ::std::string* LoginToken::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_openid() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.openid)
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.openid)
}

// optional string nickname = 2;
bool LoginToken::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginToken::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginToken::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginToken::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& LoginToken::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.nickname)
}
 void LoginToken::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.nickname)
}
 void LoginToken::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.nickname)
}
 ::std::string* LoginToken::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.nickname)
}

// optional int32 sex = 3;
bool LoginToken::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginToken::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginToken::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginToken::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
 ::google::protobuf::int32 LoginToken::sex() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.sex)
  return sex_;
}
 void LoginToken::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.sex)
}

// optional string province = 4;
bool LoginToken::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LoginToken::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
void LoginToken::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
void LoginToken::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& LoginToken::province() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.province)
}
 void LoginToken::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.province)
}
 void LoginToken::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.province)
}
 ::std::string* LoginToken::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_province() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.province)
}

// optional string city = 5;
bool LoginToken::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LoginToken::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
void LoginToken::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
void LoginToken::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& LoginToken::city() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.city)
}
 void LoginToken::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.city)
}
 void LoginToken::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.city)
}
 ::std::string* LoginToken::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_city() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.city)
}

// optional string country = 6;
bool LoginToken::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LoginToken::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
void LoginToken::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
void LoginToken::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& LoginToken::country() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.country)
}
 void LoginToken::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.country)
}
 void LoginToken::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.country)
}
 ::std::string* LoginToken::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_country() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.country)
}

// optional string headimgurl = 7;
bool LoginToken::has_headimgurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LoginToken::set_has_headimgurl() {
  _has_bits_[0] |= 0x00000040u;
}
void LoginToken::clear_has_headimgurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void LoginToken::clear_headimgurl() {
  headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgurl();
}
 const ::std::string& LoginToken::headimgurl() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.headimgurl)
  return headimgurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_headimgurl(const ::std::string& value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.headimgurl)
}
 void LoginToken::set_headimgurl(const char* value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.headimgurl)
}
 void LoginToken::set_headimgurl(const char* value, size_t size) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.headimgurl)
}
 ::std::string* LoginToken::mutable_headimgurl() {
  set_has_headimgurl();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.headimgurl)
  return headimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_headimgurl() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.headimgurl)
  clear_has_headimgurl();
  return headimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl != NULL) {
    set_has_headimgurl();
  } else {
    clear_has_headimgurl();
  }
  headimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgurl);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.headimgurl)
}

// optional string unionid = 8;
bool LoginToken::has_unionid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LoginToken::set_has_unionid() {
  _has_bits_[0] |= 0x00000080u;
}
void LoginToken::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000080u;
}
void LoginToken::clear_unionid() {
  unionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unionid();
}
 const ::std::string& LoginToken::unionid() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.unionid)
  return unionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_unionid(const ::std::string& value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.unionid)
}
 void LoginToken::set_unionid(const char* value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.unionid)
}
 void LoginToken::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.unionid)
}
 ::std::string* LoginToken::mutable_unionid() {
  set_has_unionid();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.unionid)
  return unionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_unionid() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.unionid)
  clear_has_unionid();
  return unionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_unionid(::std::string* unionid) {
  if (unionid != NULL) {
    set_has_unionid();
  } else {
    clear_has_unionid();
  }
  unionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unionid);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.unionid)
}

// optional string ip = 9;
bool LoginToken::has_ip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LoginToken::set_has_ip() {
  _has_bits_[0] |= 0x00000100u;
}
void LoginToken::clear_has_ip() {
  _has_bits_[0] &= ~0x00000100u;
}
void LoginToken::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& LoginToken::ip() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginToken.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.LoginToken.ip)
}
 void LoginToken::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.LoginToken.ip)
}
 void LoginToken::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.LoginToken.ip)
}
 ::std::string* LoginToken::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginToken.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginToken::release_ip() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginToken.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginToken::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginToken.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginTokenNotify::kAcctokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginTokenNotify::LoginTokenNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.LoginTokenNotify)
}

void LoginTokenNotify::InitAsDefaultInstance() {
  acctoken_ = const_cast< ::msg_maj::LoginToken*>(&::msg_maj::LoginToken::default_instance());
}

LoginTokenNotify::LoginTokenNotify(const LoginTokenNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.LoginTokenNotify)
}

void LoginTokenNotify::SharedCtor() {
  _cached_size_ = 0;
  acctoken_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginTokenNotify::~LoginTokenNotify() {
  // @@protoc_insertion_point(destructor:msg_maj.LoginTokenNotify)
  SharedDtor();
}

void LoginTokenNotify::SharedDtor() {
  if (this != default_instance_) {
    delete acctoken_;
  }
}

void LoginTokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginTokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginTokenNotify_descriptor_;
}

const LoginTokenNotify& LoginTokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

LoginTokenNotify* LoginTokenNotify::default_instance_ = NULL;

LoginTokenNotify* LoginTokenNotify::New(::google::protobuf::Arena* arena) const {
  LoginTokenNotify* n = new LoginTokenNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginTokenNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.LoginTokenNotify)
  if (has_acctoken()) {
    if (acctoken_ != NULL) acctoken_->::msg_maj::LoginToken::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginTokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.LoginTokenNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg_maj.LoginToken acctoken = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acctoken()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.LoginTokenNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.LoginTokenNotify)
  return false;
#undef DO_
}

void LoginTokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.LoginTokenNotify)
  // optional .msg_maj.LoginToken acctoken = 1;
  if (has_acctoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->acctoken_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.LoginTokenNotify)
}

::google::protobuf::uint8* LoginTokenNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.LoginTokenNotify)
  // optional .msg_maj.LoginToken acctoken = 1;
  if (has_acctoken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->acctoken_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.LoginTokenNotify)
  return target;
}

int LoginTokenNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.LoginTokenNotify)
  int total_size = 0;

  // optional .msg_maj.LoginToken acctoken = 1;
  if (has_acctoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acctoken_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginTokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.LoginTokenNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginTokenNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginTokenNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.LoginTokenNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.LoginTokenNotify)
    MergeFrom(*source);
  }
}

void LoginTokenNotify::MergeFrom(const LoginTokenNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.LoginTokenNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acctoken()) {
      mutable_acctoken()->::msg_maj::LoginToken::MergeFrom(from.acctoken());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginTokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.LoginTokenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginTokenNotify::CopyFrom(const LoginTokenNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.LoginTokenNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginTokenNotify::IsInitialized() const {

  return true;
}

void LoginTokenNotify::Swap(LoginTokenNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginTokenNotify::InternalSwap(LoginTokenNotify* other) {
  std::swap(acctoken_, other->acctoken_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginTokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginTokenNotify_descriptor_;
  metadata.reflection = LoginTokenNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginTokenNotify

// optional .msg_maj.LoginToken acctoken = 1;
bool LoginTokenNotify::has_acctoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginTokenNotify::set_has_acctoken() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginTokenNotify::clear_has_acctoken() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginTokenNotify::clear_acctoken() {
  if (acctoken_ != NULL) acctoken_->::msg_maj::LoginToken::Clear();
  clear_has_acctoken();
}
const ::msg_maj::LoginToken& LoginTokenNotify::acctoken() const {
  // @@protoc_insertion_point(field_get:msg_maj.LoginTokenNotify.acctoken)
  return acctoken_ != NULL ? *acctoken_ : *default_instance_->acctoken_;
}
::msg_maj::LoginToken* LoginTokenNotify::mutable_acctoken() {
  set_has_acctoken();
  if (acctoken_ == NULL) {
    acctoken_ = new ::msg_maj::LoginToken;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.LoginTokenNotify.acctoken)
  return acctoken_;
}
::msg_maj::LoginToken* LoginTokenNotify::release_acctoken() {
  // @@protoc_insertion_point(field_release:msg_maj.LoginTokenNotify.acctoken)
  clear_has_acctoken();
  ::msg_maj::LoginToken* temp = acctoken_;
  acctoken_ = NULL;
  return temp;
}
void LoginTokenNotify::set_allocated_acctoken(::msg_maj::LoginToken* acctoken) {
  delete acctoken_;
  acctoken_ = acctoken;
  if (acctoken) {
    set_has_acctoken();
  } else {
    clear_has_acctoken();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.LoginTokenNotify.acctoken)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KickSession::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KickSession::KickSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.KickSession)
}

void KickSession::InitAsDefaultInstance() {
}

KickSession::KickSession(const KickSession& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.KickSession)
}

void KickSession::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickSession::~KickSession() {
  // @@protoc_insertion_point(destructor:msg_maj.KickSession)
  SharedDtor();
}

void KickSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickSession_descriptor_;
}

const KickSession& KickSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

KickSession* KickSession::default_instance_ = NULL;

KickSession* KickSession::New(::google::protobuf::Arena* arena) const {
  KickSession* n = new KickSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KickSession::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.KickSession)
  session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KickSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.KickSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.KickSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.KickSession)
  return false;
#undef DO_
}

void KickSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.KickSession)
  // optional uint64 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.KickSession)
}

::google::protobuf::uint8* KickSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.KickSession)
  // optional uint64 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.KickSession)
  return target;
}

int KickSession::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.KickSession)
  int total_size = 0;

  // optional uint64 session_id = 1;
  if (has_session_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->session_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.KickSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KickSession* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KickSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.KickSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.KickSession)
    MergeFrom(*source);
  }
}

void KickSession::MergeFrom(const KickSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.KickSession)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KickSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.KickSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickSession::CopyFrom(const KickSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.KickSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickSession::IsInitialized() const {

  return true;
}

void KickSession::Swap(KickSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KickSession::InternalSwap(KickSession* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KickSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickSession_descriptor_;
  metadata.reflection = KickSession_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KickSession

// optional uint64 session_id = 1;
bool KickSession::has_session_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KickSession::set_has_session_id() {
  _has_bits_[0] |= 0x00000001u;
}
void KickSession::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void KickSession::clear_session_id() {
  session_id_ = GOOGLE_ULONGLONG(0);
  clear_has_session_id();
}
 ::google::protobuf::uint64 KickSession::session_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.KickSession.session_id)
  return session_id_;
}
 void KickSession::set_session_id(::google::protobuf::uint64 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.KickSession.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRobotJoinRoom::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRobotJoinRoom::ReqRobotJoinRoom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ReqRobotJoinRoom)
}

void ReqRobotJoinRoom::InitAsDefaultInstance() {
}

ReqRobotJoinRoom::ReqRobotJoinRoom(const ReqRobotJoinRoom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ReqRobotJoinRoom)
}

void ReqRobotJoinRoom::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRobotJoinRoom::~ReqRobotJoinRoom() {
  // @@protoc_insertion_point(destructor:msg_maj.ReqRobotJoinRoom)
  SharedDtor();
}

void ReqRobotJoinRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRobotJoinRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRobotJoinRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRobotJoinRoom_descriptor_;
}

const ReqRobotJoinRoom& ReqRobotJoinRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

ReqRobotJoinRoom* ReqRobotJoinRoom::default_instance_ = NULL;

ReqRobotJoinRoom* ReqRobotJoinRoom::New(::google::protobuf::Arena* arena) const {
  ReqRobotJoinRoom* n = new ReqRobotJoinRoom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRobotJoinRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ReqRobotJoinRoom)
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqRobotJoinRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ReqRobotJoinRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 room_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ReqRobotJoinRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ReqRobotJoinRoom)
  return false;
#undef DO_
}

void ReqRobotJoinRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ReqRobotJoinRoom)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ReqRobotJoinRoom)
}

::google::protobuf::uint8* ReqRobotJoinRoom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ReqRobotJoinRoom)
  // optional int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ReqRobotJoinRoom)
  return target;
}

int ReqRobotJoinRoom::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ReqRobotJoinRoom)
  int total_size = 0;

  // optional int32 room_id = 1;
  if (has_room_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRobotJoinRoom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ReqRobotJoinRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqRobotJoinRoom* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRobotJoinRoom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ReqRobotJoinRoom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ReqRobotJoinRoom)
    MergeFrom(*source);
  }
}

void ReqRobotJoinRoom::MergeFrom(const ReqRobotJoinRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ReqRobotJoinRoom)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqRobotJoinRoom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ReqRobotJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRobotJoinRoom::CopyFrom(const ReqRobotJoinRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ReqRobotJoinRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRobotJoinRoom::IsInitialized() const {

  return true;
}

void ReqRobotJoinRoom::Swap(ReqRobotJoinRoom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRobotJoinRoom::InternalSwap(ReqRobotJoinRoom* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRobotJoinRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRobotJoinRoom_descriptor_;
  metadata.reflection = ReqRobotJoinRoom_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRobotJoinRoom

// optional int32 room_id = 1;
bool ReqRobotJoinRoom::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqRobotJoinRoom::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqRobotJoinRoom::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqRobotJoinRoom::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
 ::google::protobuf::int32 ReqRobotJoinRoom::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReqRobotJoinRoom.room_id)
  return room_id_;
}
 void ReqRobotJoinRoom::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReqRobotJoinRoom.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerBrepairingNotify::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerBrepairingNotify::ServerBrepairingNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ServerBrepairingNotify)
}

void ServerBrepairingNotify::InitAsDefaultInstance() {
}

ServerBrepairingNotify::ServerBrepairingNotify(const ServerBrepairingNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ServerBrepairingNotify)
}

void ServerBrepairingNotify::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerBrepairingNotify::~ServerBrepairingNotify() {
  // @@protoc_insertion_point(destructor:msg_maj.ServerBrepairingNotify)
  SharedDtor();
}

void ServerBrepairingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerBrepairingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerBrepairingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerBrepairingNotify_descriptor_;
}

const ServerBrepairingNotify& ServerBrepairingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

ServerBrepairingNotify* ServerBrepairingNotify::default_instance_ = NULL;

ServerBrepairingNotify* ServerBrepairingNotify::New(::google::protobuf::Arena* arena) const {
  ServerBrepairingNotify* n = new ServerBrepairingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerBrepairingNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ServerBrepairingNotify)
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerBrepairingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ServerBrepairingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ServerBrepairingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ServerBrepairingNotify)
  return false;
#undef DO_
}

void ServerBrepairingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ServerBrepairingNotify)
  // optional int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ServerBrepairingNotify)
}

::google::protobuf::uint8* ServerBrepairingNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ServerBrepairingNotify)
  // optional int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ServerBrepairingNotify)
  return target;
}

int ServerBrepairingNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ServerBrepairingNotify)
  int total_size = 0;

  // optional int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerBrepairingNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ServerBrepairingNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerBrepairingNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerBrepairingNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ServerBrepairingNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ServerBrepairingNotify)
    MergeFrom(*source);
  }
}

void ServerBrepairingNotify::MergeFrom(const ServerBrepairingNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ServerBrepairingNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerBrepairingNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ServerBrepairingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerBrepairingNotify::CopyFrom(const ServerBrepairingNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ServerBrepairingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerBrepairingNotify::IsInitialized() const {

  return true;
}

void ServerBrepairingNotify::Swap(ServerBrepairingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerBrepairingNotify::InternalSwap(ServerBrepairingNotify* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerBrepairingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerBrepairingNotify_descriptor_;
  metadata.reflection = ServerBrepairingNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerBrepairingNotify

// optional int32 status = 1;
bool ServerBrepairingNotify::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerBrepairingNotify::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerBrepairingNotify::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerBrepairingNotify::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 ServerBrepairingNotify::status() const {
  // @@protoc_insertion_point(field_get:msg_maj.ServerBrepairingNotify.status)
  return status_;
}
 void ServerBrepairingNotify::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ServerBrepairingNotify.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteHead::kFromIdFieldNumber;
const int RouteHead::kToIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteHead::RouteHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RouteHead)
}

void RouteHead::InitAsDefaultInstance() {
}

RouteHead::RouteHead(const RouteHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RouteHead)
}

void RouteHead::SharedCtor() {
  _cached_size_ = 0;
  from_id_ = 0;
  to_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteHead::~RouteHead() {
  // @@protoc_insertion_point(destructor:msg_maj.RouteHead)
  SharedDtor();
}

void RouteHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouteHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteHead_descriptor_;
}

const RouteHead& RouteHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

RouteHead* RouteHead::default_instance_ = NULL;

RouteHead* RouteHead::New(::google::protobuf::Arena* arena) const {
  RouteHead* n = new RouteHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteHead::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RouteHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RouteHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RouteHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_id_, to_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RouteHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required int32 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RouteHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RouteHead)
  return false;
#undef DO_
}

void RouteHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RouteHead)
  // required int32 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_id(), output);
  }

  // required int32 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RouteHead)
}

::google::protobuf::uint8* RouteHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RouteHead)
  // required int32 from_id = 1;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_id(), target);
  }

  // required int32 to_id = 2;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RouteHead)
  return target;
}

int RouteHead::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.RouteHead)
  int total_size = 0;

  if (has_from_id()) {
    // required int32 from_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());
  }

  if (has_to_id()) {
    // required int32 to_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_id());
  }

  return total_size;
}
int RouteHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RouteHead)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 from_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());

    // required int32 to_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RouteHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RouteHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RouteHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RouteHead)
    MergeFrom(*source);
  }
}

void RouteHead::MergeFrom(const RouteHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RouteHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RouteHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RouteHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteHead::CopyFrom(const RouteHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RouteHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RouteHead::Swap(RouteHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteHead::InternalSwap(RouteHead* other) {
  std::swap(from_id_, other->from_id_);
  std::swap(to_id_, other->to_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteHead_descriptor_;
  metadata.reflection = RouteHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteHead

// required int32 from_id = 1;
bool RouteHead::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteHead::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteHead::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteHead::clear_from_id() {
  from_id_ = 0;
  clear_has_from_id();
}
 ::google::protobuf::int32 RouteHead::from_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RouteHead.from_id)
  return from_id_;
}
 void RouteHead::set_from_id(::google::protobuf::int32 value) {
  set_has_from_id();
  from_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RouteHead.from_id)
}

// required int32 to_id = 2;
bool RouteHead::has_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RouteHead::set_has_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RouteHead::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RouteHead::clear_to_id() {
  to_id_ = 0;
  clear_has_to_id();
}
 ::google::protobuf::int32 RouteHead::to_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.RouteHead.to_id)
  return to_id_;
}
 void RouteHead::set_to_id(::google::protobuf::int32 value) {
  set_has_to_id();
  to_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RouteHead.to_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransterToSceneReq::kFromIdFieldNumber;
const int TransterToSceneReq::kToIdFieldNumber;
const int TransterToSceneReq::kRoleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransterToSceneReq::TransterToSceneReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.TransterToSceneReq)
}

void TransterToSceneReq::InitAsDefaultInstance() {
}

TransterToSceneReq::TransterToSceneReq(const TransterToSceneReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.TransterToSceneReq)
}

void TransterToSceneReq::SharedCtor() {
  _cached_size_ = 0;
  from_id_ = 0;
  to_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransterToSceneReq::~TransterToSceneReq() {
  // @@protoc_insertion_point(destructor:msg_maj.TransterToSceneReq)
  SharedDtor();
}

void TransterToSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransterToSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransterToSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransterToSceneReq_descriptor_;
}

const TransterToSceneReq& TransterToSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

TransterToSceneReq* TransterToSceneReq::default_instance_ = NULL;

TransterToSceneReq* TransterToSceneReq::New(::google::protobuf::Arena* arena) const {
  TransterToSceneReq* n = new TransterToSceneReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransterToSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.TransterToSceneReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransterToSceneReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransterToSceneReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(from_id_, to_id_);

#undef ZR_HELPER_
#undef ZR_

  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransterToSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.TransterToSceneReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 from_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // required int32 to_id = 2;
      case 2: {
        if (tag == 16) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_role_list;
        break;
      }

      // repeated .msg_maj.Role role_list = 3;
      case 3: {
        if (tag == 26) {
         parse_role_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_role_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_role_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_role_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.TransterToSceneReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.TransterToSceneReq)
  return false;
#undef DO_
}

void TransterToSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.TransterToSceneReq)
  // required int32 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_id(), output);
  }

  // required int32 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_id(), output);
  }

  // repeated .msg_maj.Role role_list = 3;
  for (unsigned int i = 0, n = this->role_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.TransterToSceneReq)
}

::google::protobuf::uint8* TransterToSceneReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.TransterToSceneReq)
  // required int32 from_id = 1;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_id(), target);
  }

  // required int32 to_id = 2;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_id(), target);
  }

  // repeated .msg_maj.Role role_list = 3;
  for (unsigned int i = 0, n = this->role_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->role_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.TransterToSceneReq)
  return target;
}

int TransterToSceneReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.TransterToSceneReq)
  int total_size = 0;

  if (has_from_id()) {
    // required int32 from_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());
  }

  if (has_to_id()) {
    // required int32 to_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_id());
  }

  return total_size;
}
int TransterToSceneReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.TransterToSceneReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 from_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_id());

    // required int32 to_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .msg_maj.Role role_list = 3;
  total_size += 1 * this->role_list_size();
  for (int i = 0; i < this->role_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransterToSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.TransterToSceneReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransterToSceneReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransterToSceneReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.TransterToSceneReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.TransterToSceneReq)
    MergeFrom(*source);
  }
}

void TransterToSceneReq::MergeFrom(const TransterToSceneReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.TransterToSceneReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  role_list_.MergeFrom(from.role_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransterToSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.TransterToSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransterToSceneReq::CopyFrom(const TransterToSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.TransterToSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransterToSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TransterToSceneReq::Swap(TransterToSceneReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransterToSceneReq::InternalSwap(TransterToSceneReq* other) {
  std::swap(from_id_, other->from_id_);
  std::swap(to_id_, other->to_id_);
  role_list_.UnsafeArenaSwap(&other->role_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransterToSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransterToSceneReq_descriptor_;
  metadata.reflection = TransterToSceneReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransterToSceneReq

// required int32 from_id = 1;
bool TransterToSceneReq::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransterToSceneReq::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransterToSceneReq::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransterToSceneReq::clear_from_id() {
  from_id_ = 0;
  clear_has_from_id();
}
 ::google::protobuf::int32 TransterToSceneReq::from_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.TransterToSceneReq.from_id)
  return from_id_;
}
 void TransterToSceneReq::set_from_id(::google::protobuf::int32 value) {
  set_has_from_id();
  from_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.TransterToSceneReq.from_id)
}

// required int32 to_id = 2;
bool TransterToSceneReq::has_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransterToSceneReq::set_has_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransterToSceneReq::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransterToSceneReq::clear_to_id() {
  to_id_ = 0;
  clear_has_to_id();
}
 ::google::protobuf::int32 TransterToSceneReq::to_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.TransterToSceneReq.to_id)
  return to_id_;
}
 void TransterToSceneReq::set_to_id(::google::protobuf::int32 value) {
  set_has_to_id();
  to_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.TransterToSceneReq.to_id)
}

// repeated .msg_maj.Role role_list = 3;
int TransterToSceneReq::role_list_size() const {
  return role_list_.size();
}
void TransterToSceneReq::clear_role_list() {
  role_list_.Clear();
}
const ::msg_maj::Role& TransterToSceneReq::role_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.TransterToSceneReq.role_list)
  return role_list_.Get(index);
}
::msg_maj::Role* TransterToSceneReq::mutable_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.TransterToSceneReq.role_list)
  return role_list_.Mutable(index);
}
::msg_maj::Role* TransterToSceneReq::add_role_list() {
  // @@protoc_insertion_point(field_add:msg_maj.TransterToSceneReq.role_list)
  return role_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::Role >*
TransterToSceneReq::mutable_role_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.TransterToSceneReq.role_list)
  return &role_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::Role >&
TransterToSceneReq::role_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.TransterToSceneReq.role_list)
  return role_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransterToSceneResp::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransterToSceneResp::TransterToSceneResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.TransterToSceneResp)
}

void TransterToSceneResp::InitAsDefaultInstance() {
  head_ = const_cast< ::msg_maj::RouteHead*>(&::msg_maj::RouteHead::default_instance());
}

TransterToSceneResp::TransterToSceneResp(const TransterToSceneResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.TransterToSceneResp)
}

void TransterToSceneResp::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransterToSceneResp::~TransterToSceneResp() {
  // @@protoc_insertion_point(destructor:msg_maj.TransterToSceneResp)
  SharedDtor();
}

void TransterToSceneResp::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void TransterToSceneResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransterToSceneResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransterToSceneResp_descriptor_;
}

const TransterToSceneResp& TransterToSceneResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fss_2eproto();
  return *default_instance_;
}

TransterToSceneResp* TransterToSceneResp::default_instance_ = NULL;

TransterToSceneResp* TransterToSceneResp::New(::google::protobuf::Arena* arena) const {
  TransterToSceneResp* n = new TransterToSceneResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransterToSceneResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.TransterToSceneResp)
  if (has_head()) {
    if (head_ != NULL) head_->::msg_maj::RouteHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransterToSceneResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.TransterToSceneResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg_maj.RouteHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.TransterToSceneResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.TransterToSceneResp)
  return false;
#undef DO_
}

void TransterToSceneResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.TransterToSceneResp)
  // optional .msg_maj.RouteHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.TransterToSceneResp)
}

::google::protobuf::uint8* TransterToSceneResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.TransterToSceneResp)
  // optional .msg_maj.RouteHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.TransterToSceneResp)
  return target;
}

int TransterToSceneResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.TransterToSceneResp)
  int total_size = 0;

  // optional .msg_maj.RouteHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransterToSceneResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.TransterToSceneResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransterToSceneResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransterToSceneResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.TransterToSceneResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.TransterToSceneResp)
    MergeFrom(*source);
  }
}

void TransterToSceneResp::MergeFrom(const TransterToSceneResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.TransterToSceneResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::msg_maj::RouteHead::MergeFrom(from.head());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TransterToSceneResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.TransterToSceneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransterToSceneResp::CopyFrom(const TransterToSceneResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.TransterToSceneResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransterToSceneResp::IsInitialized() const {

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void TransterToSceneResp::Swap(TransterToSceneResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransterToSceneResp::InternalSwap(TransterToSceneResp* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransterToSceneResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransterToSceneResp_descriptor_;
  metadata.reflection = TransterToSceneResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransterToSceneResp

// optional .msg_maj.RouteHead head = 1;
bool TransterToSceneResp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransterToSceneResp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void TransterToSceneResp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransterToSceneResp::clear_head() {
  if (head_ != NULL) head_->::msg_maj::RouteHead::Clear();
  clear_has_head();
}
const ::msg_maj::RouteHead& TransterToSceneResp::head() const {
  // @@protoc_insertion_point(field_get:msg_maj.TransterToSceneResp.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::msg_maj::RouteHead* TransterToSceneResp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::msg_maj::RouteHead;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.TransterToSceneResp.head)
  return head_;
}
::msg_maj::RouteHead* TransterToSceneResp::release_head() {
  // @@protoc_insertion_point(field_release:msg_maj.TransterToSceneResp.head)
  clear_has_head();
  ::msg_maj::RouteHead* temp = head_;
  head_ = NULL;
  return temp;
}
void TransterToSceneResp::set_allocated_head(::msg_maj::RouteHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.TransterToSceneResp.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_maj

// @@protoc_insertion_point(global_scope)
