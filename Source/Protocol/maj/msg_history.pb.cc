// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_history.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_history.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_maj {

namespace {

const ::google::protobuf::Descriptor* HistoryListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryRoomResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryRoomResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryInnReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryInnReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryInnResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryInnResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatTotalScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatTotalScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryRecordS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryRecordS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoListS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoListS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoS_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnRecordListS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnRecordListS_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnReplayActionListS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnReplayActionListS_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnRecordS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnRecordS_reflection_ = NULL;
const ::google::protobuf::Descriptor* InnReplayActionS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InnReplayActionS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatTotalS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatTotalS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeatTotalScoreS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeatTotalScoreS_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_cmd_hist_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* req_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fhistory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fhistory_2eproto() {
  protobuf_AddDesc_msg_5fhistory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_history.proto");
  GOOGLE_CHECK(file != NULL);
  HistoryListReq_descriptor_ = file->message_type(0);
  static const int HistoryListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListReq, start_index_),
  };
  HistoryListReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryListReq_descriptor_,
      HistoryListReq::default_instance_,
      HistoryListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryListReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListReq, _internal_metadata_),
      -1);
  HistoryListResp_descriptor_ = file->message_type(1);
  static const int HistoryListResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListResp, record_list_),
  };
  HistoryListResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryListResp_descriptor_,
      HistoryListResp::default_instance_,
      HistoryListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryListResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryListResp, _internal_metadata_),
      -1);
  HistoryRoomReq_descriptor_ = file->message_type(2);
  static const int HistoryRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomReq, record_id_),
  };
  HistoryRoomReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryRoomReq_descriptor_,
      HistoryRoomReq::default_instance_,
      HistoryRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryRoomReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomReq, _internal_metadata_),
      -1);
  HistoryRoomResp_descriptor_ = file->message_type(3);
  static const int HistoryRoomResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, inn_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, score_list_),
  };
  HistoryRoomResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryRoomResp_descriptor_,
      HistoryRoomResp::default_instance_,
      HistoryRoomResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryRoomResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRoomResp, _internal_metadata_),
      -1);
  HistoryInnReq_descriptor_ = file->message_type(4);
  static const int HistoryInnReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnReq, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnReq, inn_id_),
  };
  HistoryInnReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryInnReq_descriptor_,
      HistoryInnReq::default_instance_,
      HistoryInnReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryInnReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnReq, _internal_metadata_),
      -1);
  HistoryInnResp_descriptor_ = file->message_type(5);
  static const int HistoryInnResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, inn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, score_list_),
  };
  HistoryInnResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryInnResp_descriptor_,
      HistoryInnResp::default_instance_,
      HistoryInnResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryInnResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryInnResp, _internal_metadata_),
      -1);
  ReplayReq_descriptor_ = file->message_type(6);
  static const int ReplayReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayReq, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayReq, inn_id_),
  };
  ReplayReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplayReq_descriptor_,
      ReplayReq::default_instance_,
      ReplayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReplayReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayReq, _internal_metadata_),
      -1);
  ReplayResp_descriptor_ = file->message_type(7);
  static const int ReplayResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, user_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, banker_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, seat_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, action_list_),
  };
  ReplayResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplayResp_descriptor_,
      ReplayResp::default_instance_,
      ReplayResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReplayResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayResp, _internal_metadata_),
      -1);
  HistoryRecord_descriptor_ = file->message_type(8);
  static const int HistoryRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, score_list_),
  };
  HistoryRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryRecord_descriptor_,
      HistoryRecord::default_instance_,
      HistoryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, _internal_metadata_),
      -1);
  SeatTotalScore_descriptor_ = file->message_type(9);
  static const int SeatTotalScore_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, actor_addr_),
  };
  SeatTotalScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatTotalScore_descriptor_,
      SeatTotalScore::default_instance_,
      SeatTotalScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(SeatTotalScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScore, _internal_metadata_),
      -1);
  InnRecord_descriptor_ = file->message_type(10);
  static const int InnRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, inn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, seat_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, banker_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, close_type_),
  };
  InnRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnRecord_descriptor_,
      InnRecord::default_instance_,
      InnRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecord, _internal_metadata_),
      -1);
  ReplayAction_descriptor_ = file->message_type(11);
  static const int ReplayAction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, actor_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, victim_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, hu_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, event_tile_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, desk_tile_count_),
  };
  ReplayAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReplayAction_descriptor_,
      ReplayAction::default_instance_,
      ReplayAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReplayAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayAction, _internal_metadata_),
      -1);
  HistoryRecordS_descriptor_ = file->message_type(12);
  static const int HistoryRecordS_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, record_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, room_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, role_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, innrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, seat_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, inn_replay_),
  };
  HistoryRecordS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HistoryRecordS_descriptor_,
      HistoryRecordS::default_instance_,
      HistoryRecordS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, _has_bits_[0]),
      -1,
      -1,
      sizeof(HistoryRecordS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecordS, _internal_metadata_),
      -1);
  RoleInfoListS_descriptor_ = file->message_type(13);
  static const int RoleInfoListS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoListS, role_list_),
  };
  RoleInfoListS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleInfoListS_descriptor_,
      RoleInfoListS::default_instance_,
      RoleInfoListS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoListS, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleInfoListS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoListS, _internal_metadata_),
      -1);
  RoleInfoS_descriptor_ = file->message_type(14);
  static const int RoleInfoS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, actor_addr_),
  };
  RoleInfoS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoleInfoS_descriptor_,
      RoleInfoS::default_instance_,
      RoleInfoS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, _has_bits_[0]),
      -1,
      -1,
      sizeof(RoleInfoS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoS, _internal_metadata_),
      -1);
  InnRecordListS_descriptor_ = file->message_type(15);
  static const int InnRecordListS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordListS, inn_list_),
  };
  InnRecordListS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnRecordListS_descriptor_,
      InnRecordListS::default_instance_,
      InnRecordListS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordListS, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnRecordListS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordListS, _internal_metadata_),
      -1);
  InnReplayActionListS_descriptor_ = file->message_type(16);
  static const int InnReplayActionListS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionListS, replay_list_),
  };
  InnReplayActionListS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnReplayActionListS_descriptor_,
      InnReplayActionListS::default_instance_,
      InnReplayActionListS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionListS, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnReplayActionListS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionListS, _internal_metadata_),
      -1);
  InnRecordS_descriptor_ = file->message_type(17);
  static const int InnRecordS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, inn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, banker_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, seat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, seat_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, close_type_),
  };
  InnRecordS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnRecordS_descriptor_,
      InnRecordS::default_instance_,
      InnRecordS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnRecordS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnRecordS, _internal_metadata_),
      -1);
  InnReplayActionS_descriptor_ = file->message_type(18);
  static const int InnReplayActionS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionS, inn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionS, replay_list_),
  };
  InnReplayActionS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InnReplayActionS_descriptor_,
      InnReplayActionS::default_instance_,
      InnReplayActionS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionS, _has_bits_[0]),
      -1,
      -1,
      sizeof(InnReplayActionS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InnReplayActionS, _internal_metadata_),
      -1);
  SeatTotalS_descriptor_ = file->message_type(19);
  static const int SeatTotalS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalS, score_list_),
  };
  SeatTotalS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatTotalS_descriptor_,
      SeatTotalS::default_instance_,
      SeatTotalS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalS, _has_bits_[0]),
      -1,
      -1,
      sizeof(SeatTotalS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalS, _internal_metadata_),
      -1);
  SeatTotalScoreS_descriptor_ = file->message_type(20);
  static const int SeatTotalScoreS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScoreS, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScoreS, score_),
  };
  SeatTotalScoreS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SeatTotalScoreS_descriptor_,
      SeatTotalScoreS::default_instance_,
      SeatTotalScoreS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScoreS, _has_bits_[0]),
      -1,
      -1,
      sizeof(SeatTotalScoreS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeatTotalScoreS, _internal_metadata_),
      -1);
  c_cmd_hist_descriptor_ = file->enum_type(0);
  req_type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fhistory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryListReq_descriptor_, &HistoryListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryListResp_descriptor_, &HistoryListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryRoomReq_descriptor_, &HistoryRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryRoomResp_descriptor_, &HistoryRoomResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryInnReq_descriptor_, &HistoryInnReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryInnResp_descriptor_, &HistoryInnResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplayReq_descriptor_, &ReplayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplayResp_descriptor_, &ReplayResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryRecord_descriptor_, &HistoryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatTotalScore_descriptor_, &SeatTotalScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnRecord_descriptor_, &InnRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReplayAction_descriptor_, &ReplayAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HistoryRecordS_descriptor_, &HistoryRecordS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleInfoListS_descriptor_, &RoleInfoListS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoleInfoS_descriptor_, &RoleInfoS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnRecordListS_descriptor_, &InnRecordListS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnReplayActionListS_descriptor_, &InnReplayActionListS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnRecordS_descriptor_, &InnRecordS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InnReplayActionS_descriptor_, &InnReplayActionS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatTotalS_descriptor_, &SeatTotalS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SeatTotalScoreS_descriptor_, &SeatTotalScoreS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fhistory_2eproto() {
  delete HistoryListReq::default_instance_;
  delete HistoryListReq_reflection_;
  delete HistoryListResp::default_instance_;
  delete HistoryListResp_reflection_;
  delete HistoryRoomReq::default_instance_;
  delete HistoryRoomReq_reflection_;
  delete HistoryRoomResp::default_instance_;
  delete HistoryRoomResp_reflection_;
  delete HistoryInnReq::default_instance_;
  delete HistoryInnReq_reflection_;
  delete HistoryInnResp::default_instance_;
  delete HistoryInnResp_reflection_;
  delete ReplayReq::default_instance_;
  delete ReplayReq_reflection_;
  delete ReplayResp::default_instance_;
  delete ReplayResp_reflection_;
  delete HistoryRecord::default_instance_;
  delete HistoryRecord_reflection_;
  delete SeatTotalScore::default_instance_;
  delete SeatTotalScore_reflection_;
  delete InnRecord::default_instance_;
  delete InnRecord_reflection_;
  delete ReplayAction::default_instance_;
  delete ReplayAction_reflection_;
  delete HistoryRecordS::default_instance_;
  delete HistoryRecordS_reflection_;
  delete RoleInfoListS::default_instance_;
  delete RoleInfoListS_reflection_;
  delete RoleInfoS::default_instance_;
  delete RoleInfoS_reflection_;
  delete InnRecordListS::default_instance_;
  delete InnRecordListS_reflection_;
  delete InnReplayActionListS::default_instance_;
  delete InnReplayActionListS_reflection_;
  delete InnRecordS::default_instance_;
  delete InnRecordS_reflection_;
  delete InnReplayActionS::default_instance_;
  delete InnReplayActionS_reflection_;
  delete SeatTotalS::default_instance_;
  delete SeatTotalS_reflection_;
  delete SeatTotalScoreS::default_instance_;
  delete SeatTotalScoreS_reflection_;
}

void protobuf_AddDesc_msg_5fhistory_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5fhistory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::msg_maj::protobuf_AddDesc_msg_5fmaj_2eproto();
  ::msg_maj::protobuf_AddDesc_msg_5froom_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021msg_history.proto\022\007msg_maj\032\rmsg_maj.pr"
    "oto\032\016msg_room.proto\"F\n\016HistoryListReq\022\037\n"
    "\004type\030\001 \002(\0162\021.msg_maj.req_type\022\023\n\013start_"
    "index\030\002 \002(\004\"_\n\017HistoryListResp\022\037\n\004type\030\001"
    " \002(\0162\021.msg_maj.req_type\022+\n\013record_list\030\002"
    " \003(\0132\026.msg_maj.HistoryRecord\"D\n\016HistoryR"
    "oomReq\022\037\n\004type\030\001 \002(\0162\021.msg_maj.req_type\022"
    "\021\n\trecord_id\030\002 \002(\004\"\316\001\n\017HistoryRoomResp\022\037"
    "\n\004type\030\001 \002(\0162\021.msg_maj.req_type\022\021\n\trecor"
    "d_id\030\002 \002(\004\022\017\n\007room_id\030\003 \002(\r\022#\n\006option\030\004 "
    "\002(\0132\023.msg_maj.RoomOption\022$\n\010inn_list\030\005 \003"
    "(\0132\022.msg_maj.InnRecord\022+\n\nscore_list\030\006 \003"
    "(\0132\027.msg_maj.SeatTotalScore\"2\n\rHistoryIn"
    "nReq\022\021\n\trecord_id\030\001 \002(\004\022\016\n\006inn_id\030\002 \002(\r\""
    "\247\001\n\016HistoryInnResp\022\021\n\trecord_id\030\002 \002(\004\022\017\n"
    "\007room_id\030\003 \002(\r\022#\n\006option\030\004 \002(\0132\023.msg_maj"
    ".RoomOption\022\037\n\003inn\030\005 \002(\0132\022.msg_maj.InnRe"
    "cord\022+\n\nscore_list\030\006 \003(\0132\027.msg_maj.SeatT"
    "otalScore\".\n\tReplayReq\022\021\n\trecord_id\030\001 \002("
    "\004\022\016\n\006inn_id\030\002 \002(\r\"\322\001\n\nReplayResp\022$\n\troom"
    "_info\030\001 \002(\0132\021.msg_maj.RoomInfo\022)\n\016user_i"
    "nfo_list\030\002 \003(\0132\021.msg_maj.RoleInfo\022\023\n\013ban"
    "ker_seat\030\003 \002(\r\022\014\n\004dice\030\004 \002(\r\022$\n\tseat_lis"
    "t\030\005 \003(\0132\021.msg_maj.SeatInfo\022*\n\013action_lis"
    "t\030\006 \003(\0132\025.msg_maj.ReplayAction\"\223\001\n\rHisto"
    "ryRecord\022\021\n\trecord_id\030\001 \002(\004\022\017\n\007room_id\030\002"
    " \002(\r\022#\n\006option\030\003 \002(\0132\023.msg_maj.RoomOptio"
    "n\022\014\n\004time\030\004 \002(\004\022+\n\nscore_list\030\005 \003(\0132\027.ms"
    "g_maj.SeatTotalScore\"V\n\016SeatTotalScore\022\017"
    "\n\007seat_id\030\001 \002(\r\022\r\n\005score\030\002 \002(\005\022\020\n\010nickna"
    "me\030\003 \002(\t\022\022\n\nactor_addr\030\004 \001(\t\"\200\001\n\tInnReco"
    "rd\022\016\n\006inn_id\030\001 \002(\r\022,\n\013seat_result\030\002 \003(\0132"
    "\027.msg_maj.GameResultSeat\022\023\n\013banker_seat\030"
    "\003 \002(\r\022\014\n\004dice\030\004 \002(\r\022\022\n\nclose_type\030\005 \001(\r\""
    "\257\001\n\014ReplayAction\022\"\n\005event\030\001 \002(\0162\023.msg_ma"
    "j.event_type\022\022\n\nactor_seat\030\002 \002(\r\022\023\n\013vict"
    "im_seat\030\003 \001(\005\022 \n\007hu_info\030\004 \001(\0132\017.msg_maj"
    ".HuInfo\022\027\n\017event_tile_list\030\005 \003(\r\022\027\n\017desk"
    "_tile_count\030\006 \001(\005\"\233\002\n\016HistoryRecordS\022\021\n\t"
    "record_id\030\001 \002(\004\022\017\n\007room_id\030\002 \001(\r\022$\n\troom"
    "_info\030\003 \001(\0132\021.msg_maj.RoomInfo\022)\n\trole_i"
    "nfo\030\004 \001(\0132\026.msg_maj.RoleInfoListS\022\014\n\004tim"
    "e\030\005 \001(\004\022*\n\tinnrecord\030\006 \001(\0132\027.msg_maj.Inn"
    "RecordListS\022\'\n\nseat_total\030\007 \001(\0132\023.msg_ma"
    "j.SeatTotalS\0221\n\ninn_replay\030\010 \001(\0132\035.msg_m"
    "aj.InnReplayActionListS\"6\n\rRoleInfoListS"
    "\022%\n\trole_list\030\001 \003(\0132\022.msg_maj.RoleInfoS\""
    "H\n\tRoleInfoS\022\014\n\004seat\030\001 \002(\r\022\013\n\003uid\030\002 \002(\004\022"
    "\014\n\004nick\030\003 \002(\t\022\022\n\nactor_addr\030\004 \001(\t\"7\n\016Inn"
    "RecordListS\022%\n\010inn_list\030\001 \003(\0132\023.msg_maj."
    "InnRecordS\"F\n\024InnReplayActionListS\022.\n\013re"
    "play_list\030\001 \003(\0132\031.msg_maj.InnReplayActio"
    "nS\"\247\001\n\nInnRecordS\022\016\n\006inn_id\030\001 \002(\005\022\023\n\013ban"
    "ker_seat\030\002 \002(\r\022\014\n\004dice\030\003 \002(\r\022$\n\tseat_inf"
    "o\030\004 \003(\0132\021.msg_maj.SeatInfo\022,\n\013seat_resul"
    "t\030\005 \003(\0132\027.msg_maj.GameResultSeat\022\022\n\nclos"
    "e_type\030\006 \001(\005\"N\n\020InnReplayActionS\022\016\n\006inn_"
    "id\030\001 \002(\005\022*\n\013replay_list\030\002 \003(\0132\025.msg_maj."
    "ReplayAction\":\n\nSeatTotalS\022,\n\nscore_list"
    "\030\001 \003(\0132\030.msg_maj.SeatTotalScoreS\"1\n\017Seat"
    "TotalScoreS\022\017\n\007seat_id\030\001 \002(\r\022\r\n\005score\030\002 "
    "\002(\005*\262\001\n\nc_cmd_hist\022\024\n\020history_list_req\020\001"
    "\022\025\n\021history_list_resp\020\002\022\016\n\nreplay_req\020\003\022"
    "\017\n\013replay_resp\020\004\022\024\n\020history_room_req\020\005\022\025"
    "\n\021history_room_resp\020\006\022\023\n\017history_inn_req"
    "\020\007\022\024\n\020history_inn_resp\020\010*)\n\010req_type\022\r\n\t"
    "room_list\020\001\022\016\n\ntotal_list\020\002", 2667);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_history.proto", &protobuf_RegisterTypes);
  HistoryListReq::default_instance_ = new HistoryListReq();
  HistoryListResp::default_instance_ = new HistoryListResp();
  HistoryRoomReq::default_instance_ = new HistoryRoomReq();
  HistoryRoomResp::default_instance_ = new HistoryRoomResp();
  HistoryInnReq::default_instance_ = new HistoryInnReq();
  HistoryInnResp::default_instance_ = new HistoryInnResp();
  ReplayReq::default_instance_ = new ReplayReq();
  ReplayResp::default_instance_ = new ReplayResp();
  HistoryRecord::default_instance_ = new HistoryRecord();
  SeatTotalScore::default_instance_ = new SeatTotalScore();
  InnRecord::default_instance_ = new InnRecord();
  ReplayAction::default_instance_ = new ReplayAction();
  HistoryRecordS::default_instance_ = new HistoryRecordS();
  RoleInfoListS::default_instance_ = new RoleInfoListS();
  RoleInfoS::default_instance_ = new RoleInfoS();
  InnRecordListS::default_instance_ = new InnRecordListS();
  InnReplayActionListS::default_instance_ = new InnReplayActionListS();
  InnRecordS::default_instance_ = new InnRecordS();
  InnReplayActionS::default_instance_ = new InnReplayActionS();
  SeatTotalS::default_instance_ = new SeatTotalS();
  SeatTotalScoreS::default_instance_ = new SeatTotalScoreS();
  HistoryListReq::default_instance_->InitAsDefaultInstance();
  HistoryListResp::default_instance_->InitAsDefaultInstance();
  HistoryRoomReq::default_instance_->InitAsDefaultInstance();
  HistoryRoomResp::default_instance_->InitAsDefaultInstance();
  HistoryInnReq::default_instance_->InitAsDefaultInstance();
  HistoryInnResp::default_instance_->InitAsDefaultInstance();
  ReplayReq::default_instance_->InitAsDefaultInstance();
  ReplayResp::default_instance_->InitAsDefaultInstance();
  HistoryRecord::default_instance_->InitAsDefaultInstance();
  SeatTotalScore::default_instance_->InitAsDefaultInstance();
  InnRecord::default_instance_->InitAsDefaultInstance();
  ReplayAction::default_instance_->InitAsDefaultInstance();
  HistoryRecordS::default_instance_->InitAsDefaultInstance();
  RoleInfoListS::default_instance_->InitAsDefaultInstance();
  RoleInfoS::default_instance_->InitAsDefaultInstance();
  InnRecordListS::default_instance_->InitAsDefaultInstance();
  InnReplayActionListS::default_instance_->InitAsDefaultInstance();
  InnRecordS::default_instance_->InitAsDefaultInstance();
  InnReplayActionS::default_instance_->InitAsDefaultInstance();
  SeatTotalS::default_instance_->InitAsDefaultInstance();
  SeatTotalScoreS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fhistory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fhistory_2eproto {
  StaticDescriptorInitializer_msg_5fhistory_2eproto() {
    protobuf_AddDesc_msg_5fhistory_2eproto();
  }
} static_descriptor_initializer_msg_5fhistory_2eproto_;
const ::google::protobuf::EnumDescriptor* c_cmd_hist_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_cmd_hist_descriptor_;
}
bool c_cmd_hist_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* req_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return req_type_descriptor_;
}
bool req_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryListReq::kTypeFieldNumber;
const int HistoryListReq::kStartIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryListReq::HistoryListReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryListReq)
}

void HistoryListReq::InitAsDefaultInstance() {
}

HistoryListReq::HistoryListReq(const HistoryListReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryListReq)
}

void HistoryListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  start_index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryListReq::~HistoryListReq() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryListReq)
  SharedDtor();
}

void HistoryListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryListReq_descriptor_;
}

const HistoryListReq& HistoryListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryListReq* HistoryListReq::default_instance_ = NULL;

HistoryListReq* HistoryListReq::New(::google::protobuf::Arena* arena) const {
  HistoryListReq* n = new HistoryListReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryListReq)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    start_index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::req_type_IsValid(value)) {
            set_type(static_cast< ::msg_maj::req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_index;
        break;
      }

      // required uint64 start_index = 2;
      case 2: {
        if (tag == 16) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryListReq)
  return false;
#undef DO_
}

void HistoryListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryListReq)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 start_index = 2;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryListReq)
}

::google::protobuf::uint8* HistoryListReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryListReq)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 start_index = 2;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryListReq)
  return target;
}

int HistoryListReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryListReq)
  int total_size = 0;

  if (has_type()) {
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_start_index()) {
    // required uint64 start_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_index());
  }

  return total_size;
}
int HistoryListReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryListReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint64 start_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryListReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryListReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryListReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryListReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryListReq)
    MergeFrom(*source);
  }
}

void HistoryListReq::MergeFrom(const HistoryListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryListReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryListReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryListReq::CopyFrom(const HistoryListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HistoryListReq::Swap(HistoryListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryListReq::InternalSwap(HistoryListReq* other) {
  std::swap(type_, other->type_);
  std::swap(start_index_, other->start_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryListReq_descriptor_;
  metadata.reflection = HistoryListReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryListReq

// required .msg_maj.req_type type = 1;
bool HistoryListReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryListReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryListReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryListReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_maj::req_type HistoryListReq::type() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryListReq.type)
  return static_cast< ::msg_maj::req_type >(type_);
}
 void HistoryListReq::set_type(::msg_maj::req_type value) {
  assert(::msg_maj::req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryListReq.type)
}

// required uint64 start_index = 2;
bool HistoryListReq::has_start_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryListReq::set_has_start_index() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryListReq::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryListReq::clear_start_index() {
  start_index_ = GOOGLE_ULONGLONG(0);
  clear_has_start_index();
}
 ::google::protobuf::uint64 HistoryListReq::start_index() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryListReq.start_index)
  return start_index_;
}
 void HistoryListReq::set_start_index(::google::protobuf::uint64 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryListReq.start_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryListResp::kTypeFieldNumber;
const int HistoryListResp::kRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryListResp::HistoryListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryListResp)
}

void HistoryListResp::InitAsDefaultInstance() {
}

HistoryListResp::HistoryListResp(const HistoryListResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryListResp)
}

void HistoryListResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryListResp::~HistoryListResp() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryListResp)
  SharedDtor();
}

void HistoryListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryListResp_descriptor_;
}

const HistoryListResp& HistoryListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryListResp* HistoryListResp::default_instance_ = NULL;

HistoryListResp* HistoryListResp::New(::google::protobuf::Arena* arena) const {
  HistoryListResp* n = new HistoryListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryListResp)
  type_ = 1;
  record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::req_type_IsValid(value)) {
            set_type(static_cast< ::msg_maj::req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_record_list;
        break;
      }

      // repeated .msg_maj.HistoryRecord record_list = 2;
      case 2: {
        if (tag == 18) {
         parse_record_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_record_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryListResp)
  return false;
#undef DO_
}

void HistoryListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryListResp)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .msg_maj.HistoryRecord record_list = 2;
  for (unsigned int i = 0, n = this->record_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->record_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryListResp)
}

::google::protobuf::uint8* HistoryListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryListResp)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .msg_maj.HistoryRecord record_list = 2;
  for (unsigned int i = 0, n = this->record_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->record_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryListResp)
  return target;
}

int HistoryListResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryListResp)
  int total_size = 0;

  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .msg_maj.HistoryRecord record_list = 2;
  total_size += 1 * this->record_list_size();
  for (int i = 0; i < this->record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryListResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryListResp)
    MergeFrom(*source);
  }
}

void HistoryListResp::MergeFrom(const HistoryListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  record_list_.MergeFrom(from.record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryListResp::CopyFrom(const HistoryListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->record_list())) return false;
  return true;
}

void HistoryListResp::Swap(HistoryListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryListResp::InternalSwap(HistoryListResp* other) {
  std::swap(type_, other->type_);
  record_list_.UnsafeArenaSwap(&other->record_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryListResp_descriptor_;
  metadata.reflection = HistoryListResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryListResp

// required .msg_maj.req_type type = 1;
bool HistoryListResp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryListResp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryListResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryListResp::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_maj::req_type HistoryListResp::type() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryListResp.type)
  return static_cast< ::msg_maj::req_type >(type_);
}
 void HistoryListResp::set_type(::msg_maj::req_type value) {
  assert(::msg_maj::req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryListResp.type)
}

// repeated .msg_maj.HistoryRecord record_list = 2;
int HistoryListResp::record_list_size() const {
  return record_list_.size();
}
void HistoryListResp::clear_record_list() {
  record_list_.Clear();
}
const ::msg_maj::HistoryRecord& HistoryListResp::record_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryListResp.record_list)
  return record_list_.Get(index);
}
::msg_maj::HistoryRecord* HistoryListResp::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryListResp.record_list)
  return record_list_.Mutable(index);
}
::msg_maj::HistoryRecord* HistoryListResp::add_record_list() {
  // @@protoc_insertion_point(field_add:msg_maj.HistoryListResp.record_list)
  return record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::HistoryRecord >*
HistoryListResp::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.HistoryListResp.record_list)
  return &record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::HistoryRecord >&
HistoryListResp::record_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.HistoryListResp.record_list)
  return record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRoomReq::kTypeFieldNumber;
const int HistoryRoomReq::kRecordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRoomReq::HistoryRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryRoomReq)
}

void HistoryRoomReq::InitAsDefaultInstance() {
}

HistoryRoomReq::HistoryRoomReq(const HistoryRoomReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryRoomReq)
}

void HistoryRoomReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  record_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryRoomReq::~HistoryRoomReq() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryRoomReq)
  SharedDtor();
}

void HistoryRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryRoomReq_descriptor_;
}

const HistoryRoomReq& HistoryRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryRoomReq* HistoryRoomReq::default_instance_ = NULL;

HistoryRoomReq* HistoryRoomReq::New(::google::protobuf::Arena* arena) const {
  HistoryRoomReq* n = new HistoryRoomReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryRoomReq)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    record_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::req_type_IsValid(value)) {
            set_type(static_cast< ::msg_maj::req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_record_id;
        break;
      }

      // required uint64 record_id = 2;
      case 2: {
        if (tag == 16) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryRoomReq)
  return false;
#undef DO_
}

void HistoryRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryRoomReq)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 record_id = 2;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->record_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryRoomReq)
}

::google::protobuf::uint8* HistoryRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryRoomReq)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 record_id = 2;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->record_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryRoomReq)
  return target;
}

int HistoryRoomReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryRoomReq)
  int total_size = 0;

  if (has_type()) {
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_record_id()) {
    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  return total_size;
}
int HistoryRoomReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryRoomReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryRoomReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryRoomReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryRoomReq)
    MergeFrom(*source);
  }
}

void HistoryRoomReq::MergeFrom(const HistoryRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryRoomReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRoomReq::CopyFrom(const HistoryRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HistoryRoomReq::Swap(HistoryRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRoomReq::InternalSwap(HistoryRoomReq* other) {
  std::swap(type_, other->type_);
  std::swap(record_id_, other->record_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryRoomReq_descriptor_;
  metadata.reflection = HistoryRoomReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRoomReq

// required .msg_maj.req_type type = 1;
bool HistoryRoomReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryRoomReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryRoomReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryRoomReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_maj::req_type HistoryRoomReq::type() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomReq.type)
  return static_cast< ::msg_maj::req_type >(type_);
}
 void HistoryRoomReq::set_type(::msg_maj::req_type value) {
  assert(::msg_maj::req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRoomReq.type)
}

// required uint64 record_id = 2;
bool HistoryRoomReq::has_record_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryRoomReq::set_has_record_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryRoomReq::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryRoomReq::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryRoomReq::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomReq.record_id)
  return record_id_;
}
 void HistoryRoomReq::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRoomReq.record_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRoomResp::kTypeFieldNumber;
const int HistoryRoomResp::kRecordIdFieldNumber;
const int HistoryRoomResp::kRoomIdFieldNumber;
const int HistoryRoomResp::kOptionFieldNumber;
const int HistoryRoomResp::kInnListFieldNumber;
const int HistoryRoomResp::kScoreListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRoomResp::HistoryRoomResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryRoomResp)
}

void HistoryRoomResp::InitAsDefaultInstance() {
  option_ = const_cast< ::msg_maj::RoomOption*>(&::msg_maj::RoomOption::default_instance());
}

HistoryRoomResp::HistoryRoomResp(const HistoryRoomResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryRoomResp)
}

void HistoryRoomResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  record_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = 0u;
  option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryRoomResp::~HistoryRoomResp() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryRoomResp)
  SharedDtor();
}

void HistoryRoomResp::SharedDtor() {
  if (this != default_instance_) {
    delete option_;
  }
}

void HistoryRoomResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRoomResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryRoomResp_descriptor_;
}

const HistoryRoomResp& HistoryRoomResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryRoomResp* HistoryRoomResp::default_instance_ = NULL;

HistoryRoomResp* HistoryRoomResp::New(::google::protobuf::Arena* arena) const {
  HistoryRoomResp* n = new HistoryRoomResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRoomResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryRoomResp)
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 1;
    record_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = 0u;
    if (has_option()) {
      if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
    }
  }
  inn_list_.Clear();
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryRoomResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryRoomResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.req_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::req_type_IsValid(value)) {
            set_type(static_cast< ::msg_maj::req_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_record_id;
        break;
      }

      // required uint64 record_id = 2;
      case 2: {
        if (tag == 16) {
         parse_record_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_option;
        break;
      }

      // required .msg_maj.RoomOption option = 4;
      case 4: {
        if (tag == 34) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inn_list;
        break;
      }

      // repeated .msg_maj.InnRecord inn_list = 5;
      case 5: {
        if (tag == 42) {
         parse_inn_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_inn_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inn_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_inn_list;
        if (input->ExpectTag(50)) goto parse_loop_score_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .msg_maj.SeatTotalScore score_list = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_score_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryRoomResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryRoomResp)
  return false;
#undef DO_
}

void HistoryRoomResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryRoomResp)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 record_id = 2;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->record_id(), output);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // required .msg_maj.RoomOption option = 4;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->option_, output);
  }

  // repeated .msg_maj.InnRecord inn_list = 5;
  for (unsigned int i = 0, n = this->inn_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->inn_list(i), output);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 6;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->score_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryRoomResp)
}

::google::protobuf::uint8* HistoryRoomResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryRoomResp)
  // required .msg_maj.req_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 record_id = 2;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->record_id(), target);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // required .msg_maj.RoomOption option = 4;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->option_, false, target);
  }

  // repeated .msg_maj.InnRecord inn_list = 5;
  for (unsigned int i = 0, n = this->inn_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->inn_list(i), false, target);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 6;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->score_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryRoomResp)
  return target;
}

int HistoryRoomResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryRoomResp)
  int total_size = 0;

  if (has_type()) {
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_record_id()) {
    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  if (has_room_id()) {
    // required uint32 room_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  if (has_option()) {
    // required .msg_maj.RoomOption option = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);
  }

  return total_size;
}
int HistoryRoomResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryRoomResp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .msg_maj.req_type type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

    // required uint32 room_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());

    // required .msg_maj.RoomOption option = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .msg_maj.InnRecord inn_list = 5;
  total_size += 1 * this->inn_list_size();
  for (int i = 0; i < this->inn_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inn_list(i));
  }

  // repeated .msg_maj.SeatTotalScore score_list = 6;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRoomResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryRoomResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryRoomResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRoomResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryRoomResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryRoomResp)
    MergeFrom(*source);
  }
}

void HistoryRoomResp::MergeFrom(const HistoryRoomResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryRoomResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  inn_list_.MergeFrom(from.inn_list_);
  score_list_.MergeFrom(from.score_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_option()) {
      mutable_option()->::msg_maj::RoomOption::MergeFrom(from.option());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryRoomResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRoomResp::CopyFrom(const HistoryRoomResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryRoomResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRoomResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->inn_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->score_list())) return false;
  return true;
}

void HistoryRoomResp::Swap(HistoryRoomResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRoomResp::InternalSwap(HistoryRoomResp* other) {
  std::swap(type_, other->type_);
  std::swap(record_id_, other->record_id_);
  std::swap(room_id_, other->room_id_);
  std::swap(option_, other->option_);
  inn_list_.UnsafeArenaSwap(&other->inn_list_);
  score_list_.UnsafeArenaSwap(&other->score_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRoomResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryRoomResp_descriptor_;
  metadata.reflection = HistoryRoomResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRoomResp

// required .msg_maj.req_type type = 1;
bool HistoryRoomResp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryRoomResp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryRoomResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryRoomResp::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_maj::req_type HistoryRoomResp::type() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.type)
  return static_cast< ::msg_maj::req_type >(type_);
}
 void HistoryRoomResp::set_type(::msg_maj::req_type value) {
  assert(::msg_maj::req_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRoomResp.type)
}

// required uint64 record_id = 2;
bool HistoryRoomResp::has_record_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryRoomResp::set_has_record_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryRoomResp::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryRoomResp::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryRoomResp::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.record_id)
  return record_id_;
}
 void HistoryRoomResp::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRoomResp.record_id)
}

// required uint32 room_id = 3;
bool HistoryRoomResp::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HistoryRoomResp::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
void HistoryRoomResp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void HistoryRoomResp::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
 ::google::protobuf::uint32 HistoryRoomResp::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.room_id)
  return room_id_;
}
 void HistoryRoomResp::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRoomResp.room_id)
}

// required .msg_maj.RoomOption option = 4;
bool HistoryRoomResp::has_option() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HistoryRoomResp::set_has_option() {
  _has_bits_[0] |= 0x00000008u;
}
void HistoryRoomResp::clear_has_option() {
  _has_bits_[0] &= ~0x00000008u;
}
void HistoryRoomResp::clear_option() {
  if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
  clear_has_option();
}
const ::msg_maj::RoomOption& HistoryRoomResp::option() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
::msg_maj::RoomOption* HistoryRoomResp::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::msg_maj::RoomOption;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRoomResp.option)
  return option_;
}
::msg_maj::RoomOption* HistoryRoomResp::release_option() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRoomResp.option)
  clear_has_option();
  ::msg_maj::RoomOption* temp = option_;
  option_ = NULL;
  return temp;
}
void HistoryRoomResp::set_allocated_option(::msg_maj::RoomOption* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRoomResp.option)
}

// repeated .msg_maj.InnRecord inn_list = 5;
int HistoryRoomResp::inn_list_size() const {
  return inn_list_.size();
}
void HistoryRoomResp::clear_inn_list() {
  inn_list_.Clear();
}
const ::msg_maj::InnRecord& HistoryRoomResp::inn_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.inn_list)
  return inn_list_.Get(index);
}
::msg_maj::InnRecord* HistoryRoomResp::mutable_inn_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRoomResp.inn_list)
  return inn_list_.Mutable(index);
}
::msg_maj::InnRecord* HistoryRoomResp::add_inn_list() {
  // @@protoc_insertion_point(field_add:msg_maj.HistoryRoomResp.inn_list)
  return inn_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::InnRecord >*
HistoryRoomResp::mutable_inn_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.HistoryRoomResp.inn_list)
  return &inn_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::InnRecord >&
HistoryRoomResp::inn_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.HistoryRoomResp.inn_list)
  return inn_list_;
}

// repeated .msg_maj.SeatTotalScore score_list = 6;
int HistoryRoomResp::score_list_size() const {
  return score_list_.size();
}
void HistoryRoomResp::clear_score_list() {
  score_list_.Clear();
}
const ::msg_maj::SeatTotalScore& HistoryRoomResp::score_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRoomResp.score_list)
  return score_list_.Get(index);
}
::msg_maj::SeatTotalScore* HistoryRoomResp::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRoomResp.score_list)
  return score_list_.Mutable(index);
}
::msg_maj::SeatTotalScore* HistoryRoomResp::add_score_list() {
  // @@protoc_insertion_point(field_add:msg_maj.HistoryRoomResp.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >*
HistoryRoomResp::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.HistoryRoomResp.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >&
HistoryRoomResp::score_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.HistoryRoomResp.score_list)
  return score_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryInnReq::kRecordIdFieldNumber;
const int HistoryInnReq::kInnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryInnReq::HistoryInnReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryInnReq)
}

void HistoryInnReq::InitAsDefaultInstance() {
}

HistoryInnReq::HistoryInnReq(const HistoryInnReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryInnReq)
}

void HistoryInnReq::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  inn_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryInnReq::~HistoryInnReq() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryInnReq)
  SharedDtor();
}

void HistoryInnReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryInnReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryInnReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryInnReq_descriptor_;
}

const HistoryInnReq& HistoryInnReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryInnReq* HistoryInnReq::default_instance_ = NULL;

HistoryInnReq* HistoryInnReq::New(::google::protobuf::Arena* arena) const {
  HistoryInnReq* n = new HistoryInnReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryInnReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryInnReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HistoryInnReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HistoryInnReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(record_id_, inn_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryInnReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryInnReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inn_id;
        break;
      }

      // required uint32 inn_id = 2;
      case 2: {
        if (tag == 16) {
         parse_inn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inn_id_)));
          set_has_inn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryInnReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryInnReq)
  return false;
#undef DO_
}

void HistoryInnReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryInnReq)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_id(), output);
  }

  // required uint32 inn_id = 2;
  if (has_inn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryInnReq)
}

::google::protobuf::uint8* HistoryInnReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryInnReq)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_id(), target);
  }

  // required uint32 inn_id = 2;
  if (has_inn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryInnReq)
  return target;
}

int HistoryInnReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryInnReq)
  int total_size = 0;

  if (has_record_id()) {
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  if (has_inn_id()) {
    // required uint32 inn_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());
  }

  return total_size;
}
int HistoryInnReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryInnReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

    // required uint32 inn_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryInnReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryInnReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryInnReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryInnReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryInnReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryInnReq)
    MergeFrom(*source);
  }
}

void HistoryInnReq::MergeFrom(const HistoryInnReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryInnReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_inn_id()) {
      set_inn_id(from.inn_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryInnReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryInnReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryInnReq::CopyFrom(const HistoryInnReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryInnReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryInnReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HistoryInnReq::Swap(HistoryInnReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryInnReq::InternalSwap(HistoryInnReq* other) {
  std::swap(record_id_, other->record_id_);
  std::swap(inn_id_, other->inn_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryInnReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryInnReq_descriptor_;
  metadata.reflection = HistoryInnReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryInnReq

// required uint64 record_id = 1;
bool HistoryInnReq::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryInnReq::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryInnReq::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryInnReq::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryInnReq::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnReq.record_id)
  return record_id_;
}
 void HistoryInnReq::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryInnReq.record_id)
}

// required uint32 inn_id = 2;
bool HistoryInnReq::has_inn_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryInnReq::set_has_inn_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryInnReq::clear_has_inn_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryInnReq::clear_inn_id() {
  inn_id_ = 0u;
  clear_has_inn_id();
}
 ::google::protobuf::uint32 HistoryInnReq::inn_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnReq.inn_id)
  return inn_id_;
}
 void HistoryInnReq::set_inn_id(::google::protobuf::uint32 value) {
  set_has_inn_id();
  inn_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryInnReq.inn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryInnResp::kRecordIdFieldNumber;
const int HistoryInnResp::kRoomIdFieldNumber;
const int HistoryInnResp::kOptionFieldNumber;
const int HistoryInnResp::kInnFieldNumber;
const int HistoryInnResp::kScoreListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryInnResp::HistoryInnResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryInnResp)
}

void HistoryInnResp::InitAsDefaultInstance() {
  option_ = const_cast< ::msg_maj::RoomOption*>(&::msg_maj::RoomOption::default_instance());
  inn_ = const_cast< ::msg_maj::InnRecord*>(&::msg_maj::InnRecord::default_instance());
}

HistoryInnResp::HistoryInnResp(const HistoryInnResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryInnResp)
}

void HistoryInnResp::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = 0u;
  option_ = NULL;
  inn_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryInnResp::~HistoryInnResp() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryInnResp)
  SharedDtor();
}

void HistoryInnResp::SharedDtor() {
  if (this != default_instance_) {
    delete option_;
    delete inn_;
  }
}

void HistoryInnResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryInnResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryInnResp_descriptor_;
}

const HistoryInnResp& HistoryInnResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryInnResp* HistoryInnResp::default_instance_ = NULL;

HistoryInnResp* HistoryInnResp::New(::google::protobuf::Arena* arena) const {
  HistoryInnResp* n = new HistoryInnResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryInnResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryInnResp)
  if (_has_bits_[0 / 32] & 15u) {
    record_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = 0u;
    if (has_option()) {
      if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
    }
    if (has_inn()) {
      if (inn_ != NULL) inn_->::msg_maj::InnRecord::Clear();
    }
  }
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryInnResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryInnResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 3;
      case 3: {
        if (tag == 24) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_option;
        break;
      }

      // required .msg_maj.RoomOption option = 4;
      case 4: {
        if (tag == 34) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_inn;
        break;
      }

      // required .msg_maj.InnRecord inn = 5;
      case 5: {
        if (tag == 42) {
         parse_inn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_score_list;
        break;
      }

      // repeated .msg_maj.SeatTotalScore score_list = 6;
      case 6: {
        if (tag == 50) {
         parse_score_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_score_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryInnResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryInnResp)
  return false;
#undef DO_
}

void HistoryInnResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryInnResp)
  // required uint64 record_id = 2;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->record_id(), output);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_id(), output);
  }

  // required .msg_maj.RoomOption option = 4;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->option_, output);
  }

  // required .msg_maj.InnRecord inn = 5;
  if (has_inn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->inn_, output);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 6;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->score_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryInnResp)
}

::google::protobuf::uint8* HistoryInnResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryInnResp)
  // required uint64 record_id = 2;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->record_id(), target);
  }

  // required uint32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_id(), target);
  }

  // required .msg_maj.RoomOption option = 4;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->option_, false, target);
  }

  // required .msg_maj.InnRecord inn = 5;
  if (has_inn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->inn_, false, target);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 6;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->score_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryInnResp)
  return target;
}

int HistoryInnResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryInnResp)
  int total_size = 0;

  if (has_record_id()) {
    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  if (has_room_id()) {
    // required uint32 room_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  if (has_option()) {
    // required .msg_maj.RoomOption option = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);
  }

  if (has_inn()) {
    // required .msg_maj.InnRecord inn = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inn_);
  }

  return total_size;
}
int HistoryInnResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryInnResp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 record_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

    // required uint32 room_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());

    // required .msg_maj.RoomOption option = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);

    // required .msg_maj.InnRecord inn = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inn_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .msg_maj.SeatTotalScore score_list = 6;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryInnResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryInnResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryInnResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryInnResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryInnResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryInnResp)
    MergeFrom(*source);
  }
}

void HistoryInnResp::MergeFrom(const HistoryInnResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryInnResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  score_list_.MergeFrom(from.score_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_option()) {
      mutable_option()->::msg_maj::RoomOption::MergeFrom(from.option());
    }
    if (from.has_inn()) {
      mutable_inn()->::msg_maj::InnRecord::MergeFrom(from.inn());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryInnResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryInnResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryInnResp::CopyFrom(const HistoryInnResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryInnResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryInnResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_inn()) {
    if (!this->inn_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->score_list())) return false;
  return true;
}

void HistoryInnResp::Swap(HistoryInnResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryInnResp::InternalSwap(HistoryInnResp* other) {
  std::swap(record_id_, other->record_id_);
  std::swap(room_id_, other->room_id_);
  std::swap(option_, other->option_);
  std::swap(inn_, other->inn_);
  score_list_.UnsafeArenaSwap(&other->score_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryInnResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryInnResp_descriptor_;
  metadata.reflection = HistoryInnResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryInnResp

// required uint64 record_id = 2;
bool HistoryInnResp::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryInnResp::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryInnResp::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryInnResp::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryInnResp::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnResp.record_id)
  return record_id_;
}
 void HistoryInnResp::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryInnResp.record_id)
}

// required uint32 room_id = 3;
bool HistoryInnResp::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryInnResp::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryInnResp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryInnResp::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
 ::google::protobuf::uint32 HistoryInnResp::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnResp.room_id)
  return room_id_;
}
 void HistoryInnResp::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryInnResp.room_id)
}

// required .msg_maj.RoomOption option = 4;
bool HistoryInnResp::has_option() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HistoryInnResp::set_has_option() {
  _has_bits_[0] |= 0x00000004u;
}
void HistoryInnResp::clear_has_option() {
  _has_bits_[0] &= ~0x00000004u;
}
void HistoryInnResp::clear_option() {
  if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
  clear_has_option();
}
const ::msg_maj::RoomOption& HistoryInnResp::option() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnResp.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
::msg_maj::RoomOption* HistoryInnResp::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::msg_maj::RoomOption;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryInnResp.option)
  return option_;
}
::msg_maj::RoomOption* HistoryInnResp::release_option() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryInnResp.option)
  clear_has_option();
  ::msg_maj::RoomOption* temp = option_;
  option_ = NULL;
  return temp;
}
void HistoryInnResp::set_allocated_option(::msg_maj::RoomOption* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryInnResp.option)
}

// required .msg_maj.InnRecord inn = 5;
bool HistoryInnResp::has_inn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HistoryInnResp::set_has_inn() {
  _has_bits_[0] |= 0x00000008u;
}
void HistoryInnResp::clear_has_inn() {
  _has_bits_[0] &= ~0x00000008u;
}
void HistoryInnResp::clear_inn() {
  if (inn_ != NULL) inn_->::msg_maj::InnRecord::Clear();
  clear_has_inn();
}
const ::msg_maj::InnRecord& HistoryInnResp::inn() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnResp.inn)
  return inn_ != NULL ? *inn_ : *default_instance_->inn_;
}
::msg_maj::InnRecord* HistoryInnResp::mutable_inn() {
  set_has_inn();
  if (inn_ == NULL) {
    inn_ = new ::msg_maj::InnRecord;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryInnResp.inn)
  return inn_;
}
::msg_maj::InnRecord* HistoryInnResp::release_inn() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryInnResp.inn)
  clear_has_inn();
  ::msg_maj::InnRecord* temp = inn_;
  inn_ = NULL;
  return temp;
}
void HistoryInnResp::set_allocated_inn(::msg_maj::InnRecord* inn) {
  delete inn_;
  inn_ = inn;
  if (inn) {
    set_has_inn();
  } else {
    clear_has_inn();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryInnResp.inn)
}

// repeated .msg_maj.SeatTotalScore score_list = 6;
int HistoryInnResp::score_list_size() const {
  return score_list_.size();
}
void HistoryInnResp::clear_score_list() {
  score_list_.Clear();
}
const ::msg_maj::SeatTotalScore& HistoryInnResp::score_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryInnResp.score_list)
  return score_list_.Get(index);
}
::msg_maj::SeatTotalScore* HistoryInnResp::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryInnResp.score_list)
  return score_list_.Mutable(index);
}
::msg_maj::SeatTotalScore* HistoryInnResp::add_score_list() {
  // @@protoc_insertion_point(field_add:msg_maj.HistoryInnResp.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >*
HistoryInnResp::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.HistoryInnResp.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >&
HistoryInnResp::score_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.HistoryInnResp.score_list)
  return score_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayReq::kRecordIdFieldNumber;
const int ReplayReq::kInnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayReq::ReplayReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ReplayReq)
}

void ReplayReq::InitAsDefaultInstance() {
}

ReplayReq::ReplayReq(const ReplayReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ReplayReq)
}

void ReplayReq::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  inn_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayReq::~ReplayReq() {
  // @@protoc_insertion_point(destructor:msg_maj.ReplayReq)
  SharedDtor();
}

void ReplayReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayReq_descriptor_;
}

const ReplayReq& ReplayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

ReplayReq* ReplayReq::default_instance_ = NULL;

ReplayReq* ReplayReq::New(::google::protobuf::Arena* arena) const {
  ReplayReq* n = new ReplayReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ReplayReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReplayReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplayReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(record_id_, inn_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReplayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ReplayReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inn_id;
        break;
      }

      // required uint32 inn_id = 2;
      case 2: {
        if (tag == 16) {
         parse_inn_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inn_id_)));
          set_has_inn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ReplayReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ReplayReq)
  return false;
#undef DO_
}

void ReplayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ReplayReq)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_id(), output);
  }

  // required uint32 inn_id = 2;
  if (has_inn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ReplayReq)
}

::google::protobuf::uint8* ReplayReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ReplayReq)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_id(), target);
  }

  // required uint32 inn_id = 2;
  if (has_inn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ReplayReq)
  return target;
}

int ReplayReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.ReplayReq)
  int total_size = 0;

  if (has_record_id()) {
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  if (has_inn_id()) {
    // required uint32 inn_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());
  }

  return total_size;
}
int ReplayReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ReplayReq)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

    // required uint32 inn_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ReplayReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReplayReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ReplayReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ReplayReq)
    MergeFrom(*source);
  }
}

void ReplayReq::MergeFrom(const ReplayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ReplayReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_inn_id()) {
      set_inn_id(from.inn_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReplayReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ReplayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayReq::CopyFrom(const ReplayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ReplayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplayReq::Swap(ReplayReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplayReq::InternalSwap(ReplayReq* other) {
  std::swap(record_id_, other->record_id_);
  std::swap(inn_id_, other->inn_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayReq_descriptor_;
  metadata.reflection = ReplayReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplayReq

// required uint64 record_id = 1;
bool ReplayReq::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplayReq::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplayReq::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplayReq::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 ReplayReq::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayReq.record_id)
  return record_id_;
}
 void ReplayReq::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayReq.record_id)
}

// required uint32 inn_id = 2;
bool ReplayReq::has_inn_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplayReq::set_has_inn_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplayReq::clear_has_inn_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplayReq::clear_inn_id() {
  inn_id_ = 0u;
  clear_has_inn_id();
}
 ::google::protobuf::uint32 ReplayReq::inn_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayReq.inn_id)
  return inn_id_;
}
 void ReplayReq::set_inn_id(::google::protobuf::uint32 value) {
  set_has_inn_id();
  inn_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayReq.inn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayResp::kRoomInfoFieldNumber;
const int ReplayResp::kUserInfoListFieldNumber;
const int ReplayResp::kBankerSeatFieldNumber;
const int ReplayResp::kDiceFieldNumber;
const int ReplayResp::kSeatListFieldNumber;
const int ReplayResp::kActionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayResp::ReplayResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ReplayResp)
}

void ReplayResp::InitAsDefaultInstance() {
  room_info_ = const_cast< ::msg_maj::RoomInfo*>(&::msg_maj::RoomInfo::default_instance());
}

ReplayResp::ReplayResp(const ReplayResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ReplayResp)
}

void ReplayResp::SharedCtor() {
  _cached_size_ = 0;
  room_info_ = NULL;
  banker_seat_ = 0u;
  dice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayResp::~ReplayResp() {
  // @@protoc_insertion_point(destructor:msg_maj.ReplayResp)
  SharedDtor();
}

void ReplayResp::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
  }
}

void ReplayResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayResp_descriptor_;
}

const ReplayResp& ReplayResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

ReplayResp* ReplayResp::default_instance_ = NULL;

ReplayResp* ReplayResp::New(::google::protobuf::Arena* arena) const {
  ReplayResp* n = new ReplayResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplayResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ReplayResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReplayResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplayResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 13u) {
    ZR_(banker_seat_, dice_);
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::msg_maj::RoomInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  user_info_list_.Clear();
  seat_list_.Clear();
  action_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReplayResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ReplayResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.RoomInfo room_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info_list;
        break;
      }

      // repeated .msg_maj.RoleInfo user_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_user_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_banker_seat;
        break;
      }

      // required uint32 banker_seat = 3;
      case 3: {
        if (tag == 24) {
         parse_banker_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_seat_)));
          set_has_banker_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dice;
        break;
      }

      // required uint32 dice = 4;
      case 4: {
        if (tag == 32) {
         parse_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_)));
          set_has_dice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seat_list;
        break;
      }

      // repeated .msg_maj.SeatInfo seat_list = 5;
      case 5: {
        if (tag == 42) {
         parse_seat_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seat_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seat_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_seat_list;
        if (input->ExpectTag(50)) goto parse_loop_action_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .msg_maj.ReplayAction action_list = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_action_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_action_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_action_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ReplayResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ReplayResp)
  return false;
#undef DO_
}

void ReplayResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ReplayResp)
  // required .msg_maj.RoomInfo room_info = 1;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_info_, output);
  }

  // repeated .msg_maj.RoleInfo user_info_list = 2;
  for (unsigned int i = 0, n = this->user_info_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info_list(i), output);
  }

  // required uint32 banker_seat = 3;
  if (has_banker_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->banker_seat(), output);
  }

  // required uint32 dice = 4;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dice(), output);
  }

  // repeated .msg_maj.SeatInfo seat_list = 5;
  for (unsigned int i = 0, n = this->seat_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seat_list(i), output);
  }

  // repeated .msg_maj.ReplayAction action_list = 6;
  for (unsigned int i = 0, n = this->action_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->action_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ReplayResp)
}

::google::protobuf::uint8* ReplayResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ReplayResp)
  // required .msg_maj.RoomInfo room_info = 1;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->room_info_, false, target);
  }

  // repeated .msg_maj.RoleInfo user_info_list = 2;
  for (unsigned int i = 0, n = this->user_info_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->user_info_list(i), false, target);
  }

  // required uint32 banker_seat = 3;
  if (has_banker_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->banker_seat(), target);
  }

  // required uint32 dice = 4;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dice(), target);
  }

  // repeated .msg_maj.SeatInfo seat_list = 5;
  for (unsigned int i = 0, n = this->seat_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->seat_list(i), false, target);
  }

  // repeated .msg_maj.ReplayAction action_list = 6;
  for (unsigned int i = 0, n = this->action_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->action_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ReplayResp)
  return target;
}

int ReplayResp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.ReplayResp)
  int total_size = 0;

  if (has_room_info()) {
    // required .msg_maj.RoomInfo room_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_info_);
  }

  if (has_banker_seat()) {
    // required uint32 banker_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());
  }

  if (has_dice()) {
    // required uint32 dice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());
  }

  return total_size;
}
int ReplayResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ReplayResp)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .msg_maj.RoomInfo room_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_info_);

    // required uint32 banker_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());

    // required uint32 dice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .msg_maj.RoleInfo user_info_list = 2;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  // repeated .msg_maj.SeatInfo seat_list = 5;
  total_size += 1 * this->seat_list_size();
  for (int i = 0; i < this->seat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_list(i));
  }

  // repeated .msg_maj.ReplayAction action_list = 6;
  total_size += 1 * this->action_list_size();
  for (int i = 0; i < this->action_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ReplayResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReplayResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ReplayResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ReplayResp)
    MergeFrom(*source);
  }
}

void ReplayResp::MergeFrom(const ReplayResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ReplayResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_info_list_.MergeFrom(from.user_info_list_);
  seat_list_.MergeFrom(from.seat_list_);
  action_list_.MergeFrom(from.action_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_info()) {
      mutable_room_info()->::msg_maj::RoomInfo::MergeFrom(from.room_info());
    }
    if (from.has_banker_seat()) {
      set_banker_seat(from.banker_seat());
    }
    if (from.has_dice()) {
      set_dice(from.dice());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReplayResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ReplayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayResp::CopyFrom(const ReplayResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ReplayResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_room_info()) {
    if (!this->room_info_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->user_info_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->seat_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->action_list())) return false;
  return true;
}

void ReplayResp::Swap(ReplayResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplayResp::InternalSwap(ReplayResp* other) {
  std::swap(room_info_, other->room_info_);
  user_info_list_.UnsafeArenaSwap(&other->user_info_list_);
  std::swap(banker_seat_, other->banker_seat_);
  std::swap(dice_, other->dice_);
  seat_list_.UnsafeArenaSwap(&other->seat_list_);
  action_list_.UnsafeArenaSwap(&other->action_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplayResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayResp_descriptor_;
  metadata.reflection = ReplayResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplayResp

// required .msg_maj.RoomInfo room_info = 1;
bool ReplayResp::has_room_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplayResp::set_has_room_info() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplayResp::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplayResp::clear_room_info() {
  if (room_info_ != NULL) room_info_->::msg_maj::RoomInfo::Clear();
  clear_has_room_info();
}
const ::msg_maj::RoomInfo& ReplayResp::room_info() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.room_info)
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
::msg_maj::RoomInfo* ReplayResp::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) {
    room_info_ = new ::msg_maj::RoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.ReplayResp.room_info)
  return room_info_;
}
::msg_maj::RoomInfo* ReplayResp::release_room_info() {
  // @@protoc_insertion_point(field_release:msg_maj.ReplayResp.room_info)
  clear_has_room_info();
  ::msg_maj::RoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
void ReplayResp::set_allocated_room_info(::msg_maj::RoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.ReplayResp.room_info)
}

// repeated .msg_maj.RoleInfo user_info_list = 2;
int ReplayResp::user_info_list_size() const {
  return user_info_list_.size();
}
void ReplayResp::clear_user_info_list() {
  user_info_list_.Clear();
}
const ::msg_maj::RoleInfo& ReplayResp::user_info_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.user_info_list)
  return user_info_list_.Get(index);
}
::msg_maj::RoleInfo* ReplayResp::mutable_user_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.ReplayResp.user_info_list)
  return user_info_list_.Mutable(index);
}
::msg_maj::RoleInfo* ReplayResp::add_user_info_list() {
  // @@protoc_insertion_point(field_add:msg_maj.ReplayResp.user_info_list)
  return user_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::RoleInfo >*
ReplayResp::mutable_user_info_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.ReplayResp.user_info_list)
  return &user_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::RoleInfo >&
ReplayResp::user_info_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.ReplayResp.user_info_list)
  return user_info_list_;
}

// required uint32 banker_seat = 3;
bool ReplayResp::has_banker_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplayResp::set_has_banker_seat() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplayResp::clear_has_banker_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplayResp::clear_banker_seat() {
  banker_seat_ = 0u;
  clear_has_banker_seat();
}
 ::google::protobuf::uint32 ReplayResp::banker_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.banker_seat)
  return banker_seat_;
}
 void ReplayResp::set_banker_seat(::google::protobuf::uint32 value) {
  set_has_banker_seat();
  banker_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayResp.banker_seat)
}

// required uint32 dice = 4;
bool ReplayResp::has_dice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReplayResp::set_has_dice() {
  _has_bits_[0] |= 0x00000008u;
}
void ReplayResp::clear_has_dice() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReplayResp::clear_dice() {
  dice_ = 0u;
  clear_has_dice();
}
 ::google::protobuf::uint32 ReplayResp::dice() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.dice)
  return dice_;
}
 void ReplayResp::set_dice(::google::protobuf::uint32 value) {
  set_has_dice();
  dice_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayResp.dice)
}

// repeated .msg_maj.SeatInfo seat_list = 5;
int ReplayResp::seat_list_size() const {
  return seat_list_.size();
}
void ReplayResp::clear_seat_list() {
  seat_list_.Clear();
}
const ::msg_maj::SeatInfo& ReplayResp::seat_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.seat_list)
  return seat_list_.Get(index);
}
::msg_maj::SeatInfo* ReplayResp::mutable_seat_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.ReplayResp.seat_list)
  return seat_list_.Mutable(index);
}
::msg_maj::SeatInfo* ReplayResp::add_seat_list() {
  // @@protoc_insertion_point(field_add:msg_maj.ReplayResp.seat_list)
  return seat_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatInfo >*
ReplayResp::mutable_seat_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.ReplayResp.seat_list)
  return &seat_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatInfo >&
ReplayResp::seat_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.ReplayResp.seat_list)
  return seat_list_;
}

// repeated .msg_maj.ReplayAction action_list = 6;
int ReplayResp::action_list_size() const {
  return action_list_.size();
}
void ReplayResp::clear_action_list() {
  action_list_.Clear();
}
const ::msg_maj::ReplayAction& ReplayResp::action_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayResp.action_list)
  return action_list_.Get(index);
}
::msg_maj::ReplayAction* ReplayResp::mutable_action_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.ReplayResp.action_list)
  return action_list_.Mutable(index);
}
::msg_maj::ReplayAction* ReplayResp::add_action_list() {
  // @@protoc_insertion_point(field_add:msg_maj.ReplayResp.action_list)
  return action_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::ReplayAction >*
ReplayResp::mutable_action_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.ReplayResp.action_list)
  return &action_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::ReplayAction >&
ReplayResp::action_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.ReplayResp.action_list)
  return action_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRecord::kRecordIdFieldNumber;
const int HistoryRecord::kRoomIdFieldNumber;
const int HistoryRecord::kOptionFieldNumber;
const int HistoryRecord::kTimeFieldNumber;
const int HistoryRecord::kScoreListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRecord::HistoryRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryRecord)
}

void HistoryRecord::InitAsDefaultInstance() {
  option_ = const_cast< ::msg_maj::RoomOption*>(&::msg_maj::RoomOption::default_instance());
}

HistoryRecord::HistoryRecord(const HistoryRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryRecord)
}

void HistoryRecord::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = 0u;
  option_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryRecord::~HistoryRecord() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryRecord)
  SharedDtor();
}

void HistoryRecord::SharedDtor() {
  if (this != default_instance_) {
    delete option_;
  }
}

void HistoryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryRecord_descriptor_;
}

const HistoryRecord& HistoryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryRecord* HistoryRecord::default_instance_ = NULL;

HistoryRecord* HistoryRecord::New(::google::protobuf::Arena* arena) const {
  HistoryRecord* n = new HistoryRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryRecord)
  if (_has_bits_[0 / 32] & 15u) {
    record_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = 0u;
    if (has_option()) {
      if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // required uint32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_option;
        break;
      }

      // required .msg_maj.RoomOption option = 3;
      case 3: {
        if (tag == 26) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_option()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_score_list;
        break;
      }

      // repeated .msg_maj.SeatTotalScore score_list = 5;
      case 5: {
        if (tag == 42) {
         parse_score_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_score_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryRecord)
  return false;
#undef DO_
}

void HistoryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryRecord)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_id(), output);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // required .msg_maj.RoomOption option = 3;
  if (has_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->option_, output);
  }

  // required uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 5;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->score_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryRecord)
}

::google::protobuf::uint8* HistoryRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryRecord)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_id(), target);
  }

  // required uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // required .msg_maj.RoomOption option = 3;
  if (has_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->option_, false, target);
  }

  // required uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // repeated .msg_maj.SeatTotalScore score_list = 5;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->score_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryRecord)
  return target;
}

int HistoryRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.HistoryRecord)
  int total_size = 0;

  if (has_record_id()) {
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }

  if (has_room_id()) {
    // required uint32 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  if (has_option()) {
    // required .msg_maj.RoomOption option = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);
  }

  if (has_time()) {
    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
int HistoryRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryRecord)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 record_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());

    // required uint32 room_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());

    // required .msg_maj.RoomOption option = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->option_);

    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .msg_maj.SeatTotalScore score_list = 5;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryRecord)
    MergeFrom(*source);
  }
}

void HistoryRecord::MergeFrom(const HistoryRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  score_list_.MergeFrom(from.score_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_option()) {
      mutable_option()->::msg_maj::RoomOption::MergeFrom(from.option());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRecord::CopyFrom(const HistoryRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->score_list())) return false;
  return true;
}

void HistoryRecord::Swap(HistoryRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRecord::InternalSwap(HistoryRecord* other) {
  std::swap(record_id_, other->record_id_);
  std::swap(room_id_, other->room_id_);
  std::swap(option_, other->option_);
  std::swap(time_, other->time_);
  score_list_.UnsafeArenaSwap(&other->score_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryRecord_descriptor_;
  metadata.reflection = HistoryRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRecord

// required uint64 record_id = 1;
bool HistoryRecord::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryRecord::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryRecord::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryRecord::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryRecord::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecord.record_id)
  return record_id_;
}
 void HistoryRecord::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecord.record_id)
}

// required uint32 room_id = 2;
bool HistoryRecord::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryRecord::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryRecord::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryRecord::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
 ::google::protobuf::uint32 HistoryRecord::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecord.room_id)
  return room_id_;
}
 void HistoryRecord::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecord.room_id)
}

// required .msg_maj.RoomOption option = 3;
bool HistoryRecord::has_option() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HistoryRecord::set_has_option() {
  _has_bits_[0] |= 0x00000004u;
}
void HistoryRecord::clear_has_option() {
  _has_bits_[0] &= ~0x00000004u;
}
void HistoryRecord::clear_option() {
  if (option_ != NULL) option_->::msg_maj::RoomOption::Clear();
  clear_has_option();
}
const ::msg_maj::RoomOption& HistoryRecord::option() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecord.option)
  return option_ != NULL ? *option_ : *default_instance_->option_;
}
::msg_maj::RoomOption* HistoryRecord::mutable_option() {
  set_has_option();
  if (option_ == NULL) {
    option_ = new ::msg_maj::RoomOption;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecord.option)
  return option_;
}
::msg_maj::RoomOption* HistoryRecord::release_option() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecord.option)
  clear_has_option();
  ::msg_maj::RoomOption* temp = option_;
  option_ = NULL;
  return temp;
}
void HistoryRecord::set_allocated_option(::msg_maj::RoomOption* option) {
  delete option_;
  option_ = option;
  if (option) {
    set_has_option();
  } else {
    clear_has_option();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecord.option)
}

// required uint64 time = 4;
bool HistoryRecord::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HistoryRecord::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void HistoryRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void HistoryRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 HistoryRecord::time() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecord.time)
  return time_;
}
 void HistoryRecord::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecord.time)
}

// repeated .msg_maj.SeatTotalScore score_list = 5;
int HistoryRecord::score_list_size() const {
  return score_list_.size();
}
void HistoryRecord::clear_score_list() {
  score_list_.Clear();
}
const ::msg_maj::SeatTotalScore& HistoryRecord::score_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecord.score_list)
  return score_list_.Get(index);
}
::msg_maj::SeatTotalScore* HistoryRecord::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecord.score_list)
  return score_list_.Mutable(index);
}
::msg_maj::SeatTotalScore* HistoryRecord::add_score_list() {
  // @@protoc_insertion_point(field_add:msg_maj.HistoryRecord.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >*
HistoryRecord::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.HistoryRecord.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScore >&
HistoryRecord::score_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.HistoryRecord.score_list)
  return score_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatTotalScore::kSeatIdFieldNumber;
const int SeatTotalScore::kScoreFieldNumber;
const int SeatTotalScore::kNicknameFieldNumber;
const int SeatTotalScore::kActorAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatTotalScore::SeatTotalScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SeatTotalScore)
}

void SeatTotalScore::InitAsDefaultInstance() {
}

SeatTotalScore::SeatTotalScore(const SeatTotalScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SeatTotalScore)
}

void SeatTotalScore::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_id_ = 0u;
  score_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatTotalScore::~SeatTotalScore() {
  // @@protoc_insertion_point(destructor:msg_maj.SeatTotalScore)
  SharedDtor();
}

void SeatTotalScore::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SeatTotalScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatTotalScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatTotalScore_descriptor_;
}

const SeatTotalScore& SeatTotalScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

SeatTotalScore* SeatTotalScore::default_instance_ = NULL;

SeatTotalScore* SeatTotalScore::New(::google::protobuf::Arena* arena) const {
  SeatTotalScore* n = new SeatTotalScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatTotalScore::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SeatTotalScore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SeatTotalScore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SeatTotalScore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(seat_id_, score_);
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_actor_addr()) {
      actor_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SeatTotalScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SeatTotalScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // required string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SeatTotalScore.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actor_addr;
        break;
      }

      // optional string actor_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_actor_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actor_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actor_addr().data(), this->actor_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.SeatTotalScore.actor_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SeatTotalScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SeatTotalScore)
  return false;
#undef DO_
}

void SeatTotalScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SeatTotalScore)
  // required uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SeatTotalScore.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actor_addr().data(), this->actor_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SeatTotalScore.actor_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->actor_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SeatTotalScore)
}

::google::protobuf::uint8* SeatTotalScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SeatTotalScore)
  // required uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // required string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SeatTotalScore.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actor_addr().data(), this->actor_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.SeatTotalScore.actor_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->actor_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SeatTotalScore)
  return target;
}

int SeatTotalScore::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.SeatTotalScore)
  int total_size = 0;

  if (has_seat_id()) {
    // required uint32 seat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  if (has_score()) {
    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  if (has_nickname()) {
    // required string nickname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  return total_size;
}
int SeatTotalScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SeatTotalScore)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 seat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());

    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());

    // required string nickname = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actor_addr());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatTotalScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SeatTotalScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeatTotalScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatTotalScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SeatTotalScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SeatTotalScore)
    MergeFrom(*source);
  }
}

void SeatTotalScore::MergeFrom(const SeatTotalScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SeatTotalScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_actor_addr()) {
      set_has_actor_addr();
      actor_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actor_addr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SeatTotalScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SeatTotalScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatTotalScore::CopyFrom(const SeatTotalScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SeatTotalScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatTotalScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SeatTotalScore::Swap(SeatTotalScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatTotalScore::InternalSwap(SeatTotalScore* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(score_, other->score_);
  nickname_.Swap(&other->nickname_);
  actor_addr_.Swap(&other->actor_addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatTotalScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatTotalScore_descriptor_;
  metadata.reflection = SeatTotalScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatTotalScore

// required uint32 seat_id = 1;
bool SeatTotalScore::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SeatTotalScore::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SeatTotalScore::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SeatTotalScore::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
 ::google::protobuf::uint32 SeatTotalScore::seat_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScore.seat_id)
  return seat_id_;
}
 void SeatTotalScore::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScore.seat_id)
}

// required int32 score = 2;
bool SeatTotalScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeatTotalScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SeatTotalScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeatTotalScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 SeatTotalScore::score() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScore.score)
  return score_;
}
 void SeatTotalScore::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScore.score)
}

// required string nickname = 3;
bool SeatTotalScore::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SeatTotalScore::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
void SeatTotalScore::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
void SeatTotalScore::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& SeatTotalScore::nickname() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScore.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatTotalScore::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScore.nickname)
}
 void SeatTotalScore::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SeatTotalScore.nickname)
}
 void SeatTotalScore::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SeatTotalScore.nickname)
}
 ::std::string* SeatTotalScore::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_maj.SeatTotalScore.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeatTotalScore::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_maj.SeatTotalScore.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatTotalScore::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SeatTotalScore.nickname)
}

// optional string actor_addr = 4;
bool SeatTotalScore::has_actor_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SeatTotalScore::set_has_actor_addr() {
  _has_bits_[0] |= 0x00000008u;
}
void SeatTotalScore::clear_has_actor_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
void SeatTotalScore::clear_actor_addr() {
  actor_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actor_addr();
}
 const ::std::string& SeatTotalScore::actor_addr() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScore.actor_addr)
  return actor_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatTotalScore::set_actor_addr(const ::std::string& value) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScore.actor_addr)
}
 void SeatTotalScore::set_actor_addr(const char* value) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.SeatTotalScore.actor_addr)
}
 void SeatTotalScore::set_actor_addr(const char* value, size_t size) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.SeatTotalScore.actor_addr)
}
 ::std::string* SeatTotalScore::mutable_actor_addr() {
  set_has_actor_addr();
  // @@protoc_insertion_point(field_mutable:msg_maj.SeatTotalScore.actor_addr)
  return actor_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SeatTotalScore::release_actor_addr() {
  // @@protoc_insertion_point(field_release:msg_maj.SeatTotalScore.actor_addr)
  clear_has_actor_addr();
  return actor_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SeatTotalScore::set_allocated_actor_addr(::std::string* actor_addr) {
  if (actor_addr != NULL) {
    set_has_actor_addr();
  } else {
    clear_has_actor_addr();
  }
  actor_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_addr);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.SeatTotalScore.actor_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnRecord::kInnIdFieldNumber;
const int InnRecord::kSeatResultFieldNumber;
const int InnRecord::kBankerSeatFieldNumber;
const int InnRecord::kDiceFieldNumber;
const int InnRecord::kCloseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnRecord::InnRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.InnRecord)
}

void InnRecord::InitAsDefaultInstance() {
}

InnRecord::InnRecord(const InnRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.InnRecord)
}

void InnRecord::SharedCtor() {
  _cached_size_ = 0;
  inn_id_ = 0u;
  banker_seat_ = 0u;
  dice_ = 0u;
  close_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnRecord::~InnRecord() {
  // @@protoc_insertion_point(destructor:msg_maj.InnRecord)
  SharedDtor();
}

void InnRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnRecord_descriptor_;
}

const InnRecord& InnRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

InnRecord* InnRecord::default_instance_ = NULL;

InnRecord* InnRecord::New(::google::protobuf::Arena* arena) const {
  InnRecord* n = new InnRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.InnRecord)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InnRecord, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InnRecord*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(inn_id_, close_type_);

#undef ZR_HELPER_
#undef ZR_

  seat_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.InnRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 inn_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inn_id_)));
          set_has_inn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_seat_result;
        break;
      }

      // repeated .msg_maj.GameResultSeat seat_result = 2;
      case 2: {
        if (tag == 18) {
         parse_seat_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seat_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seat_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_seat_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_banker_seat;
        break;
      }

      // required uint32 banker_seat = 3;
      case 3: {
        if (tag == 24) {
         parse_banker_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_seat_)));
          set_has_banker_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dice;
        break;
      }

      // required uint32 dice = 4;
      case 4: {
        if (tag == 32) {
         parse_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_)));
          set_has_dice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_close_type;
        break;
      }

      // optional uint32 close_type = 5;
      case 5: {
        if (tag == 40) {
         parse_close_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_type_)));
          set_has_close_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.InnRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.InnRecord)
  return false;
#undef DO_
}

void InnRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.InnRecord)
  // required uint32 inn_id = 1;
  if (has_inn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inn_id(), output);
  }

  // repeated .msg_maj.GameResultSeat seat_result = 2;
  for (unsigned int i = 0, n = this->seat_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->seat_result(i), output);
  }

  // required uint32 banker_seat = 3;
  if (has_banker_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->banker_seat(), output);
  }

  // required uint32 dice = 4;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dice(), output);
  }

  // optional uint32 close_type = 5;
  if (has_close_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->close_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.InnRecord)
}

::google::protobuf::uint8* InnRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.InnRecord)
  // required uint32 inn_id = 1;
  if (has_inn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inn_id(), target);
  }

  // repeated .msg_maj.GameResultSeat seat_result = 2;
  for (unsigned int i = 0, n = this->seat_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->seat_result(i), false, target);
  }

  // required uint32 banker_seat = 3;
  if (has_banker_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->banker_seat(), target);
  }

  // required uint32 dice = 4;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dice(), target);
  }

  // optional uint32 close_type = 5;
  if (has_close_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->close_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.InnRecord)
  return target;
}

int InnRecord::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.InnRecord)
  int total_size = 0;

  if (has_inn_id()) {
    // required uint32 inn_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());
  }

  if (has_banker_seat()) {
    // required uint32 banker_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());
  }

  if (has_dice()) {
    // required uint32 dice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());
  }

  return total_size;
}
int InnRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.InnRecord)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required uint32 inn_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inn_id());

    // required uint32 banker_seat = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());

    // required uint32 dice = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 close_type = 5;
  if (has_close_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close_type());
  }

  // repeated .msg_maj.GameResultSeat seat_result = 2;
  total_size += 1 * this->seat_result_size();
  for (int i = 0; i < this->seat_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.InnRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InnRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.InnRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.InnRecord)
    MergeFrom(*source);
  }
}

void InnRecord::MergeFrom(const InnRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.InnRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seat_result_.MergeFrom(from.seat_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inn_id()) {
      set_inn_id(from.inn_id());
    }
    if (from.has_banker_seat()) {
      set_banker_seat(from.banker_seat());
    }
    if (from.has_dice()) {
      set_dice(from.dice());
    }
    if (from.has_close_type()) {
      set_close_type(from.close_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.InnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnRecord::CopyFrom(const InnRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.InnRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seat_result())) return false;
  return true;
}

void InnRecord::Swap(InnRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnRecord::InternalSwap(InnRecord* other) {
  std::swap(inn_id_, other->inn_id_);
  seat_result_.UnsafeArenaSwap(&other->seat_result_);
  std::swap(banker_seat_, other->banker_seat_);
  std::swap(dice_, other->dice_);
  std::swap(close_type_, other->close_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnRecord_descriptor_;
  metadata.reflection = InnRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnRecord

// required uint32 inn_id = 1;
bool InnRecord::has_inn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnRecord::set_has_inn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InnRecord::clear_has_inn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnRecord::clear_inn_id() {
  inn_id_ = 0u;
  clear_has_inn_id();
}
 ::google::protobuf::uint32 InnRecord::inn_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecord.inn_id)
  return inn_id_;
}
 void InnRecord::set_inn_id(::google::protobuf::uint32 value) {
  set_has_inn_id();
  inn_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecord.inn_id)
}

// repeated .msg_maj.GameResultSeat seat_result = 2;
int InnRecord::seat_result_size() const {
  return seat_result_.size();
}
void InnRecord::clear_seat_result() {
  seat_result_.Clear();
}
const ::msg_maj::GameResultSeat& InnRecord::seat_result(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecord.seat_result)
  return seat_result_.Get(index);
}
::msg_maj::GameResultSeat* InnRecord::mutable_seat_result(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnRecord.seat_result)
  return seat_result_.Mutable(index);
}
::msg_maj::GameResultSeat* InnRecord::add_seat_result() {
  // @@protoc_insertion_point(field_add:msg_maj.InnRecord.seat_result)
  return seat_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::GameResultSeat >*
InnRecord::mutable_seat_result() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnRecord.seat_result)
  return &seat_result_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::GameResultSeat >&
InnRecord::seat_result() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnRecord.seat_result)
  return seat_result_;
}

// required uint32 banker_seat = 3;
bool InnRecord::has_banker_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnRecord::set_has_banker_seat() {
  _has_bits_[0] |= 0x00000004u;
}
void InnRecord::clear_has_banker_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnRecord::clear_banker_seat() {
  banker_seat_ = 0u;
  clear_has_banker_seat();
}
 ::google::protobuf::uint32 InnRecord::banker_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecord.banker_seat)
  return banker_seat_;
}
 void InnRecord::set_banker_seat(::google::protobuf::uint32 value) {
  set_has_banker_seat();
  banker_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecord.banker_seat)
}

// required uint32 dice = 4;
bool InnRecord::has_dice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InnRecord::set_has_dice() {
  _has_bits_[0] |= 0x00000008u;
}
void InnRecord::clear_has_dice() {
  _has_bits_[0] &= ~0x00000008u;
}
void InnRecord::clear_dice() {
  dice_ = 0u;
  clear_has_dice();
}
 ::google::protobuf::uint32 InnRecord::dice() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecord.dice)
  return dice_;
}
 void InnRecord::set_dice(::google::protobuf::uint32 value) {
  set_has_dice();
  dice_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecord.dice)
}

// optional uint32 close_type = 5;
bool InnRecord::has_close_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InnRecord::set_has_close_type() {
  _has_bits_[0] |= 0x00000010u;
}
void InnRecord::clear_has_close_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void InnRecord::clear_close_type() {
  close_type_ = 0u;
  clear_has_close_type();
}
 ::google::protobuf::uint32 InnRecord::close_type() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecord.close_type)
  return close_type_;
}
 void InnRecord::set_close_type(::google::protobuf::uint32 value) {
  set_has_close_type();
  close_type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecord.close_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplayAction::kEventFieldNumber;
const int ReplayAction::kActorSeatFieldNumber;
const int ReplayAction::kVictimSeatFieldNumber;
const int ReplayAction::kHuInfoFieldNumber;
const int ReplayAction::kEventTileListFieldNumber;
const int ReplayAction::kDeskTileCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplayAction::ReplayAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.ReplayAction)
}

void ReplayAction::InitAsDefaultInstance() {
  hu_info_ = const_cast< ::msg_maj::HuInfo*>(&::msg_maj::HuInfo::default_instance());
}

ReplayAction::ReplayAction(const ReplayAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.ReplayAction)
}

void ReplayAction::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
  actor_seat_ = 0u;
  victim_seat_ = 0;
  hu_info_ = NULL;
  desk_tile_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayAction::~ReplayAction() {
  // @@protoc_insertion_point(destructor:msg_maj.ReplayAction)
  SharedDtor();
}

void ReplayAction::SharedDtor() {
  if (this != default_instance_) {
    delete hu_info_;
  }
}

void ReplayAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayAction_descriptor_;
}

const ReplayAction& ReplayAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

ReplayAction* ReplayAction::default_instance_ = NULL;

ReplayAction* ReplayAction::New(::google::protobuf::Arena* arena) const {
  ReplayAction* n = new ReplayAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplayAction::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.ReplayAction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReplayAction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReplayAction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 47u) {
    ZR_(event_, actor_seat_);
    ZR_(victim_seat_, desk_tile_count_);
    if (has_hu_info()) {
      if (hu_info_ != NULL) hu_info_->::msg_maj::HuInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  event_tile_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReplayAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.ReplayAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_maj.event_type event = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_maj::event_type_IsValid(value)) {
            set_event(static_cast< ::msg_maj::event_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_actor_seat;
        break;
      }

      // required uint32 actor_seat = 2;
      case 2: {
        if (tag == 16) {
         parse_actor_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actor_seat_)));
          set_has_actor_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_victim_seat;
        break;
      }

      // optional int32 victim_seat = 3;
      case 3: {
        if (tag == 24) {
         parse_victim_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_seat_)));
          set_has_victim_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hu_info;
        break;
      }

      // optional .msg_maj.HuInfo hu_info = 4;
      case 4: {
        if (tag == 34) {
         parse_hu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hu_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_tile_list;
        break;
      }

      // repeated uint32 event_tile_list = 5;
      case 5: {
        if (tag == 40) {
         parse_event_tile_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_event_tile_list())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_event_tile_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_tile_list;
        if (input->ExpectTag(48)) goto parse_desk_tile_count;
        break;
      }

      // optional int32 desk_tile_count = 6;
      case 6: {
        if (tag == 48) {
         parse_desk_tile_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_tile_count_)));
          set_has_desk_tile_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.ReplayAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.ReplayAction)
  return false;
#undef DO_
}

void ReplayAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.ReplayAction)
  // required .msg_maj.event_type event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // required uint32 actor_seat = 2;
  if (has_actor_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actor_seat(), output);
  }

  // optional int32 victim_seat = 3;
  if (has_victim_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->victim_seat(), output);
  }

  // optional .msg_maj.HuInfo hu_info = 4;
  if (has_hu_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hu_info_, output);
  }

  // repeated uint32 event_tile_list = 5;
  for (int i = 0; i < this->event_tile_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->event_tile_list(i), output);
  }

  // optional int32 desk_tile_count = 6;
  if (has_desk_tile_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->desk_tile_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.ReplayAction)
}

::google::protobuf::uint8* ReplayAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.ReplayAction)
  // required .msg_maj.event_type event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // required uint32 actor_seat = 2;
  if (has_actor_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actor_seat(), target);
  }

  // optional int32 victim_seat = 3;
  if (has_victim_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->victim_seat(), target);
  }

  // optional .msg_maj.HuInfo hu_info = 4;
  if (has_hu_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hu_info_, false, target);
  }

  // repeated uint32 event_tile_list = 5;
  for (int i = 0; i < this->event_tile_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->event_tile_list(i), target);
  }

  // optional int32 desk_tile_count = 6;
  if (has_desk_tile_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->desk_tile_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.ReplayAction)
  return target;
}

int ReplayAction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.ReplayAction)
  int total_size = 0;

  if (has_event()) {
    // required .msg_maj.event_type event = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
  }

  if (has_actor_seat()) {
    // required uint32 actor_seat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor_seat());
  }

  return total_size;
}
int ReplayAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.ReplayAction)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .msg_maj.event_type event = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());

    // required uint32 actor_seat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actor_seat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 44u) {
    // optional int32 victim_seat = 3;
    if (has_victim_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_seat());
    }

    // optional .msg_maj.HuInfo hu_info = 4;
    if (has_hu_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hu_info_);
    }

    // optional int32 desk_tile_count = 6;
    if (has_desk_tile_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_tile_count());
    }

  }
  // repeated uint32 event_tile_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->event_tile_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->event_tile_list(i));
    }
    total_size += 1 * this->event_tile_list_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.ReplayAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReplayAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplayAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.ReplayAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.ReplayAction)
    MergeFrom(*source);
  }
}

void ReplayAction::MergeFrom(const ReplayAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.ReplayAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  event_tile_list_.MergeFrom(from.event_tile_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_actor_seat()) {
      set_actor_seat(from.actor_seat());
    }
    if (from.has_victim_seat()) {
      set_victim_seat(from.victim_seat());
    }
    if (from.has_hu_info()) {
      mutable_hu_info()->::msg_maj::HuInfo::MergeFrom(from.hu_info());
    }
    if (from.has_desk_tile_count()) {
      set_desk_tile_count(from.desk_tile_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReplayAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.ReplayAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayAction::CopyFrom(const ReplayAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.ReplayAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hu_info()) {
    if (!this->hu_info_->IsInitialized()) return false;
  }
  return true;
}

void ReplayAction::Swap(ReplayAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplayAction::InternalSwap(ReplayAction* other) {
  std::swap(event_, other->event_);
  std::swap(actor_seat_, other->actor_seat_);
  std::swap(victim_seat_, other->victim_seat_);
  std::swap(hu_info_, other->hu_info_);
  event_tile_list_.UnsafeArenaSwap(&other->event_tile_list_);
  std::swap(desk_tile_count_, other->desk_tile_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplayAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayAction_descriptor_;
  metadata.reflection = ReplayAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplayAction

// required .msg_maj.event_type event = 1;
bool ReplayAction::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplayAction::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplayAction::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplayAction::clear_event() {
  event_ = 0;
  clear_has_event();
}
 ::msg_maj::event_type ReplayAction::event() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.event)
  return static_cast< ::msg_maj::event_type >(event_);
}
 void ReplayAction::set_event(::msg_maj::event_type value) {
  assert(::msg_maj::event_type_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayAction.event)
}

// required uint32 actor_seat = 2;
bool ReplayAction::has_actor_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplayAction::set_has_actor_seat() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplayAction::clear_has_actor_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplayAction::clear_actor_seat() {
  actor_seat_ = 0u;
  clear_has_actor_seat();
}
 ::google::protobuf::uint32 ReplayAction::actor_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.actor_seat)
  return actor_seat_;
}
 void ReplayAction::set_actor_seat(::google::protobuf::uint32 value) {
  set_has_actor_seat();
  actor_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayAction.actor_seat)
}

// optional int32 victim_seat = 3;
bool ReplayAction::has_victim_seat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplayAction::set_has_victim_seat() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplayAction::clear_has_victim_seat() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplayAction::clear_victim_seat() {
  victim_seat_ = 0;
  clear_has_victim_seat();
}
 ::google::protobuf::int32 ReplayAction::victim_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.victim_seat)
  return victim_seat_;
}
 void ReplayAction::set_victim_seat(::google::protobuf::int32 value) {
  set_has_victim_seat();
  victim_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayAction.victim_seat)
}

// optional .msg_maj.HuInfo hu_info = 4;
bool ReplayAction::has_hu_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReplayAction::set_has_hu_info() {
  _has_bits_[0] |= 0x00000008u;
}
void ReplayAction::clear_has_hu_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReplayAction::clear_hu_info() {
  if (hu_info_ != NULL) hu_info_->::msg_maj::HuInfo::Clear();
  clear_has_hu_info();
}
const ::msg_maj::HuInfo& ReplayAction::hu_info() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.hu_info)
  return hu_info_ != NULL ? *hu_info_ : *default_instance_->hu_info_;
}
::msg_maj::HuInfo* ReplayAction::mutable_hu_info() {
  set_has_hu_info();
  if (hu_info_ == NULL) {
    hu_info_ = new ::msg_maj::HuInfo;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.ReplayAction.hu_info)
  return hu_info_;
}
::msg_maj::HuInfo* ReplayAction::release_hu_info() {
  // @@protoc_insertion_point(field_release:msg_maj.ReplayAction.hu_info)
  clear_has_hu_info();
  ::msg_maj::HuInfo* temp = hu_info_;
  hu_info_ = NULL;
  return temp;
}
void ReplayAction::set_allocated_hu_info(::msg_maj::HuInfo* hu_info) {
  delete hu_info_;
  hu_info_ = hu_info;
  if (hu_info) {
    set_has_hu_info();
  } else {
    clear_has_hu_info();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.ReplayAction.hu_info)
}

// repeated uint32 event_tile_list = 5;
int ReplayAction::event_tile_list_size() const {
  return event_tile_list_.size();
}
void ReplayAction::clear_event_tile_list() {
  event_tile_list_.Clear();
}
 ::google::protobuf::uint32 ReplayAction::event_tile_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.event_tile_list)
  return event_tile_list_.Get(index);
}
 void ReplayAction::set_event_tile_list(int index, ::google::protobuf::uint32 value) {
  event_tile_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg_maj.ReplayAction.event_tile_list)
}
 void ReplayAction::add_event_tile_list(::google::protobuf::uint32 value) {
  event_tile_list_.Add(value);
  // @@protoc_insertion_point(field_add:msg_maj.ReplayAction.event_tile_list)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReplayAction::event_tile_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.ReplayAction.event_tile_list)
  return event_tile_list_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReplayAction::mutable_event_tile_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.ReplayAction.event_tile_list)
  return &event_tile_list_;
}

// optional int32 desk_tile_count = 6;
bool ReplayAction::has_desk_tile_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReplayAction::set_has_desk_tile_count() {
  _has_bits_[0] |= 0x00000020u;
}
void ReplayAction::clear_has_desk_tile_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReplayAction::clear_desk_tile_count() {
  desk_tile_count_ = 0;
  clear_has_desk_tile_count();
}
 ::google::protobuf::int32 ReplayAction::desk_tile_count() const {
  // @@protoc_insertion_point(field_get:msg_maj.ReplayAction.desk_tile_count)
  return desk_tile_count_;
}
 void ReplayAction::set_desk_tile_count(::google::protobuf::int32 value) {
  set_has_desk_tile_count();
  desk_tile_count_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.ReplayAction.desk_tile_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HistoryRecordS::kRecordIdFieldNumber;
const int HistoryRecordS::kRoomIdFieldNumber;
const int HistoryRecordS::kRoomInfoFieldNumber;
const int HistoryRecordS::kRoleInfoFieldNumber;
const int HistoryRecordS::kTimeFieldNumber;
const int HistoryRecordS::kInnrecordFieldNumber;
const int HistoryRecordS::kSeatTotalFieldNumber;
const int HistoryRecordS::kInnReplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HistoryRecordS::HistoryRecordS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.HistoryRecordS)
}

void HistoryRecordS::InitAsDefaultInstance() {
  room_info_ = const_cast< ::msg_maj::RoomInfo*>(&::msg_maj::RoomInfo::default_instance());
  role_info_ = const_cast< ::msg_maj::RoleInfoListS*>(&::msg_maj::RoleInfoListS::default_instance());
  innrecord_ = const_cast< ::msg_maj::InnRecordListS*>(&::msg_maj::InnRecordListS::default_instance());
  seat_total_ = const_cast< ::msg_maj::SeatTotalS*>(&::msg_maj::SeatTotalS::default_instance());
  inn_replay_ = const_cast< ::msg_maj::InnReplayActionListS*>(&::msg_maj::InnReplayActionListS::default_instance());
}

HistoryRecordS::HistoryRecordS(const HistoryRecordS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.HistoryRecordS)
}

void HistoryRecordS::SharedCtor() {
  _cached_size_ = 0;
  record_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = 0u;
  room_info_ = NULL;
  role_info_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  innrecord_ = NULL;
  seat_total_ = NULL;
  inn_replay_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryRecordS::~HistoryRecordS() {
  // @@protoc_insertion_point(destructor:msg_maj.HistoryRecordS)
  SharedDtor();
}

void HistoryRecordS::SharedDtor() {
  if (this != default_instance_) {
    delete room_info_;
    delete role_info_;
    delete innrecord_;
    delete seat_total_;
    delete inn_replay_;
  }
}

void HistoryRecordS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRecordS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryRecordS_descriptor_;
}

const HistoryRecordS& HistoryRecordS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

HistoryRecordS* HistoryRecordS::default_instance_ = NULL;

HistoryRecordS* HistoryRecordS::New(::google::protobuf::Arena* arena) const {
  HistoryRecordS* n = new HistoryRecordS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HistoryRecordS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.HistoryRecordS)
  if (_has_bits_[0 / 32] & 255u) {
    record_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = 0u;
    if (has_room_info()) {
      if (room_info_ != NULL) room_info_->::msg_maj::RoomInfo::Clear();
    }
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::msg_maj::RoleInfoListS::Clear();
    }
    time_ = GOOGLE_ULONGLONG(0);
    if (has_innrecord()) {
      if (innrecord_ != NULL) innrecord_->::msg_maj::InnRecordListS::Clear();
    }
    if (has_seat_total()) {
      if (seat_total_ != NULL) seat_total_->::msg_maj::SeatTotalS::Clear();
    }
    if (has_inn_replay()) {
      if (inn_replay_ != NULL) inn_replay_->::msg_maj::InnReplayActionListS::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HistoryRecordS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.HistoryRecordS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 record_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_id_)));
          set_has_record_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional uint32 room_id = 2;
      case 2: {
        if (tag == 16) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_info;
        break;
      }

      // optional .msg_maj.RoomInfo room_info = 3;
      case 3: {
        if (tag == 26) {
         parse_room_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_role_info;
        break;
      }

      // optional .msg_maj.RoleInfoListS role_info = 4;
      case 4: {
        if (tag == 34) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_innrecord;
        break;
      }

      // optional .msg_maj.InnRecordListS innrecord = 6;
      case 6: {
        if (tag == 50) {
         parse_innrecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_innrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_seat_total;
        break;
      }

      // optional .msg_maj.SeatTotalS seat_total = 7;
      case 7: {
        if (tag == 58) {
         parse_seat_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seat_total()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_inn_replay;
        break;
      }

      // optional .msg_maj.InnReplayActionListS inn_replay = 8;
      case 8: {
        if (tag == 66) {
         parse_inn_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inn_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.HistoryRecordS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.HistoryRecordS)
  return false;
#undef DO_
}

void HistoryRecordS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.HistoryRecordS)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->record_id(), output);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  // optional .msg_maj.RoomInfo room_info = 3;
  if (has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->room_info_, output);
  }

  // optional .msg_maj.RoleInfoListS role_info = 4;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->role_info_, output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional .msg_maj.InnRecordListS innrecord = 6;
  if (has_innrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->innrecord_, output);
  }

  // optional .msg_maj.SeatTotalS seat_total = 7;
  if (has_seat_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->seat_total_, output);
  }

  // optional .msg_maj.InnReplayActionListS inn_replay = 8;
  if (has_inn_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->inn_replay_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.HistoryRecordS)
}

::google::protobuf::uint8* HistoryRecordS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.HistoryRecordS)
  // required uint64 record_id = 1;
  if (has_record_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->record_id(), target);
  }

  // optional uint32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  // optional .msg_maj.RoomInfo room_info = 3;
  if (has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->room_info_, false, target);
  }

  // optional .msg_maj.RoleInfoListS role_info = 4;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->role_info_, false, target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional .msg_maj.InnRecordListS innrecord = 6;
  if (has_innrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->innrecord_, false, target);
  }

  // optional .msg_maj.SeatTotalS seat_total = 7;
  if (has_seat_total()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->seat_total_, false, target);
  }

  // optional .msg_maj.InnReplayActionListS inn_replay = 8;
  if (has_inn_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->inn_replay_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.HistoryRecordS)
  return target;
}

int HistoryRecordS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.HistoryRecordS)
  int total_size = 0;

  // required uint64 record_id = 1;
  if (has_record_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->record_id());
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional uint32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->room_id());
    }

    // optional .msg_maj.RoomInfo room_info = 3;
    if (has_room_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->room_info_);
    }

    // optional .msg_maj.RoleInfoListS role_info = 4;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->role_info_);
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .msg_maj.InnRecordListS innrecord = 6;
    if (has_innrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->innrecord_);
    }

    // optional .msg_maj.SeatTotalS seat_total = 7;
    if (has_seat_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->seat_total_);
    }

    // optional .msg_maj.InnReplayActionListS inn_replay = 8;
    if (has_inn_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->inn_replay_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRecordS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.HistoryRecordS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HistoryRecordS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HistoryRecordS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.HistoryRecordS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.HistoryRecordS)
    MergeFrom(*source);
  }
}

void HistoryRecordS::MergeFrom(const HistoryRecordS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.HistoryRecordS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record_id()) {
      set_record_id(from.record_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_info()) {
      mutable_room_info()->::msg_maj::RoomInfo::MergeFrom(from.room_info());
    }
    if (from.has_role_info()) {
      mutable_role_info()->::msg_maj::RoleInfoListS::MergeFrom(from.role_info());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_innrecord()) {
      mutable_innrecord()->::msg_maj::InnRecordListS::MergeFrom(from.innrecord());
    }
    if (from.has_seat_total()) {
      mutable_seat_total()->::msg_maj::SeatTotalS::MergeFrom(from.seat_total());
    }
    if (from.has_inn_replay()) {
      mutable_inn_replay()->::msg_maj::InnReplayActionListS::MergeFrom(from.inn_replay());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HistoryRecordS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.HistoryRecordS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRecordS::CopyFrom(const HistoryRecordS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.HistoryRecordS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRecordS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room_info()) {
    if (!this->room_info_->IsInitialized()) return false;
  }
  if (has_role_info()) {
    if (!this->role_info_->IsInitialized()) return false;
  }
  if (has_innrecord()) {
    if (!this->innrecord_->IsInitialized()) return false;
  }
  if (has_seat_total()) {
    if (!this->seat_total_->IsInitialized()) return false;
  }
  if (has_inn_replay()) {
    if (!this->inn_replay_->IsInitialized()) return false;
  }
  return true;
}

void HistoryRecordS::Swap(HistoryRecordS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HistoryRecordS::InternalSwap(HistoryRecordS* other) {
  std::swap(record_id_, other->record_id_);
  std::swap(room_id_, other->room_id_);
  std::swap(room_info_, other->room_info_);
  std::swap(role_info_, other->role_info_);
  std::swap(time_, other->time_);
  std::swap(innrecord_, other->innrecord_);
  std::swap(seat_total_, other->seat_total_);
  std::swap(inn_replay_, other->inn_replay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HistoryRecordS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryRecordS_descriptor_;
  metadata.reflection = HistoryRecordS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HistoryRecordS

// required uint64 record_id = 1;
bool HistoryRecordS::has_record_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HistoryRecordS::set_has_record_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HistoryRecordS::clear_has_record_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HistoryRecordS::clear_record_id() {
  record_id_ = GOOGLE_ULONGLONG(0);
  clear_has_record_id();
}
 ::google::protobuf::uint64 HistoryRecordS::record_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.record_id)
  return record_id_;
}
 void HistoryRecordS::set_record_id(::google::protobuf::uint64 value) {
  set_has_record_id();
  record_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecordS.record_id)
}

// optional uint32 room_id = 2;
bool HistoryRecordS::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HistoryRecordS::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
void HistoryRecordS::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void HistoryRecordS::clear_room_id() {
  room_id_ = 0u;
  clear_has_room_id();
}
 ::google::protobuf::uint32 HistoryRecordS::room_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.room_id)
  return room_id_;
}
 void HistoryRecordS::set_room_id(::google::protobuf::uint32 value) {
  set_has_room_id();
  room_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecordS.room_id)
}

// optional .msg_maj.RoomInfo room_info = 3;
bool HistoryRecordS::has_room_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HistoryRecordS::set_has_room_info() {
  _has_bits_[0] |= 0x00000004u;
}
void HistoryRecordS::clear_has_room_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void HistoryRecordS::clear_room_info() {
  if (room_info_ != NULL) room_info_->::msg_maj::RoomInfo::Clear();
  clear_has_room_info();
}
const ::msg_maj::RoomInfo& HistoryRecordS::room_info() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.room_info)
  return room_info_ != NULL ? *room_info_ : *default_instance_->room_info_;
}
::msg_maj::RoomInfo* HistoryRecordS::mutable_room_info() {
  set_has_room_info();
  if (room_info_ == NULL) {
    room_info_ = new ::msg_maj::RoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecordS.room_info)
  return room_info_;
}
::msg_maj::RoomInfo* HistoryRecordS::release_room_info() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecordS.room_info)
  clear_has_room_info();
  ::msg_maj::RoomInfo* temp = room_info_;
  room_info_ = NULL;
  return temp;
}
void HistoryRecordS::set_allocated_room_info(::msg_maj::RoomInfo* room_info) {
  delete room_info_;
  room_info_ = room_info;
  if (room_info) {
    set_has_room_info();
  } else {
    clear_has_room_info();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecordS.room_info)
}

// optional .msg_maj.RoleInfoListS role_info = 4;
bool HistoryRecordS::has_role_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HistoryRecordS::set_has_role_info() {
  _has_bits_[0] |= 0x00000008u;
}
void HistoryRecordS::clear_has_role_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void HistoryRecordS::clear_role_info() {
  if (role_info_ != NULL) role_info_->::msg_maj::RoleInfoListS::Clear();
  clear_has_role_info();
}
const ::msg_maj::RoleInfoListS& HistoryRecordS::role_info() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.role_info)
  return role_info_ != NULL ? *role_info_ : *default_instance_->role_info_;
}
::msg_maj::RoleInfoListS* HistoryRecordS::mutable_role_info() {
  set_has_role_info();
  if (role_info_ == NULL) {
    role_info_ = new ::msg_maj::RoleInfoListS;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecordS.role_info)
  return role_info_;
}
::msg_maj::RoleInfoListS* HistoryRecordS::release_role_info() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecordS.role_info)
  clear_has_role_info();
  ::msg_maj::RoleInfoListS* temp = role_info_;
  role_info_ = NULL;
  return temp;
}
void HistoryRecordS::set_allocated_role_info(::msg_maj::RoleInfoListS* role_info) {
  delete role_info_;
  role_info_ = role_info;
  if (role_info) {
    set_has_role_info();
  } else {
    clear_has_role_info();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecordS.role_info)
}

// optional uint64 time = 5;
bool HistoryRecordS::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HistoryRecordS::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void HistoryRecordS::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void HistoryRecordS::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 HistoryRecordS::time() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.time)
  return time_;
}
 void HistoryRecordS::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.HistoryRecordS.time)
}

// optional .msg_maj.InnRecordListS innrecord = 6;
bool HistoryRecordS::has_innrecord() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HistoryRecordS::set_has_innrecord() {
  _has_bits_[0] |= 0x00000020u;
}
void HistoryRecordS::clear_has_innrecord() {
  _has_bits_[0] &= ~0x00000020u;
}
void HistoryRecordS::clear_innrecord() {
  if (innrecord_ != NULL) innrecord_->::msg_maj::InnRecordListS::Clear();
  clear_has_innrecord();
}
const ::msg_maj::InnRecordListS& HistoryRecordS::innrecord() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.innrecord)
  return innrecord_ != NULL ? *innrecord_ : *default_instance_->innrecord_;
}
::msg_maj::InnRecordListS* HistoryRecordS::mutable_innrecord() {
  set_has_innrecord();
  if (innrecord_ == NULL) {
    innrecord_ = new ::msg_maj::InnRecordListS;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecordS.innrecord)
  return innrecord_;
}
::msg_maj::InnRecordListS* HistoryRecordS::release_innrecord() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecordS.innrecord)
  clear_has_innrecord();
  ::msg_maj::InnRecordListS* temp = innrecord_;
  innrecord_ = NULL;
  return temp;
}
void HistoryRecordS::set_allocated_innrecord(::msg_maj::InnRecordListS* innrecord) {
  delete innrecord_;
  innrecord_ = innrecord;
  if (innrecord) {
    set_has_innrecord();
  } else {
    clear_has_innrecord();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecordS.innrecord)
}

// optional .msg_maj.SeatTotalS seat_total = 7;
bool HistoryRecordS::has_seat_total() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void HistoryRecordS::set_has_seat_total() {
  _has_bits_[0] |= 0x00000040u;
}
void HistoryRecordS::clear_has_seat_total() {
  _has_bits_[0] &= ~0x00000040u;
}
void HistoryRecordS::clear_seat_total() {
  if (seat_total_ != NULL) seat_total_->::msg_maj::SeatTotalS::Clear();
  clear_has_seat_total();
}
const ::msg_maj::SeatTotalS& HistoryRecordS::seat_total() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.seat_total)
  return seat_total_ != NULL ? *seat_total_ : *default_instance_->seat_total_;
}
::msg_maj::SeatTotalS* HistoryRecordS::mutable_seat_total() {
  set_has_seat_total();
  if (seat_total_ == NULL) {
    seat_total_ = new ::msg_maj::SeatTotalS;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecordS.seat_total)
  return seat_total_;
}
::msg_maj::SeatTotalS* HistoryRecordS::release_seat_total() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecordS.seat_total)
  clear_has_seat_total();
  ::msg_maj::SeatTotalS* temp = seat_total_;
  seat_total_ = NULL;
  return temp;
}
void HistoryRecordS::set_allocated_seat_total(::msg_maj::SeatTotalS* seat_total) {
  delete seat_total_;
  seat_total_ = seat_total;
  if (seat_total) {
    set_has_seat_total();
  } else {
    clear_has_seat_total();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecordS.seat_total)
}

// optional .msg_maj.InnReplayActionListS inn_replay = 8;
bool HistoryRecordS::has_inn_replay() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void HistoryRecordS::set_has_inn_replay() {
  _has_bits_[0] |= 0x00000080u;
}
void HistoryRecordS::clear_has_inn_replay() {
  _has_bits_[0] &= ~0x00000080u;
}
void HistoryRecordS::clear_inn_replay() {
  if (inn_replay_ != NULL) inn_replay_->::msg_maj::InnReplayActionListS::Clear();
  clear_has_inn_replay();
}
const ::msg_maj::InnReplayActionListS& HistoryRecordS::inn_replay() const {
  // @@protoc_insertion_point(field_get:msg_maj.HistoryRecordS.inn_replay)
  return inn_replay_ != NULL ? *inn_replay_ : *default_instance_->inn_replay_;
}
::msg_maj::InnReplayActionListS* HistoryRecordS::mutable_inn_replay() {
  set_has_inn_replay();
  if (inn_replay_ == NULL) {
    inn_replay_ = new ::msg_maj::InnReplayActionListS;
  }
  // @@protoc_insertion_point(field_mutable:msg_maj.HistoryRecordS.inn_replay)
  return inn_replay_;
}
::msg_maj::InnReplayActionListS* HistoryRecordS::release_inn_replay() {
  // @@protoc_insertion_point(field_release:msg_maj.HistoryRecordS.inn_replay)
  clear_has_inn_replay();
  ::msg_maj::InnReplayActionListS* temp = inn_replay_;
  inn_replay_ = NULL;
  return temp;
}
void HistoryRecordS::set_allocated_inn_replay(::msg_maj::InnReplayActionListS* inn_replay) {
  delete inn_replay_;
  inn_replay_ = inn_replay;
  if (inn_replay) {
    set_has_inn_replay();
  } else {
    clear_has_inn_replay();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_maj.HistoryRecordS.inn_replay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleInfoListS::kRoleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleInfoListS::RoleInfoListS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleInfoListS)
}

void RoleInfoListS::InitAsDefaultInstance() {
}

RoleInfoListS::RoleInfoListS(const RoleInfoListS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleInfoListS)
}

void RoleInfoListS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoListS::~RoleInfoListS() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleInfoListS)
  SharedDtor();
}

void RoleInfoListS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleInfoListS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoListS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoListS_descriptor_;
}

const RoleInfoListS& RoleInfoListS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

RoleInfoListS* RoleInfoListS::default_instance_ = NULL;

RoleInfoListS* RoleInfoListS::New(::google::protobuf::Arena* arena) const {
  RoleInfoListS* n = new RoleInfoListS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleInfoListS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleInfoListS)
  role_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleInfoListS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleInfoListS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_maj.RoleInfoS role_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_role_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_role_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_role_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleInfoListS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleInfoListS)
  return false;
#undef DO_
}

void RoleInfoListS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleInfoListS)
  // repeated .msg_maj.RoleInfoS role_list = 1;
  for (unsigned int i = 0, n = this->role_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleInfoListS)
}

::google::protobuf::uint8* RoleInfoListS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleInfoListS)
  // repeated .msg_maj.RoleInfoS role_list = 1;
  for (unsigned int i = 0, n = this->role_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->role_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleInfoListS)
  return target;
}

int RoleInfoListS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleInfoListS)
  int total_size = 0;

  // repeated .msg_maj.RoleInfoS role_list = 1;
  total_size += 1 * this->role_list_size();
  for (int i = 0; i < this->role_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoListS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleInfoListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleInfoListS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleInfoListS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleInfoListS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleInfoListS)
    MergeFrom(*source);
  }
}

void RoleInfoListS::MergeFrom(const RoleInfoListS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleInfoListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  role_list_.MergeFrom(from.role_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleInfoListS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleInfoListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoListS::CopyFrom(const RoleInfoListS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleInfoListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoListS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->role_list())) return false;
  return true;
}

void RoleInfoListS::Swap(RoleInfoListS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleInfoListS::InternalSwap(RoleInfoListS* other) {
  role_list_.UnsafeArenaSwap(&other->role_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleInfoListS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoListS_descriptor_;
  metadata.reflection = RoleInfoListS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleInfoListS

// repeated .msg_maj.RoleInfoS role_list = 1;
int RoleInfoListS::role_list_size() const {
  return role_list_.size();
}
void RoleInfoListS::clear_role_list() {
  role_list_.Clear();
}
const ::msg_maj::RoleInfoS& RoleInfoListS::role_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleInfoListS.role_list)
  return role_list_.Get(index);
}
::msg_maj::RoleInfoS* RoleInfoListS::mutable_role_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleInfoListS.role_list)
  return role_list_.Mutable(index);
}
::msg_maj::RoleInfoS* RoleInfoListS::add_role_list() {
  // @@protoc_insertion_point(field_add:msg_maj.RoleInfoListS.role_list)
  return role_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::RoleInfoS >*
RoleInfoListS::mutable_role_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.RoleInfoListS.role_list)
  return &role_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::RoleInfoS >&
RoleInfoListS::role_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.RoleInfoListS.role_list)
  return role_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoleInfoS::kSeatFieldNumber;
const int RoleInfoS::kUidFieldNumber;
const int RoleInfoS::kNickFieldNumber;
const int RoleInfoS::kActorAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoleInfoS::RoleInfoS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.RoleInfoS)
}

void RoleInfoS::InitAsDefaultInstance() {
}

RoleInfoS::RoleInfoS(const RoleInfoS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.RoleInfoS)
}

void RoleInfoS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  seat_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoS::~RoleInfoS() {
  // @@protoc_insertion_point(destructor:msg_maj.RoleInfoS)
  SharedDtor();
}

void RoleInfoS::SharedDtor() {
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actor_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoleInfoS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoS_descriptor_;
}

const RoleInfoS& RoleInfoS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

RoleInfoS* RoleInfoS::default_instance_ = NULL;

RoleInfoS* RoleInfoS::New(::google::protobuf::Arena* arena) const {
  RoleInfoS* n = new RoleInfoS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoleInfoS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.RoleInfoS)
  if (_has_bits_[0 / 32] & 15u) {
    seat_ = 0u;
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_actor_addr()) {
      actor_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RoleInfoS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.RoleInfoS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // required string nick = 3;
      case 3: {
        if (tag == 26) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick().data(), this->nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleInfoS.nick");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actor_addr;
        break;
      }

      // optional string actor_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_actor_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actor_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actor_addr().data(), this->actor_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_maj.RoleInfoS.actor_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.RoleInfoS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.RoleInfoS)
  return false;
#undef DO_
}

void RoleInfoS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.RoleInfoS)
  // required uint32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat(), output);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleInfoS.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actor_addr().data(), this->actor_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleInfoS.actor_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->actor_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.RoleInfoS)
}

::google::protobuf::uint8* RoleInfoS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.RoleInfoS)
  // required uint32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat(), target);
  }

  // required uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // required string nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick().data(), this->nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleInfoS.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actor_addr().data(), this->actor_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_maj.RoleInfoS.actor_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->actor_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.RoleInfoS)
  return target;
}

int RoleInfoS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.RoleInfoS)
  int total_size = 0;

  if (has_seat()) {
    // required uint32 seat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat());
  }

  if (has_uid()) {
    // required uint64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_nick()) {
    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  return total_size;
}
int RoleInfoS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.RoleInfoS)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 seat = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat());

    // required uint64 uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required string nick = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string actor_addr = 4;
  if (has_actor_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actor_addr());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.RoleInfoS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RoleInfoS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoleInfoS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.RoleInfoS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.RoleInfoS)
    MergeFrom(*source);
  }
}

void RoleInfoS::MergeFrom(const RoleInfoS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.RoleInfoS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_has_nick();
      nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
    }
    if (from.has_actor_addr()) {
      set_has_actor_addr();
      actor_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actor_addr_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RoleInfoS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.RoleInfoS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoS::CopyFrom(const RoleInfoS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.RoleInfoS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoleInfoS::Swap(RoleInfoS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoleInfoS::InternalSwap(RoleInfoS* other) {
  std::swap(seat_, other->seat_);
  std::swap(uid_, other->uid_);
  nick_.Swap(&other->nick_);
  actor_addr_.Swap(&other->actor_addr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoleInfoS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoS_descriptor_;
  metadata.reflection = RoleInfoS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoleInfoS

// required uint32 seat = 1;
bool RoleInfoS::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoleInfoS::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
void RoleInfoS::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoleInfoS::clear_seat() {
  seat_ = 0u;
  clear_has_seat();
}
 ::google::protobuf::uint32 RoleInfoS::seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleInfoS.seat)
  return seat_;
}
 void RoleInfoS::set_seat(::google::protobuf::uint32 value) {
  set_has_seat();
  seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleInfoS.seat)
}

// required uint64 uid = 2;
bool RoleInfoS::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoleInfoS::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
void RoleInfoS::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoleInfoS::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 RoleInfoS::uid() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleInfoS.uid)
  return uid_;
}
 void RoleInfoS::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.RoleInfoS.uid)
}

// required string nick = 3;
bool RoleInfoS::has_nick() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoleInfoS::set_has_nick() {
  _has_bits_[0] |= 0x00000004u;
}
void RoleInfoS::clear_has_nick() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoleInfoS::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nick();
}
 const ::std::string& RoleInfoS::nick() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleInfoS.nick)
  return nick_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfoS::set_nick(const ::std::string& value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleInfoS.nick)
}
 void RoleInfoS::set_nick(const char* value) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleInfoS.nick)
}
 void RoleInfoS::set_nick(const char* value, size_t size) {
  set_has_nick();
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleInfoS.nick)
}
 ::std::string* RoleInfoS::mutable_nick() {
  set_has_nick();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleInfoS.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleInfoS::release_nick() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleInfoS.nick)
  clear_has_nick();
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfoS::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    set_has_nick();
  } else {
    clear_has_nick();
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleInfoS.nick)
}

// optional string actor_addr = 4;
bool RoleInfoS::has_actor_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoleInfoS::set_has_actor_addr() {
  _has_bits_[0] |= 0x00000008u;
}
void RoleInfoS::clear_has_actor_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoleInfoS::clear_actor_addr() {
  actor_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_actor_addr();
}
 const ::std::string& RoleInfoS::actor_addr() const {
  // @@protoc_insertion_point(field_get:msg_maj.RoleInfoS.actor_addr)
  return actor_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfoS::set_actor_addr(const ::std::string& value) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_maj.RoleInfoS.actor_addr)
}
 void RoleInfoS::set_actor_addr(const char* value) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_maj.RoleInfoS.actor_addr)
}
 void RoleInfoS::set_actor_addr(const char* value, size_t size) {
  set_has_actor_addr();
  actor_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_maj.RoleInfoS.actor_addr)
}
 ::std::string* RoleInfoS::mutable_actor_addr() {
  set_has_actor_addr();
  // @@protoc_insertion_point(field_mutable:msg_maj.RoleInfoS.actor_addr)
  return actor_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoleInfoS::release_actor_addr() {
  // @@protoc_insertion_point(field_release:msg_maj.RoleInfoS.actor_addr)
  clear_has_actor_addr();
  return actor_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoleInfoS::set_allocated_actor_addr(::std::string* actor_addr) {
  if (actor_addr != NULL) {
    set_has_actor_addr();
  } else {
    clear_has_actor_addr();
  }
  actor_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_addr);
  // @@protoc_insertion_point(field_set_allocated:msg_maj.RoleInfoS.actor_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnRecordListS::kInnListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnRecordListS::InnRecordListS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.InnRecordListS)
}

void InnRecordListS::InitAsDefaultInstance() {
}

InnRecordListS::InnRecordListS(const InnRecordListS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.InnRecordListS)
}

void InnRecordListS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnRecordListS::~InnRecordListS() {
  // @@protoc_insertion_point(destructor:msg_maj.InnRecordListS)
  SharedDtor();
}

void InnRecordListS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnRecordListS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnRecordListS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnRecordListS_descriptor_;
}

const InnRecordListS& InnRecordListS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

InnRecordListS* InnRecordListS::default_instance_ = NULL;

InnRecordListS* InnRecordListS::New(::google::protobuf::Arena* arena) const {
  InnRecordListS* n = new InnRecordListS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnRecordListS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.InnRecordListS)
  inn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnRecordListS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.InnRecordListS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_maj.InnRecordS inn_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_inn_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_inn_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_inn_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.InnRecordListS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.InnRecordListS)
  return false;
#undef DO_
}

void InnRecordListS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.InnRecordListS)
  // repeated .msg_maj.InnRecordS inn_list = 1;
  for (unsigned int i = 0, n = this->inn_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inn_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.InnRecordListS)
}

::google::protobuf::uint8* InnRecordListS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.InnRecordListS)
  // repeated .msg_maj.InnRecordS inn_list = 1;
  for (unsigned int i = 0, n = this->inn_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->inn_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.InnRecordListS)
  return target;
}

int InnRecordListS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.InnRecordListS)
  int total_size = 0;

  // repeated .msg_maj.InnRecordS inn_list = 1;
  total_size += 1 * this->inn_list_size();
  for (int i = 0; i < this->inn_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inn_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnRecordListS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.InnRecordListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InnRecordListS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnRecordListS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.InnRecordListS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.InnRecordListS)
    MergeFrom(*source);
  }
}

void InnRecordListS::MergeFrom(const InnRecordListS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.InnRecordListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  inn_list_.MergeFrom(from.inn_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnRecordListS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.InnRecordListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnRecordListS::CopyFrom(const InnRecordListS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.InnRecordListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnRecordListS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->inn_list())) return false;
  return true;
}

void InnRecordListS::Swap(InnRecordListS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnRecordListS::InternalSwap(InnRecordListS* other) {
  inn_list_.UnsafeArenaSwap(&other->inn_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnRecordListS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnRecordListS_descriptor_;
  metadata.reflection = InnRecordListS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnRecordListS

// repeated .msg_maj.InnRecordS inn_list = 1;
int InnRecordListS::inn_list_size() const {
  return inn_list_.size();
}
void InnRecordListS::clear_inn_list() {
  inn_list_.Clear();
}
const ::msg_maj::InnRecordS& InnRecordListS::inn_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordListS.inn_list)
  return inn_list_.Get(index);
}
::msg_maj::InnRecordS* InnRecordListS::mutable_inn_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnRecordListS.inn_list)
  return inn_list_.Mutable(index);
}
::msg_maj::InnRecordS* InnRecordListS::add_inn_list() {
  // @@protoc_insertion_point(field_add:msg_maj.InnRecordListS.inn_list)
  return inn_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::InnRecordS >*
InnRecordListS::mutable_inn_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnRecordListS.inn_list)
  return &inn_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::InnRecordS >&
InnRecordListS::inn_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnRecordListS.inn_list)
  return inn_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnReplayActionListS::kReplayListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnReplayActionListS::InnReplayActionListS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.InnReplayActionListS)
}

void InnReplayActionListS::InitAsDefaultInstance() {
}

InnReplayActionListS::InnReplayActionListS(const InnReplayActionListS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.InnReplayActionListS)
}

void InnReplayActionListS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnReplayActionListS::~InnReplayActionListS() {
  // @@protoc_insertion_point(destructor:msg_maj.InnReplayActionListS)
  SharedDtor();
}

void InnReplayActionListS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnReplayActionListS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnReplayActionListS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnReplayActionListS_descriptor_;
}

const InnReplayActionListS& InnReplayActionListS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

InnReplayActionListS* InnReplayActionListS::default_instance_ = NULL;

InnReplayActionListS* InnReplayActionListS::New(::google::protobuf::Arena* arena) const {
  InnReplayActionListS* n = new InnReplayActionListS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnReplayActionListS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.InnReplayActionListS)
  replay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnReplayActionListS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.InnReplayActionListS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_maj.InnReplayActionS replay_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_replay_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replay_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_replay_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.InnReplayActionListS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.InnReplayActionListS)
  return false;
#undef DO_
}

void InnReplayActionListS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.InnReplayActionListS)
  // repeated .msg_maj.InnReplayActionS replay_list = 1;
  for (unsigned int i = 0, n = this->replay_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->replay_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.InnReplayActionListS)
}

::google::protobuf::uint8* InnReplayActionListS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.InnReplayActionListS)
  // repeated .msg_maj.InnReplayActionS replay_list = 1;
  for (unsigned int i = 0, n = this->replay_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->replay_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.InnReplayActionListS)
  return target;
}

int InnReplayActionListS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.InnReplayActionListS)
  int total_size = 0;

  // repeated .msg_maj.InnReplayActionS replay_list = 1;
  total_size += 1 * this->replay_list_size();
  for (int i = 0; i < this->replay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replay_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnReplayActionListS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.InnReplayActionListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InnReplayActionListS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnReplayActionListS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.InnReplayActionListS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.InnReplayActionListS)
    MergeFrom(*source);
  }
}

void InnReplayActionListS::MergeFrom(const InnReplayActionListS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.InnReplayActionListS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  replay_list_.MergeFrom(from.replay_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnReplayActionListS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.InnReplayActionListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnReplayActionListS::CopyFrom(const InnReplayActionListS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.InnReplayActionListS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnReplayActionListS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->replay_list())) return false;
  return true;
}

void InnReplayActionListS::Swap(InnReplayActionListS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnReplayActionListS::InternalSwap(InnReplayActionListS* other) {
  replay_list_.UnsafeArenaSwap(&other->replay_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnReplayActionListS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnReplayActionListS_descriptor_;
  metadata.reflection = InnReplayActionListS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnReplayActionListS

// repeated .msg_maj.InnReplayActionS replay_list = 1;
int InnReplayActionListS::replay_list_size() const {
  return replay_list_.size();
}
void InnReplayActionListS::clear_replay_list() {
  replay_list_.Clear();
}
const ::msg_maj::InnReplayActionS& InnReplayActionListS::replay_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnReplayActionListS.replay_list)
  return replay_list_.Get(index);
}
::msg_maj::InnReplayActionS* InnReplayActionListS::mutable_replay_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnReplayActionListS.replay_list)
  return replay_list_.Mutable(index);
}
::msg_maj::InnReplayActionS* InnReplayActionListS::add_replay_list() {
  // @@protoc_insertion_point(field_add:msg_maj.InnReplayActionListS.replay_list)
  return replay_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::InnReplayActionS >*
InnReplayActionListS::mutable_replay_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnReplayActionListS.replay_list)
  return &replay_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::InnReplayActionS >&
InnReplayActionListS::replay_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnReplayActionListS.replay_list)
  return replay_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnRecordS::kInnIdFieldNumber;
const int InnRecordS::kBankerSeatFieldNumber;
const int InnRecordS::kDiceFieldNumber;
const int InnRecordS::kSeatInfoFieldNumber;
const int InnRecordS::kSeatResultFieldNumber;
const int InnRecordS::kCloseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnRecordS::InnRecordS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.InnRecordS)
}

void InnRecordS::InitAsDefaultInstance() {
}

InnRecordS::InnRecordS(const InnRecordS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.InnRecordS)
}

void InnRecordS::SharedCtor() {
  _cached_size_ = 0;
  inn_id_ = 0;
  banker_seat_ = 0u;
  dice_ = 0u;
  close_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnRecordS::~InnRecordS() {
  // @@protoc_insertion_point(destructor:msg_maj.InnRecordS)
  SharedDtor();
}

void InnRecordS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnRecordS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnRecordS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnRecordS_descriptor_;
}

const InnRecordS& InnRecordS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

InnRecordS* InnRecordS::default_instance_ = NULL;

InnRecordS* InnRecordS::New(::google::protobuf::Arena* arena) const {
  InnRecordS* n = new InnRecordS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnRecordS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.InnRecordS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InnRecordS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InnRecordS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(inn_id_, banker_seat_);
  ZR_(dice_, close_type_);

#undef ZR_HELPER_
#undef ZR_

  seat_info_.Clear();
  seat_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnRecordS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.InnRecordS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 inn_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inn_id_)));
          set_has_inn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_banker_seat;
        break;
      }

      // required uint32 banker_seat = 2;
      case 2: {
        if (tag == 16) {
         parse_banker_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_seat_)));
          set_has_banker_seat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dice;
        break;
      }

      // required uint32 dice = 3;
      case 3: {
        if (tag == 24) {
         parse_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_)));
          set_has_dice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_seat_info;
        break;
      }

      // repeated .msg_maj.SeatInfo seat_info = 4;
      case 4: {
        if (tag == 34) {
         parse_seat_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_seat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seat_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_seat_info;
        if (input->ExpectTag(42)) goto parse_loop_seat_result;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .msg_maj.GameResultSeat seat_result = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_seat_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_seat_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_seat_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_close_type;
        break;
      }

      // optional int32 close_type = 6;
      case 6: {
        if (tag == 48) {
         parse_close_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_type_)));
          set_has_close_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.InnRecordS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.InnRecordS)
  return false;
#undef DO_
}

void InnRecordS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.InnRecordS)
  // required int32 inn_id = 1;
  if (has_inn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inn_id(), output);
  }

  // required uint32 banker_seat = 2;
  if (has_banker_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_seat(), output);
  }

  // required uint32 dice = 3;
  if (has_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dice(), output);
  }

  // repeated .msg_maj.SeatInfo seat_info = 4;
  for (unsigned int i = 0, n = this->seat_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seat_info(i), output);
  }

  // repeated .msg_maj.GameResultSeat seat_result = 5;
  for (unsigned int i = 0, n = this->seat_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seat_result(i), output);
  }

  // optional int32 close_type = 6;
  if (has_close_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.InnRecordS)
}

::google::protobuf::uint8* InnRecordS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.InnRecordS)
  // required int32 inn_id = 1;
  if (has_inn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inn_id(), target);
  }

  // required uint32 banker_seat = 2;
  if (has_banker_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_seat(), target);
  }

  // required uint32 dice = 3;
  if (has_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dice(), target);
  }

  // repeated .msg_maj.SeatInfo seat_info = 4;
  for (unsigned int i = 0, n = this->seat_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->seat_info(i), false, target);
  }

  // repeated .msg_maj.GameResultSeat seat_result = 5;
  for (unsigned int i = 0, n = this->seat_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->seat_result(i), false, target);
  }

  // optional int32 close_type = 6;
  if (has_close_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.InnRecordS)
  return target;
}

int InnRecordS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.InnRecordS)
  int total_size = 0;

  if (has_inn_id()) {
    // required int32 inn_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inn_id());
  }

  if (has_banker_seat()) {
    // required uint32 banker_seat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());
  }

  if (has_dice()) {
    // required uint32 dice = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());
  }

  return total_size;
}
int InnRecordS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.InnRecordS)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 inn_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inn_id());

    // required uint32 banker_seat = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat());

    // required uint32 dice = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 close_type = 6;
  if (has_close_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->close_type());
  }

  // repeated .msg_maj.SeatInfo seat_info = 4;
  total_size += 1 * this->seat_info_size();
  for (int i = 0; i < this->seat_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_info(i));
  }

  // repeated .msg_maj.GameResultSeat seat_result = 5;
  total_size += 1 * this->seat_result_size();
  for (int i = 0; i < this->seat_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seat_result(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnRecordS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.InnRecordS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InnRecordS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnRecordS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.InnRecordS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.InnRecordS)
    MergeFrom(*source);
  }
}

void InnRecordS::MergeFrom(const InnRecordS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.InnRecordS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  seat_info_.MergeFrom(from.seat_info_);
  seat_result_.MergeFrom(from.seat_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inn_id()) {
      set_inn_id(from.inn_id());
    }
    if (from.has_banker_seat()) {
      set_banker_seat(from.banker_seat());
    }
    if (from.has_dice()) {
      set_dice(from.dice());
    }
    if (from.has_close_type()) {
      set_close_type(from.close_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnRecordS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.InnRecordS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnRecordS::CopyFrom(const InnRecordS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.InnRecordS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnRecordS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seat_info())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->seat_result())) return false;
  return true;
}

void InnRecordS::Swap(InnRecordS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnRecordS::InternalSwap(InnRecordS* other) {
  std::swap(inn_id_, other->inn_id_);
  std::swap(banker_seat_, other->banker_seat_);
  std::swap(dice_, other->dice_);
  seat_info_.UnsafeArenaSwap(&other->seat_info_);
  seat_result_.UnsafeArenaSwap(&other->seat_result_);
  std::swap(close_type_, other->close_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnRecordS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnRecordS_descriptor_;
  metadata.reflection = InnRecordS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnRecordS

// required int32 inn_id = 1;
bool InnRecordS::has_inn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnRecordS::set_has_inn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InnRecordS::clear_has_inn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnRecordS::clear_inn_id() {
  inn_id_ = 0;
  clear_has_inn_id();
}
 ::google::protobuf::int32 InnRecordS::inn_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.inn_id)
  return inn_id_;
}
 void InnRecordS::set_inn_id(::google::protobuf::int32 value) {
  set_has_inn_id();
  inn_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecordS.inn_id)
}

// required uint32 banker_seat = 2;
bool InnRecordS::has_banker_seat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InnRecordS::set_has_banker_seat() {
  _has_bits_[0] |= 0x00000002u;
}
void InnRecordS::clear_has_banker_seat() {
  _has_bits_[0] &= ~0x00000002u;
}
void InnRecordS::clear_banker_seat() {
  banker_seat_ = 0u;
  clear_has_banker_seat();
}
 ::google::protobuf::uint32 InnRecordS::banker_seat() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.banker_seat)
  return banker_seat_;
}
 void InnRecordS::set_banker_seat(::google::protobuf::uint32 value) {
  set_has_banker_seat();
  banker_seat_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecordS.banker_seat)
}

// required uint32 dice = 3;
bool InnRecordS::has_dice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InnRecordS::set_has_dice() {
  _has_bits_[0] |= 0x00000004u;
}
void InnRecordS::clear_has_dice() {
  _has_bits_[0] &= ~0x00000004u;
}
void InnRecordS::clear_dice() {
  dice_ = 0u;
  clear_has_dice();
}
 ::google::protobuf::uint32 InnRecordS::dice() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.dice)
  return dice_;
}
 void InnRecordS::set_dice(::google::protobuf::uint32 value) {
  set_has_dice();
  dice_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecordS.dice)
}

// repeated .msg_maj.SeatInfo seat_info = 4;
int InnRecordS::seat_info_size() const {
  return seat_info_.size();
}
void InnRecordS::clear_seat_info() {
  seat_info_.Clear();
}
const ::msg_maj::SeatInfo& InnRecordS::seat_info(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.seat_info)
  return seat_info_.Get(index);
}
::msg_maj::SeatInfo* InnRecordS::mutable_seat_info(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnRecordS.seat_info)
  return seat_info_.Mutable(index);
}
::msg_maj::SeatInfo* InnRecordS::add_seat_info() {
  // @@protoc_insertion_point(field_add:msg_maj.InnRecordS.seat_info)
  return seat_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatInfo >*
InnRecordS::mutable_seat_info() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnRecordS.seat_info)
  return &seat_info_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatInfo >&
InnRecordS::seat_info() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnRecordS.seat_info)
  return seat_info_;
}

// repeated .msg_maj.GameResultSeat seat_result = 5;
int InnRecordS::seat_result_size() const {
  return seat_result_.size();
}
void InnRecordS::clear_seat_result() {
  seat_result_.Clear();
}
const ::msg_maj::GameResultSeat& InnRecordS::seat_result(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.seat_result)
  return seat_result_.Get(index);
}
::msg_maj::GameResultSeat* InnRecordS::mutable_seat_result(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnRecordS.seat_result)
  return seat_result_.Mutable(index);
}
::msg_maj::GameResultSeat* InnRecordS::add_seat_result() {
  // @@protoc_insertion_point(field_add:msg_maj.InnRecordS.seat_result)
  return seat_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::GameResultSeat >*
InnRecordS::mutable_seat_result() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnRecordS.seat_result)
  return &seat_result_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::GameResultSeat >&
InnRecordS::seat_result() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnRecordS.seat_result)
  return seat_result_;
}

// optional int32 close_type = 6;
bool InnRecordS::has_close_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InnRecordS::set_has_close_type() {
  _has_bits_[0] |= 0x00000020u;
}
void InnRecordS::clear_has_close_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void InnRecordS::clear_close_type() {
  close_type_ = 0;
  clear_has_close_type();
}
 ::google::protobuf::int32 InnRecordS::close_type() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnRecordS.close_type)
  return close_type_;
}
 void InnRecordS::set_close_type(::google::protobuf::int32 value) {
  set_has_close_type();
  close_type_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnRecordS.close_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnReplayActionS::kInnIdFieldNumber;
const int InnReplayActionS::kReplayListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnReplayActionS::InnReplayActionS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.InnReplayActionS)
}

void InnReplayActionS::InitAsDefaultInstance() {
}

InnReplayActionS::InnReplayActionS(const InnReplayActionS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.InnReplayActionS)
}

void InnReplayActionS::SharedCtor() {
  _cached_size_ = 0;
  inn_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InnReplayActionS::~InnReplayActionS() {
  // @@protoc_insertion_point(destructor:msg_maj.InnReplayActionS)
  SharedDtor();
}

void InnReplayActionS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InnReplayActionS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InnReplayActionS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InnReplayActionS_descriptor_;
}

const InnReplayActionS& InnReplayActionS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

InnReplayActionS* InnReplayActionS::default_instance_ = NULL;

InnReplayActionS* InnReplayActionS::New(::google::protobuf::Arena* arena) const {
  InnReplayActionS* n = new InnReplayActionS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InnReplayActionS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.InnReplayActionS)
  inn_id_ = 0;
  replay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InnReplayActionS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.InnReplayActionS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 inn_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inn_id_)));
          set_has_inn_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replay_list;
        break;
      }

      // repeated .msg_maj.ReplayAction replay_list = 2;
      case 2: {
        if (tag == 18) {
         parse_replay_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_replay_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_replay_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_replay_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.InnReplayActionS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.InnReplayActionS)
  return false;
#undef DO_
}

void InnReplayActionS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.InnReplayActionS)
  // required int32 inn_id = 1;
  if (has_inn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inn_id(), output);
  }

  // repeated .msg_maj.ReplayAction replay_list = 2;
  for (unsigned int i = 0, n = this->replay_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->replay_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.InnReplayActionS)
}

::google::protobuf::uint8* InnReplayActionS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.InnReplayActionS)
  // required int32 inn_id = 1;
  if (has_inn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inn_id(), target);
  }

  // repeated .msg_maj.ReplayAction replay_list = 2;
  for (unsigned int i = 0, n = this->replay_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->replay_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.InnReplayActionS)
  return target;
}

int InnReplayActionS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.InnReplayActionS)
  int total_size = 0;

  // required int32 inn_id = 1;
  if (has_inn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inn_id());
  }
  // repeated .msg_maj.ReplayAction replay_list = 2;
  total_size += 1 * this->replay_list_size();
  for (int i = 0; i < this->replay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replay_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InnReplayActionS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.InnReplayActionS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InnReplayActionS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InnReplayActionS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.InnReplayActionS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.InnReplayActionS)
    MergeFrom(*source);
  }
}

void InnReplayActionS::MergeFrom(const InnReplayActionS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.InnReplayActionS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  replay_list_.MergeFrom(from.replay_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inn_id()) {
      set_inn_id(from.inn_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InnReplayActionS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.InnReplayActionS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnReplayActionS::CopyFrom(const InnReplayActionS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.InnReplayActionS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnReplayActionS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->replay_list())) return false;
  return true;
}

void InnReplayActionS::Swap(InnReplayActionS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnReplayActionS::InternalSwap(InnReplayActionS* other) {
  std::swap(inn_id_, other->inn_id_);
  replay_list_.UnsafeArenaSwap(&other->replay_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InnReplayActionS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InnReplayActionS_descriptor_;
  metadata.reflection = InnReplayActionS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InnReplayActionS

// required int32 inn_id = 1;
bool InnReplayActionS::has_inn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InnReplayActionS::set_has_inn_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InnReplayActionS::clear_has_inn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InnReplayActionS::clear_inn_id() {
  inn_id_ = 0;
  clear_has_inn_id();
}
 ::google::protobuf::int32 InnReplayActionS::inn_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.InnReplayActionS.inn_id)
  return inn_id_;
}
 void InnReplayActionS::set_inn_id(::google::protobuf::int32 value) {
  set_has_inn_id();
  inn_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.InnReplayActionS.inn_id)
}

// repeated .msg_maj.ReplayAction replay_list = 2;
int InnReplayActionS::replay_list_size() const {
  return replay_list_.size();
}
void InnReplayActionS::clear_replay_list() {
  replay_list_.Clear();
}
const ::msg_maj::ReplayAction& InnReplayActionS::replay_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.InnReplayActionS.replay_list)
  return replay_list_.Get(index);
}
::msg_maj::ReplayAction* InnReplayActionS::mutable_replay_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.InnReplayActionS.replay_list)
  return replay_list_.Mutable(index);
}
::msg_maj::ReplayAction* InnReplayActionS::add_replay_list() {
  // @@protoc_insertion_point(field_add:msg_maj.InnReplayActionS.replay_list)
  return replay_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::ReplayAction >*
InnReplayActionS::mutable_replay_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.InnReplayActionS.replay_list)
  return &replay_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::ReplayAction >&
InnReplayActionS::replay_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.InnReplayActionS.replay_list)
  return replay_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatTotalS::kScoreListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatTotalS::SeatTotalS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SeatTotalS)
}

void SeatTotalS::InitAsDefaultInstance() {
}

SeatTotalS::SeatTotalS(const SeatTotalS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SeatTotalS)
}

void SeatTotalS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatTotalS::~SeatTotalS() {
  // @@protoc_insertion_point(destructor:msg_maj.SeatTotalS)
  SharedDtor();
}

void SeatTotalS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatTotalS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatTotalS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatTotalS_descriptor_;
}

const SeatTotalS& SeatTotalS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

SeatTotalS* SeatTotalS::default_instance_ = NULL;

SeatTotalS* SeatTotalS::New(::google::protobuf::Arena* arena) const {
  SeatTotalS* n = new SeatTotalS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatTotalS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SeatTotalS)
  score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SeatTotalS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SeatTotalS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_maj.SeatTotalScoreS score_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_score_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_score_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SeatTotalS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SeatTotalS)
  return false;
#undef DO_
}

void SeatTotalS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SeatTotalS)
  // repeated .msg_maj.SeatTotalScoreS score_list = 1;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SeatTotalS)
}

::google::protobuf::uint8* SeatTotalS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SeatTotalS)
  // repeated .msg_maj.SeatTotalScoreS score_list = 1;
  for (unsigned int i = 0, n = this->score_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->score_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SeatTotalS)
  return target;
}

int SeatTotalS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SeatTotalS)
  int total_size = 0;

  // repeated .msg_maj.SeatTotalScoreS score_list = 1;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatTotalS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SeatTotalS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeatTotalS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatTotalS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SeatTotalS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SeatTotalS)
    MergeFrom(*source);
  }
}

void SeatTotalS::MergeFrom(const SeatTotalS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SeatTotalS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  score_list_.MergeFrom(from.score_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SeatTotalS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SeatTotalS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatTotalS::CopyFrom(const SeatTotalS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SeatTotalS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatTotalS::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->score_list())) return false;
  return true;
}

void SeatTotalS::Swap(SeatTotalS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatTotalS::InternalSwap(SeatTotalS* other) {
  score_list_.UnsafeArenaSwap(&other->score_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatTotalS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatTotalS_descriptor_;
  metadata.reflection = SeatTotalS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatTotalS

// repeated .msg_maj.SeatTotalScoreS score_list = 1;
int SeatTotalS::score_list_size() const {
  return score_list_.size();
}
void SeatTotalS::clear_score_list() {
  score_list_.Clear();
}
const ::msg_maj::SeatTotalScoreS& SeatTotalS::score_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalS.score_list)
  return score_list_.Get(index);
}
::msg_maj::SeatTotalScoreS* SeatTotalS::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_maj.SeatTotalS.score_list)
  return score_list_.Mutable(index);
}
::msg_maj::SeatTotalScoreS* SeatTotalS::add_score_list() {
  // @@protoc_insertion_point(field_add:msg_maj.SeatTotalS.score_list)
  return score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScoreS >*
SeatTotalS::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_maj.SeatTotalS.score_list)
  return &score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_maj::SeatTotalScoreS >&
SeatTotalS::score_list() const {
  // @@protoc_insertion_point(field_list:msg_maj.SeatTotalS.score_list)
  return score_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeatTotalScoreS::kSeatIdFieldNumber;
const int SeatTotalScoreS::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeatTotalScoreS::SeatTotalScoreS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_maj.SeatTotalScoreS)
}

void SeatTotalScoreS::InitAsDefaultInstance() {
}

SeatTotalScoreS::SeatTotalScoreS(const SeatTotalScoreS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_maj.SeatTotalScoreS)
}

void SeatTotalScoreS::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0u;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeatTotalScoreS::~SeatTotalScoreS() {
  // @@protoc_insertion_point(destructor:msg_maj.SeatTotalScoreS)
  SharedDtor();
}

void SeatTotalScoreS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeatTotalScoreS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeatTotalScoreS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatTotalScoreS_descriptor_;
}

const SeatTotalScoreS& SeatTotalScoreS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fhistory_2eproto();
  return *default_instance_;
}

SeatTotalScoreS* SeatTotalScoreS::default_instance_ = NULL;

SeatTotalScoreS* SeatTotalScoreS::New(::google::protobuf::Arena* arena) const {
  SeatTotalScoreS* n = new SeatTotalScoreS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SeatTotalScoreS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_maj.SeatTotalScoreS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SeatTotalScoreS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SeatTotalScoreS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seat_id_, score_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SeatTotalScoreS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_maj.SeatTotalScoreS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seat_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_maj.SeatTotalScoreS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_maj.SeatTotalScoreS)
  return false;
#undef DO_
}

void SeatTotalScoreS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_maj.SeatTotalScoreS)
  // required uint32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_maj.SeatTotalScoreS)
}

::google::protobuf::uint8* SeatTotalScoreS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_maj.SeatTotalScoreS)
  // required uint32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_maj.SeatTotalScoreS)
  return target;
}

int SeatTotalScoreS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_maj.SeatTotalScoreS)
  int total_size = 0;

  if (has_seat_id()) {
    // required uint32 seat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  if (has_score()) {
    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  return total_size;
}
int SeatTotalScoreS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_maj.SeatTotalScoreS)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 seat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());

    // required int32 score = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeatTotalScoreS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_maj.SeatTotalScoreS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SeatTotalScoreS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SeatTotalScoreS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_maj.SeatTotalScoreS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_maj.SeatTotalScoreS)
    MergeFrom(*source);
  }
}

void SeatTotalScoreS::MergeFrom(const SeatTotalScoreS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_maj.SeatTotalScoreS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SeatTotalScoreS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_maj.SeatTotalScoreS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeatTotalScoreS::CopyFrom(const SeatTotalScoreS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_maj.SeatTotalScoreS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatTotalScoreS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SeatTotalScoreS::Swap(SeatTotalScoreS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SeatTotalScoreS::InternalSwap(SeatTotalScoreS* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeatTotalScoreS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeatTotalScoreS_descriptor_;
  metadata.reflection = SeatTotalScoreS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SeatTotalScoreS

// required uint32 seat_id = 1;
bool SeatTotalScoreS::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SeatTotalScoreS::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SeatTotalScoreS::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SeatTotalScoreS::clear_seat_id() {
  seat_id_ = 0u;
  clear_has_seat_id();
}
 ::google::protobuf::uint32 SeatTotalScoreS::seat_id() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScoreS.seat_id)
  return seat_id_;
}
 void SeatTotalScoreS::set_seat_id(::google::protobuf::uint32 value) {
  set_has_seat_id();
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScoreS.seat_id)
}

// required int32 score = 2;
bool SeatTotalScoreS::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SeatTotalScoreS::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void SeatTotalScoreS::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void SeatTotalScoreS::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 SeatTotalScoreS::score() const {
  // @@protoc_insertion_point(field_get:msg_maj.SeatTotalScoreS.score)
  return score_;
}
 void SeatTotalScoreS::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:msg_maj.SeatTotalScoreS.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_maj

// @@protoc_insertion_point(global_scope)
