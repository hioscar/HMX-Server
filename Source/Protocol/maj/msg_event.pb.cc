// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace msg_event {

namespace {

const ::google::protobuf::Descriptor* AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespInviteGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespInviteGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateEventList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateEventList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventWrap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventWrap_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeS_reflection_ = NULL;
const ::google::protobuf::Descriptor* TipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TipResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_cmd_event_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* opt_type_event_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tip_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_5fevent_2eproto() {
  protobuf_AddDesc_msg_5fevent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg_event.proto");
  GOOGLE_CHECK(file != NULL);
  AddFriend_descriptor_ = file->message_type(0);
  static const int AddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, mail_id_),
  };
  AddFriend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriend_descriptor_,
      AddFriend::default_instance_,
      AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddFriend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, _internal_metadata_),
      -1);
  RespAddFriend_descriptor_ = file->message_type(1);
  static const int RespAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespAddFriend, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespAddFriend, accept_),
  };
  RespAddFriend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RespAddFriend_descriptor_,
      RespAddFriend::default_instance_,
      RespAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespAddFriend, _has_bits_[0]),
      -1,
      -1,
      sizeof(RespAddFriend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespAddFriend, _internal_metadata_),
      -1);
  InviteGame_descriptor_ = file->message_type(2);
  static const int InviteGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, room_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, mail_id_),
  };
  InviteGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InviteGame_descriptor_,
      InviteGame::default_instance_,
      InviteGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(InviteGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteGame, _internal_metadata_),
      -1);
  RespInviteGame_descriptor_ = file->message_type(3);
  static const int RespInviteGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespInviteGame, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespInviteGame, accept_),
  };
  RespInviteGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RespInviteGame_descriptor_,
      RespInviteGame::default_instance_,
      RespInviteGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespInviteGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(RespInviteGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespInviteGame, _internal_metadata_),
      -1);
  UpdateEventList_descriptor_ = file->message_type(4);
  static const int UpdateEventList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEventList, events_),
  };
  UpdateEventList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateEventList_descriptor_,
      UpdateEventList::default_instance_,
      UpdateEventList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEventList, _has_bits_[0]),
      -1,
      -1,
      sizeof(UpdateEventList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateEventList, _internal_metadata_),
      -1);
  EventWrap_descriptor_ = file->message_type(5);
  static const int EventWrap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventWrap, add_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventWrap, invite_game_),
  };
  EventWrap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventWrap_descriptor_,
      EventWrap::default_instance_,
      EventWrap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventWrap, _has_bits_[0]),
      -1,
      -1,
      sizeof(EventWrap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventWrap, _internal_metadata_),
      -1);
  NoticeListResp_descriptor_ = file->message_type(6);
  static const int NoticeListResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeListResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeListResp, notice_list_),
  };
  NoticeListResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NoticeListResp_descriptor_,
      NoticeListResp::default_instance_,
      NoticeListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeListResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(NoticeListResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeListResp, _internal_metadata_),
      -1);
  NoticeS_descriptor_ = file->message_type(7);
  static const int NoticeS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, break_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, minute_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, sort_level_),
  };
  NoticeS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NoticeS_descriptor_,
      NoticeS::default_instance_,
      NoticeS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, _has_bits_[0]),
      -1,
      -1,
      sizeof(NoticeS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeS, _internal_metadata_),
      -1);
  TipResp_descriptor_ = file->message_type(8);
  static const int TipResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipResp, args_),
  };
  TipResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TipResp_descriptor_,
      TipResp::default_instance_,
      TipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(TipResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TipResp, _internal_metadata_),
      -1);
  c_cmd_event_descriptor_ = file->enum_type(0);
  opt_type_event_descriptor_ = file->enum_type(1);
  tip_type_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_5fevent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriend_descriptor_, &AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RespAddFriend_descriptor_, &RespAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InviteGame_descriptor_, &InviteGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RespInviteGame_descriptor_, &RespInviteGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateEventList_descriptor_, &UpdateEventList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventWrap_descriptor_, &EventWrap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NoticeListResp_descriptor_, &NoticeListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NoticeS_descriptor_, &NoticeS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TipResp_descriptor_, &TipResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_5fevent_2eproto() {
  delete AddFriend::default_instance_;
  delete AddFriend_reflection_;
  delete RespAddFriend::default_instance_;
  delete RespAddFriend_reflection_;
  delete InviteGame::default_instance_;
  delete InviteGame_reflection_;
  delete RespInviteGame::default_instance_;
  delete RespInviteGame_reflection_;
  delete UpdateEventList::default_instance_;
  delete UpdateEventList_reflection_;
  delete EventWrap::default_instance_;
  delete EventWrap_reflection_;
  delete NoticeListResp::default_instance_;
  delete NoticeListResp_reflection_;
  delete NoticeS::default_instance_;
  delete NoticeS_reflection_;
  delete TipResp::default_instance_;
  delete TipResp_reflection_;
}

void protobuf_AddDesc_msg_5fevent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_5fevent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017msg_event.proto\022\tmsg_event\";\n\tAddFrien"
    "d\022\013\n\003uid\030\001 \002(\004\022\020\n\010nickname\030\002 \002(\t\022\017\n\007mail"
    "_id\030\003 \002(\r\"0\n\rRespAddFriend\022\017\n\007mail_id\030\001 "
    "\002(\r\022\016\n\006accept\030\002 \002(\010\"M\n\nInviteGame\022\013\n\003uid"
    "\030\001 \002(\004\022\020\n\010nickname\030\002 \002(\t\022\017\n\007room_no\030\003 \002("
    "\r\022\017\n\007mail_id\030\004 \002(\r\"1\n\016RespInviteGame\022\017\n\007"
    "mail_id\030\001 \002(\r\022\016\n\006accept\030\002 \002(\010\"7\n\017UpdateE"
    "ventList\022$\n\006events\030\001 \003(\0132\024.msg_event.Eve"
    "ntWrap\"a\n\tEventWrap\022(\n\nadd_friend\030\001 \001(\0132"
    "\024.msg_event.AddFriend\022*\n\013invite_game\030\002 \001"
    "(\0132\025.msg_event.InviteGame\"b\n\016NoticeListR"
    "esp\022\'\n\004type\030\001 \002(\0162\031.msg_event.opt_type_e"
    "vent\022\'\n\013notice_list\030\002 \003(\0132\022.msg_event.No"
    "ticeS\"w\n\007NoticeS\022\n\n\002id\030\001 \002(\004\022\017\n\007content\030"
    "\002 \002(\t\022\022\n\nbegin_time\030\003 \002(\004\022\022\n\nbreak_time\030"
    "\004 \002(\004\022\023\n\013minute_time\030\005 \002(\r\022\022\n\nsort_level"
    "\030\006 \002(\r\":\n\007TipResp\022!\n\004type\030\001 \002(\0162\023.msg_ev"
    "ent.tip_type\022\014\n\004args\030\002 \001(\t*\316\001\n\013c_cmd_eve"
    "nt\022\025\n\021update_event_list\020\001\022\016\n\nadd_friend\020"
    "\002\022\017\n\013invite_game\020\004\022\024\n\020resp_invite_game\020\005"
    "\022\024\n\020notice_list_resp\020\006\022\021\n\rmail_list_req\020"
    "\007\022\022\n\016mail_list_resp\020\010\022\020\n\014mail_opt_req\020\t\022"
    "\021\n\rmail_opt_resp\020\n\022\017\n\013tip_nt_resp\020\013*7\n\016o"
    "pt_type_event\022\022\n\016opt_t_all_list\020\001\022\021\n\ropt"
    "_t_new_one\020\002*\361\004\n\010tip_type\022\021\n\rtip_t_versi"
    "on\020\001\022\016\n\ntip_t_exit\020\002\022\022\n\016tip_t_needconn\020\003"
    "\022\021\n\rtip_t_disconn\020\004\022\020\n\014tip_t_accbad\020\005\022\024\n"
    "\020tip_t_acclogined\020\006\022\024\n\020tip_t_weixinfail\020"
    "\007\022\020\n\014tip_t_qqfail\020\010\022\023\n\017tip_t_accchange\020\t"
    "\022\034\n\030tip_t_roomcard_notenough\020\n\022\025\n\021tip_t_"
    "roomid_fail\020\013\022\023\n\017tip_t_room_full\020\014\022\023\n\017ti"
    "p_t_room_join\020\r\022\023\n\017tip_t_room_exit\020\016\022\026\n\022"
    "tip_t_room_disconn\020\017\022\025\n\021tip_t_room_recon"
    "n\020\020\022\027\n\023tip_t_room_startbtn\020\021\022\030\n\024tip_t_ro"
    "om_refusebtn\020\022\022\026\n\022tip_t_room_disband\020\023\022\025"
    "\n\021tip_t_room_kicked\020\024\022\034\n\030tip_t_room_appl"
    "y_disband\020\025\022\030\n\024tip_t_room_disbanded\020\026\022\036\n"
    "\032tip_t_room_disconn_disband\020\027\022!\n\035tip_t_r"
    "oom_apple_disband_must\020\030\022\035\n\031tip_t_room_q"
    "uick_msg_must\020\031\022\027\n\023tip_t_donwload_fail\020\032", 1600);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg_event.proto", &protobuf_RegisterTypes);
  AddFriend::default_instance_ = new AddFriend();
  RespAddFriend::default_instance_ = new RespAddFriend();
  InviteGame::default_instance_ = new InviteGame();
  RespInviteGame::default_instance_ = new RespInviteGame();
  UpdateEventList::default_instance_ = new UpdateEventList();
  EventWrap::default_instance_ = new EventWrap();
  NoticeListResp::default_instance_ = new NoticeListResp();
  NoticeS::default_instance_ = new NoticeS();
  TipResp::default_instance_ = new TipResp();
  AddFriend::default_instance_->InitAsDefaultInstance();
  RespAddFriend::default_instance_->InitAsDefaultInstance();
  InviteGame::default_instance_->InitAsDefaultInstance();
  RespInviteGame::default_instance_->InitAsDefaultInstance();
  UpdateEventList::default_instance_->InitAsDefaultInstance();
  EventWrap::default_instance_->InitAsDefaultInstance();
  NoticeListResp::default_instance_->InitAsDefaultInstance();
  NoticeS::default_instance_->InitAsDefaultInstance();
  TipResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_5fevent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_5fevent_2eproto {
  StaticDescriptorInitializer_msg_5fevent_2eproto() {
    protobuf_AddDesc_msg_5fevent_2eproto();
  }
} static_descriptor_initializer_msg_5fevent_2eproto_;
const ::google::protobuf::EnumDescriptor* c_cmd_event_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_cmd_event_descriptor_;
}
bool c_cmd_event_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* opt_type_event_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return opt_type_event_descriptor_;
}
bool opt_type_event_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* tip_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tip_type_descriptor_;
}
bool tip_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriend::kUidFieldNumber;
const int AddFriend::kNicknameFieldNumber;
const int AddFriend::kMailIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriend::AddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.AddFriend)
}

void AddFriend::InitAsDefaultInstance() {
}

AddFriend::AddFriend(const AddFriend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.AddFriend)
}

void AddFriend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriend::~AddFriend() {
  // @@protoc_insertion_point(destructor:msg_event.AddFriend)
  SharedDtor();
}

void AddFriend::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriend_descriptor_;
}

const AddFriend& AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

AddFriend* AddFriend::default_instance_ = NULL;

AddFriend* AddFriend::New(::google::protobuf::Arena* arena) const {
  AddFriend* n = new AddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.AddFriend)
  if (_has_bits_[0 / 32] & 7u) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mail_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.AddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_event.AddFriend.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mail_id;
        break;
      }

      // required uint32 mail_id = 3;
      case 3: {
        if (tag == 24) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.AddFriend)
  return false;
#undef DO_
}

void AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.AddFriend)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.AddFriend.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required uint32 mail_id = 3;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mail_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.AddFriend)
}

::google::protobuf::uint8* AddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.AddFriend)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.AddFriend.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required uint32 mail_id = 3;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mail_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.AddFriend)
  return target;
}

int AddFriend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_event.AddFriend)
  int total_size = 0;

  if (has_uid()) {
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_nickname()) {
    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_mail_id()) {
    // required uint32 mail_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());
  }

  return total_size;
}
int AddFriend::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.AddFriend)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required uint32 mail_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.AddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddFriend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.AddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.AddFriend)
    MergeFrom(*source);
  }
}

void AddFriend::MergeFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.AddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriend::CopyFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddFriend::Swap(AddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriend::InternalSwap(AddFriend* other) {
  std::swap(uid_, other->uid_);
  nickname_.Swap(&other->nickname_);
  std::swap(mail_id_, other->mail_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriend_descriptor_;
  metadata.reflection = AddFriend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriend

// required uint64 uid = 1;
bool AddFriend::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddFriend::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void AddFriend::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddFriend::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 AddFriend::uid() const {
  // @@protoc_insertion_point(field_get:msg_event.AddFriend.uid)
  return uid_;
}
 void AddFriend::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_event.AddFriend.uid)
}

// required string nickname = 2;
bool AddFriend::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddFriend::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void AddFriend::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddFriend::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& AddFriend::nickname() const {
  // @@protoc_insertion_point(field_get:msg_event.AddFriend.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddFriend::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_event.AddFriend.nickname)
}
 void AddFriend::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_event.AddFriend.nickname)
}
 void AddFriend::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_event.AddFriend.nickname)
}
 ::std::string* AddFriend::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_event.AddFriend.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddFriend::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_event.AddFriend.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddFriend::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_event.AddFriend.nickname)
}

// required uint32 mail_id = 3;
bool AddFriend::has_mail_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddFriend::set_has_mail_id() {
  _has_bits_[0] |= 0x00000004u;
}
void AddFriend::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddFriend::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
 ::google::protobuf::uint32 AddFriend::mail_id() const {
  // @@protoc_insertion_point(field_get:msg_event.AddFriend.mail_id)
  return mail_id_;
}
 void AddFriend::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
  // @@protoc_insertion_point(field_set:msg_event.AddFriend.mail_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespAddFriend::kMailIdFieldNumber;
const int RespAddFriend::kAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespAddFriend::RespAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.RespAddFriend)
}

void RespAddFriend::InitAsDefaultInstance() {
}

RespAddFriend::RespAddFriend(const RespAddFriend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.RespAddFriend)
}

void RespAddFriend::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespAddFriend::~RespAddFriend() {
  // @@protoc_insertion_point(destructor:msg_event.RespAddFriend)
  SharedDtor();
}

void RespAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespAddFriend_descriptor_;
}

const RespAddFriend& RespAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

RespAddFriend* RespAddFriend::default_instance_ = NULL;

RespAddFriend* RespAddFriend::New(::google::protobuf::Arena* arena) const {
  RespAddFriend* n = new RespAddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.RespAddFriend)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RespAddFriend, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RespAddFriend*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mail_id_, accept_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RespAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.RespAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }

      // required bool accept = 2;
      case 2: {
        if (tag == 16) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.RespAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.RespAddFriend)
  return false;
#undef DO_
}

void RespAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.RespAddFriend)
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.RespAddFriend)
}

::google::protobuf::uint8* RespAddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.RespAddFriend)
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.RespAddFriend)
  return target;
}

int RespAddFriend::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_event.RespAddFriend)
  int total_size = 0;

  if (has_mail_id()) {
    // required uint32 mail_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());
  }

  if (has_accept()) {
    // required bool accept = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int RespAddFriend::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.RespAddFriend)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 mail_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());

    // required bool accept = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.RespAddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RespAddFriend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RespAddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.RespAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.RespAddFriend)
    MergeFrom(*source);
  }
}

void RespAddFriend::MergeFrom(const RespAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.RespAddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RespAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.RespAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespAddFriend::CopyFrom(const RespAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.RespAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RespAddFriend::Swap(RespAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespAddFriend::InternalSwap(RespAddFriend* other) {
  std::swap(mail_id_, other->mail_id_);
  std::swap(accept_, other->accept_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespAddFriend_descriptor_;
  metadata.reflection = RespAddFriend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RespAddFriend

// required uint32 mail_id = 1;
bool RespAddFriend::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RespAddFriend::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RespAddFriend::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RespAddFriend::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
 ::google::protobuf::uint32 RespAddFriend::mail_id() const {
  // @@protoc_insertion_point(field_get:msg_event.RespAddFriend.mail_id)
  return mail_id_;
}
 void RespAddFriend::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
  // @@protoc_insertion_point(field_set:msg_event.RespAddFriend.mail_id)
}

// required bool accept = 2;
bool RespAddFriend::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RespAddFriend::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
void RespAddFriend::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
void RespAddFriend::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
 bool RespAddFriend::accept() const {
  // @@protoc_insertion_point(field_get:msg_event.RespAddFriend.accept)
  return accept_;
}
 void RespAddFriend::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:msg_event.RespAddFriend.accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InviteGame::kUidFieldNumber;
const int InviteGame::kNicknameFieldNumber;
const int InviteGame::kRoomNoFieldNumber;
const int InviteGame::kMailIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InviteGame::InviteGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.InviteGame)
}

void InviteGame::InitAsDefaultInstance() {
}

InviteGame::InviteGame(const InviteGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.InviteGame)
}

void InviteGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_no_ = 0u;
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteGame::~InviteGame() {
  // @@protoc_insertion_point(destructor:msg_event.InviteGame)
  SharedDtor();
}

void InviteGame::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InviteGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteGame_descriptor_;
}

const InviteGame& InviteGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

InviteGame* InviteGame::default_instance_ = NULL;

InviteGame* InviteGame::New(::google::protobuf::Arena* arena) const {
  InviteGame* n = new InviteGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InviteGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.InviteGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InviteGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InviteGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(room_no_, mail_id_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InviteGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.InviteGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_event.InviteGame.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_no;
        break;
      }

      // required uint32 room_no = 3;
      case 3: {
        if (tag == 24) {
         parse_room_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_no_)));
          set_has_room_no();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mail_id;
        break;
      }

      // required uint32 mail_id = 4;
      case 4: {
        if (tag == 32) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.InviteGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.InviteGame)
  return false;
#undef DO_
}

void InviteGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.InviteGame)
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.InviteGame.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required uint32 room_no = 3;
  if (has_room_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->room_no(), output);
  }

  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mail_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.InviteGame)
}

::google::protobuf::uint8* InviteGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.InviteGame)
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.InviteGame.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required uint32 room_no = 3;
  if (has_room_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->room_no(), target);
  }

  // required uint32 mail_id = 4;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mail_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.InviteGame)
  return target;
}

int InviteGame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_event.InviteGame)
  int total_size = 0;

  if (has_uid()) {
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  if (has_nickname()) {
    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  if (has_room_no()) {
    // required uint32 room_no = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_no());
  }

  if (has_mail_id()) {
    // required uint32 mail_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());
  }

  return total_size;
}
int InviteGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.InviteGame)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 uid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());

    // required string nickname = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());

    // required uint32 room_no = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_no());

    // required uint32 mail_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.InviteGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InviteGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InviteGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.InviteGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.InviteGame)
    MergeFrom(*source);
  }
}

void InviteGame::MergeFrom(const InviteGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.InviteGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_room_no()) {
      set_room_no(from.room_no());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InviteGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.InviteGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteGame::CopyFrom(const InviteGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.InviteGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void InviteGame::Swap(InviteGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InviteGame::InternalSwap(InviteGame* other) {
  std::swap(uid_, other->uid_);
  nickname_.Swap(&other->nickname_);
  std::swap(room_no_, other->room_no_);
  std::swap(mail_id_, other->mail_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InviteGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteGame_descriptor_;
  metadata.reflection = InviteGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InviteGame

// required uint64 uid = 1;
bool InviteGame::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InviteGame::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void InviteGame::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void InviteGame::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::uint64 InviteGame::uid() const {
  // @@protoc_insertion_point(field_get:msg_event.InviteGame.uid)
  return uid_;
}
 void InviteGame::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:msg_event.InviteGame.uid)
}

// required string nickname = 2;
bool InviteGame::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InviteGame::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void InviteGame::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void InviteGame::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& InviteGame::nickname() const {
  // @@protoc_insertion_point(field_get:msg_event.InviteGame.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteGame::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_event.InviteGame.nickname)
}
 void InviteGame::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_event.InviteGame.nickname)
}
 void InviteGame::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_event.InviteGame.nickname)
}
 ::std::string* InviteGame::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:msg_event.InviteGame.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InviteGame::release_nickname() {
  // @@protoc_insertion_point(field_release:msg_event.InviteGame.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InviteGame::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:msg_event.InviteGame.nickname)
}

// required uint32 room_no = 3;
bool InviteGame::has_room_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InviteGame::set_has_room_no() {
  _has_bits_[0] |= 0x00000004u;
}
void InviteGame::clear_has_room_no() {
  _has_bits_[0] &= ~0x00000004u;
}
void InviteGame::clear_room_no() {
  room_no_ = 0u;
  clear_has_room_no();
}
 ::google::protobuf::uint32 InviteGame::room_no() const {
  // @@protoc_insertion_point(field_get:msg_event.InviteGame.room_no)
  return room_no_;
}
 void InviteGame::set_room_no(::google::protobuf::uint32 value) {
  set_has_room_no();
  room_no_ = value;
  // @@protoc_insertion_point(field_set:msg_event.InviteGame.room_no)
}

// required uint32 mail_id = 4;
bool InviteGame::has_mail_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InviteGame::set_has_mail_id() {
  _has_bits_[0] |= 0x00000008u;
}
void InviteGame::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void InviteGame::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
 ::google::protobuf::uint32 InviteGame::mail_id() const {
  // @@protoc_insertion_point(field_get:msg_event.InviteGame.mail_id)
  return mail_id_;
}
 void InviteGame::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
  // @@protoc_insertion_point(field_set:msg_event.InviteGame.mail_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespInviteGame::kMailIdFieldNumber;
const int RespInviteGame::kAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespInviteGame::RespInviteGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.RespInviteGame)
}

void RespInviteGame::InitAsDefaultInstance() {
}

RespInviteGame::RespInviteGame(const RespInviteGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.RespInviteGame)
}

void RespInviteGame::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  accept_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespInviteGame::~RespInviteGame() {
  // @@protoc_insertion_point(destructor:msg_event.RespInviteGame)
  SharedDtor();
}

void RespInviteGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespInviteGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespInviteGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespInviteGame_descriptor_;
}

const RespInviteGame& RespInviteGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

RespInviteGame* RespInviteGame::default_instance_ = NULL;

RespInviteGame* RespInviteGame::New(::google::protobuf::Arena* arena) const {
  RespInviteGame* n = new RespInviteGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RespInviteGame::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.RespInviteGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RespInviteGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RespInviteGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(mail_id_, accept_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RespInviteGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.RespInviteGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_accept;
        break;
      }

      // required bool accept = 2;
      case 2: {
        if (tag == 16) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.RespInviteGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.RespInviteGame)
  return false;
#undef DO_
}

void RespInviteGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.RespInviteGame)
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required bool accept = 2;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.RespInviteGame)
}

::google::protobuf::uint8* RespInviteGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.RespInviteGame)
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required bool accept = 2;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.RespInviteGame)
  return target;
}

int RespInviteGame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_event.RespInviteGame)
  int total_size = 0;

  if (has_mail_id()) {
    // required uint32 mail_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());
  }

  if (has_accept()) {
    // required bool accept = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int RespInviteGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.RespInviteGame)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 mail_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mail_id());

    // required bool accept = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespInviteGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.RespInviteGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RespInviteGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RespInviteGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.RespInviteGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.RespInviteGame)
    MergeFrom(*source);
  }
}

void RespInviteGame::MergeFrom(const RespInviteGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.RespInviteGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RespInviteGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.RespInviteGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespInviteGame::CopyFrom(const RespInviteGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.RespInviteGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespInviteGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RespInviteGame::Swap(RespInviteGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespInviteGame::InternalSwap(RespInviteGame* other) {
  std::swap(mail_id_, other->mail_id_);
  std::swap(accept_, other->accept_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespInviteGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespInviteGame_descriptor_;
  metadata.reflection = RespInviteGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RespInviteGame

// required uint32 mail_id = 1;
bool RespInviteGame::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RespInviteGame::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RespInviteGame::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RespInviteGame::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
 ::google::protobuf::uint32 RespInviteGame::mail_id() const {
  // @@protoc_insertion_point(field_get:msg_event.RespInviteGame.mail_id)
  return mail_id_;
}
 void RespInviteGame::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
  // @@protoc_insertion_point(field_set:msg_event.RespInviteGame.mail_id)
}

// required bool accept = 2;
bool RespInviteGame::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RespInviteGame::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
void RespInviteGame::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
void RespInviteGame::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
 bool RespInviteGame::accept() const {
  // @@protoc_insertion_point(field_get:msg_event.RespInviteGame.accept)
  return accept_;
}
 void RespInviteGame::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:msg_event.RespInviteGame.accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateEventList::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateEventList::UpdateEventList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.UpdateEventList)
}

void UpdateEventList::InitAsDefaultInstance() {
}

UpdateEventList::UpdateEventList(const UpdateEventList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.UpdateEventList)
}

void UpdateEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateEventList::~UpdateEventList() {
  // @@protoc_insertion_point(destructor:msg_event.UpdateEventList)
  SharedDtor();
}

void UpdateEventList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateEventList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateEventList_descriptor_;
}

const UpdateEventList& UpdateEventList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

UpdateEventList* UpdateEventList::default_instance_ = NULL;

UpdateEventList* UpdateEventList::New(::google::protobuf::Arena* arena) const {
  UpdateEventList* n = new UpdateEventList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.UpdateEventList)
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpdateEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.UpdateEventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .msg_event.EventWrap events = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_events;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.UpdateEventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.UpdateEventList)
  return false;
#undef DO_
}

void UpdateEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.UpdateEventList)
  // repeated .msg_event.EventWrap events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.UpdateEventList)
}

::google::protobuf::uint8* UpdateEventList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.UpdateEventList)
  // repeated .msg_event.EventWrap events = 1;
  for (unsigned int i = 0, n = this->events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->events(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.UpdateEventList)
  return target;
}

int UpdateEventList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.UpdateEventList)
  int total_size = 0;

  // repeated .msg_event.EventWrap events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateEventList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.UpdateEventList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpdateEventList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateEventList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.UpdateEventList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.UpdateEventList)
    MergeFrom(*source);
  }
}

void UpdateEventList::MergeFrom(const UpdateEventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.UpdateEventList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  events_.MergeFrom(from.events_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UpdateEventList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.UpdateEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEventList::CopyFrom(const UpdateEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.UpdateEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEventList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->events())) return false;
  return true;
}

void UpdateEventList::Swap(UpdateEventList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateEventList::InternalSwap(UpdateEventList* other) {
  events_.UnsafeArenaSwap(&other->events_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateEventList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateEventList_descriptor_;
  metadata.reflection = UpdateEventList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateEventList

// repeated .msg_event.EventWrap events = 1;
int UpdateEventList::events_size() const {
  return events_.size();
}
void UpdateEventList::clear_events() {
  events_.Clear();
}
const ::msg_event::EventWrap& UpdateEventList::events(int index) const {
  // @@protoc_insertion_point(field_get:msg_event.UpdateEventList.events)
  return events_.Get(index);
}
::msg_event::EventWrap* UpdateEventList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:msg_event.UpdateEventList.events)
  return events_.Mutable(index);
}
::msg_event::EventWrap* UpdateEventList::add_events() {
  // @@protoc_insertion_point(field_add:msg_event.UpdateEventList.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_event::EventWrap >*
UpdateEventList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:msg_event.UpdateEventList.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_event::EventWrap >&
UpdateEventList::events() const {
  // @@protoc_insertion_point(field_list:msg_event.UpdateEventList.events)
  return events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventWrap::kAddFriendFieldNumber;
const int EventWrap::kInviteGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventWrap::EventWrap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.EventWrap)
}

void EventWrap::InitAsDefaultInstance() {
  add_friend_ = const_cast< ::msg_event::AddFriend*>(&::msg_event::AddFriend::default_instance());
  invite_game_ = const_cast< ::msg_event::InviteGame*>(&::msg_event::InviteGame::default_instance());
}

EventWrap::EventWrap(const EventWrap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.EventWrap)
}

void EventWrap::SharedCtor() {
  _cached_size_ = 0;
  add_friend_ = NULL;
  invite_game_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventWrap::~EventWrap() {
  // @@protoc_insertion_point(destructor:msg_event.EventWrap)
  SharedDtor();
}

void EventWrap::SharedDtor() {
  if (this != default_instance_) {
    delete add_friend_;
    delete invite_game_;
  }
}

void EventWrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventWrap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventWrap_descriptor_;
}

const EventWrap& EventWrap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

EventWrap* EventWrap::default_instance_ = NULL;

EventWrap* EventWrap::New(::google::protobuf::Arena* arena) const {
  EventWrap* n = new EventWrap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventWrap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.EventWrap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_add_friend()) {
      if (add_friend_ != NULL) add_friend_->::msg_event::AddFriend::Clear();
    }
    if (has_invite_game()) {
      if (invite_game_ != NULL) invite_game_->::msg_event::InviteGame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EventWrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.EventWrap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .msg_event.AddFriend add_friend = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_friend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invite_game;
        break;
      }

      // optional .msg_event.InviteGame invite_game = 2;
      case 2: {
        if (tag == 18) {
         parse_invite_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.EventWrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.EventWrap)
  return false;
#undef DO_
}

void EventWrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.EventWrap)
  // optional .msg_event.AddFriend add_friend = 1;
  if (has_add_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->add_friend_, output);
  }

  // optional .msg_event.InviteGame invite_game = 2;
  if (has_invite_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->invite_game_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.EventWrap)
}

::google::protobuf::uint8* EventWrap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.EventWrap)
  // optional .msg_event.AddFriend add_friend = 1;
  if (has_add_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->add_friend_, false, target);
  }

  // optional .msg_event.InviteGame invite_game = 2;
  if (has_invite_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->invite_game_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.EventWrap)
  return target;
}

int EventWrap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.EventWrap)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .msg_event.AddFriend add_friend = 1;
    if (has_add_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_friend_);
    }

    // optional .msg_event.InviteGame invite_game = 2;
    if (has_invite_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->invite_game_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventWrap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.EventWrap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventWrap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventWrap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.EventWrap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.EventWrap)
    MergeFrom(*source);
  }
}

void EventWrap::MergeFrom(const EventWrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.EventWrap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_add_friend()) {
      mutable_add_friend()->::msg_event::AddFriend::MergeFrom(from.add_friend());
    }
    if (from.has_invite_game()) {
      mutable_invite_game()->::msg_event::InviteGame::MergeFrom(from.invite_game());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EventWrap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.EventWrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventWrap::CopyFrom(const EventWrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.EventWrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventWrap::IsInitialized() const {

  if (has_add_friend()) {
    if (!this->add_friend_->IsInitialized()) return false;
  }
  if (has_invite_game()) {
    if (!this->invite_game_->IsInitialized()) return false;
  }
  return true;
}

void EventWrap::Swap(EventWrap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventWrap::InternalSwap(EventWrap* other) {
  std::swap(add_friend_, other->add_friend_);
  std::swap(invite_game_, other->invite_game_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventWrap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventWrap_descriptor_;
  metadata.reflection = EventWrap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventWrap

// optional .msg_event.AddFriend add_friend = 1;
bool EventWrap::has_add_friend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EventWrap::set_has_add_friend() {
  _has_bits_[0] |= 0x00000001u;
}
void EventWrap::clear_has_add_friend() {
  _has_bits_[0] &= ~0x00000001u;
}
void EventWrap::clear_add_friend() {
  if (add_friend_ != NULL) add_friend_->::msg_event::AddFriend::Clear();
  clear_has_add_friend();
}
const ::msg_event::AddFriend& EventWrap::add_friend() const {
  // @@protoc_insertion_point(field_get:msg_event.EventWrap.add_friend)
  return add_friend_ != NULL ? *add_friend_ : *default_instance_->add_friend_;
}
::msg_event::AddFriend* EventWrap::mutable_add_friend() {
  set_has_add_friend();
  if (add_friend_ == NULL) {
    add_friend_ = new ::msg_event::AddFriend;
  }
  // @@protoc_insertion_point(field_mutable:msg_event.EventWrap.add_friend)
  return add_friend_;
}
::msg_event::AddFriend* EventWrap::release_add_friend() {
  // @@protoc_insertion_point(field_release:msg_event.EventWrap.add_friend)
  clear_has_add_friend();
  ::msg_event::AddFriend* temp = add_friend_;
  add_friend_ = NULL;
  return temp;
}
void EventWrap::set_allocated_add_friend(::msg_event::AddFriend* add_friend) {
  delete add_friend_;
  add_friend_ = add_friend;
  if (add_friend) {
    set_has_add_friend();
  } else {
    clear_has_add_friend();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_event.EventWrap.add_friend)
}

// optional .msg_event.InviteGame invite_game = 2;
bool EventWrap::has_invite_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EventWrap::set_has_invite_game() {
  _has_bits_[0] |= 0x00000002u;
}
void EventWrap::clear_has_invite_game() {
  _has_bits_[0] &= ~0x00000002u;
}
void EventWrap::clear_invite_game() {
  if (invite_game_ != NULL) invite_game_->::msg_event::InviteGame::Clear();
  clear_has_invite_game();
}
const ::msg_event::InviteGame& EventWrap::invite_game() const {
  // @@protoc_insertion_point(field_get:msg_event.EventWrap.invite_game)
  return invite_game_ != NULL ? *invite_game_ : *default_instance_->invite_game_;
}
::msg_event::InviteGame* EventWrap::mutable_invite_game() {
  set_has_invite_game();
  if (invite_game_ == NULL) {
    invite_game_ = new ::msg_event::InviteGame;
  }
  // @@protoc_insertion_point(field_mutable:msg_event.EventWrap.invite_game)
  return invite_game_;
}
::msg_event::InviteGame* EventWrap::release_invite_game() {
  // @@protoc_insertion_point(field_release:msg_event.EventWrap.invite_game)
  clear_has_invite_game();
  ::msg_event::InviteGame* temp = invite_game_;
  invite_game_ = NULL;
  return temp;
}
void EventWrap::set_allocated_invite_game(::msg_event::InviteGame* invite_game) {
  delete invite_game_;
  invite_game_ = invite_game;
  if (invite_game) {
    set_has_invite_game();
  } else {
    clear_has_invite_game();
  }
  // @@protoc_insertion_point(field_set_allocated:msg_event.EventWrap.invite_game)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoticeListResp::kTypeFieldNumber;
const int NoticeListResp::kNoticeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoticeListResp::NoticeListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.NoticeListResp)
}

void NoticeListResp::InitAsDefaultInstance() {
}

NoticeListResp::NoticeListResp(const NoticeListResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.NoticeListResp)
}

void NoticeListResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeListResp::~NoticeListResp() {
  // @@protoc_insertion_point(destructor:msg_event.NoticeListResp)
  SharedDtor();
}

void NoticeListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoticeListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeListResp_descriptor_;
}

const NoticeListResp& NoticeListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

NoticeListResp* NoticeListResp::default_instance_ = NULL;

NoticeListResp* NoticeListResp::New(::google::protobuf::Arena* arena) const {
  NoticeListResp* n = new NoticeListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoticeListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.NoticeListResp)
  type_ = 1;
  notice_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NoticeListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.NoticeListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_event.opt_type_event type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_event::opt_type_event_IsValid(value)) {
            set_type(static_cast< ::msg_event::opt_type_event >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_notice_list;
        break;
      }

      // repeated .msg_event.NoticeS notice_list = 2;
      case 2: {
        if (tag == 18) {
         parse_notice_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_notice_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notice_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_notice_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.NoticeListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.NoticeListResp)
  return false;
#undef DO_
}

void NoticeListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.NoticeListResp)
  // required .msg_event.opt_type_event type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .msg_event.NoticeS notice_list = 2;
  for (unsigned int i = 0, n = this->notice_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->notice_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.NoticeListResp)
}

::google::protobuf::uint8* NoticeListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.NoticeListResp)
  // required .msg_event.opt_type_event type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .msg_event.NoticeS notice_list = 2;
  for (unsigned int i = 0, n = this->notice_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->notice_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.NoticeListResp)
  return target;
}

int NoticeListResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.NoticeListResp)
  int total_size = 0;

  // required .msg_event.opt_type_event type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .msg_event.NoticeS notice_list = 2;
  total_size += 1 * this->notice_list_size();
  for (int i = 0; i < this->notice_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.NoticeListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NoticeListResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NoticeListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.NoticeListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.NoticeListResp)
    MergeFrom(*source);
  }
}

void NoticeListResp::MergeFrom(const NoticeListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.NoticeListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  notice_list_.MergeFrom(from.notice_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NoticeListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.NoticeListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeListResp::CopyFrom(const NoticeListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.NoticeListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeListResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->notice_list())) return false;
  return true;
}

void NoticeListResp::Swap(NoticeListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoticeListResp::InternalSwap(NoticeListResp* other) {
  std::swap(type_, other->type_);
  notice_list_.UnsafeArenaSwap(&other->notice_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoticeListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeListResp_descriptor_;
  metadata.reflection = NoticeListResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoticeListResp

// required .msg_event.opt_type_event type = 1;
bool NoticeListResp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoticeListResp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void NoticeListResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoticeListResp::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_event::opt_type_event NoticeListResp::type() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeListResp.type)
  return static_cast< ::msg_event::opt_type_event >(type_);
}
 void NoticeListResp::set_type(::msg_event::opt_type_event value) {
  assert(::msg_event::opt_type_event_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeListResp.type)
}

// repeated .msg_event.NoticeS notice_list = 2;
int NoticeListResp::notice_list_size() const {
  return notice_list_.size();
}
void NoticeListResp::clear_notice_list() {
  notice_list_.Clear();
}
const ::msg_event::NoticeS& NoticeListResp::notice_list(int index) const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeListResp.notice_list)
  return notice_list_.Get(index);
}
::msg_event::NoticeS* NoticeListResp::mutable_notice_list(int index) {
  // @@protoc_insertion_point(field_mutable:msg_event.NoticeListResp.notice_list)
  return notice_list_.Mutable(index);
}
::msg_event::NoticeS* NoticeListResp::add_notice_list() {
  // @@protoc_insertion_point(field_add:msg_event.NoticeListResp.notice_list)
  return notice_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::msg_event::NoticeS >*
NoticeListResp::mutable_notice_list() {
  // @@protoc_insertion_point(field_mutable_list:msg_event.NoticeListResp.notice_list)
  return &notice_list_;
}
const ::google::protobuf::RepeatedPtrField< ::msg_event::NoticeS >&
NoticeListResp::notice_list() const {
  // @@protoc_insertion_point(field_list:msg_event.NoticeListResp.notice_list)
  return notice_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoticeS::kIdFieldNumber;
const int NoticeS::kContentFieldNumber;
const int NoticeS::kBeginTimeFieldNumber;
const int NoticeS::kBreakTimeFieldNumber;
const int NoticeS::kMinuteTimeFieldNumber;
const int NoticeS::kSortLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoticeS::NoticeS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.NoticeS)
}

void NoticeS::InitAsDefaultInstance() {
}

NoticeS::NoticeS(const NoticeS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.NoticeS)
}

void NoticeS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  begin_time_ = GOOGLE_ULONGLONG(0);
  break_time_ = GOOGLE_ULONGLONG(0);
  minute_time_ = 0u;
  sort_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeS::~NoticeS() {
  // @@protoc_insertion_point(destructor:msg_event.NoticeS)
  SharedDtor();
}

void NoticeS::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NoticeS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeS_descriptor_;
}

const NoticeS& NoticeS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

NoticeS* NoticeS::default_instance_ = NULL;

NoticeS* NoticeS::New(::google::protobuf::Arena* arena) const {
  NoticeS* n = new NoticeS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoticeS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.NoticeS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NoticeS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NoticeS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(begin_time_, sort_level_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NoticeS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.NoticeS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_event.NoticeS.content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // required uint64 begin_time = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_break_time;
        break;
      }

      // required uint64 break_time = 4;
      case 4: {
        if (tag == 32) {
         parse_break_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &break_time_)));
          set_has_break_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_minute_time;
        break;
      }

      // required uint32 minute_time = 5;
      case 5: {
        if (tag == 40) {
         parse_minute_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_time_)));
          set_has_minute_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sort_level;
        break;
      }

      // required uint32 sort_level = 6;
      case 6: {
        if (tag == 48) {
         parse_sort_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_level_)));
          set_has_sort_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.NoticeS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.NoticeS)
  return false;
#undef DO_
}

void NoticeS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.NoticeS)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.NoticeS.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // required uint64 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begin_time(), output);
  }

  // required uint64 break_time = 4;
  if (has_break_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->break_time(), output);
  }

  // required uint32 minute_time = 5;
  if (has_minute_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->minute_time(), output);
  }

  // required uint32 sort_level = 6;
  if (has_sort_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sort_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.NoticeS)
}

::google::protobuf::uint8* NoticeS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.NoticeS)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.NoticeS.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // required uint64 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begin_time(), target);
  }

  // required uint64 break_time = 4;
  if (has_break_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->break_time(), target);
  }

  // required uint32 minute_time = 5;
  if (has_minute_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->minute_time(), target);
  }

  // required uint32 sort_level = 6;
  if (has_sort_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sort_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.NoticeS)
  return target;
}

int NoticeS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:msg_event.NoticeS)
  int total_size = 0;

  if (has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_content()) {
    // required string content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  if (has_begin_time()) {
    // required uint64 begin_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begin_time());
  }

  if (has_break_time()) {
    // required uint64 break_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->break_time());
  }

  if (has_minute_time()) {
    // required uint32 minute_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute_time());
  }

  if (has_sort_level()) {
    // required uint32 sort_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sort_level());
  }

  return total_size;
}
int NoticeS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.NoticeS)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required string content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());

    // required uint64 begin_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->begin_time());

    // required uint64 break_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->break_time());

    // required uint32 minute_time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minute_time());

    // required uint32 sort_level = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sort_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.NoticeS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NoticeS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NoticeS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.NoticeS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.NoticeS)
    MergeFrom(*source);
  }
}

void NoticeS::MergeFrom(const NoticeS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.NoticeS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_break_time()) {
      set_break_time(from.break_time());
    }
    if (from.has_minute_time()) {
      set_minute_time(from.minute_time());
    }
    if (from.has_sort_level()) {
      set_sort_level(from.sort_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NoticeS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.NoticeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeS::CopyFrom(const NoticeS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.NoticeS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void NoticeS::Swap(NoticeS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoticeS::InternalSwap(NoticeS* other) {
  std::swap(id_, other->id_);
  content_.Swap(&other->content_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(break_time_, other->break_time_);
  std::swap(minute_time_, other->minute_time_);
  std::swap(sort_level_, other->sort_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoticeS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeS_descriptor_;
  metadata.reflection = NoticeS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoticeS

// required uint64 id = 1;
bool NoticeS::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NoticeS::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NoticeS::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NoticeS::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 NoticeS::id() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.id)
  return id_;
}
 void NoticeS::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.id)
}

// required string content = 2;
bool NoticeS::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NoticeS::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void NoticeS::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void NoticeS::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
 const ::std::string& NoticeS::content() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NoticeS::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.content)
}
 void NoticeS::set_content(const char* value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_event.NoticeS.content)
}
 void NoticeS::set_content(const char* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_event.NoticeS.content)
}
 ::std::string* NoticeS::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:msg_event.NoticeS.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NoticeS::release_content() {
  // @@protoc_insertion_point(field_release:msg_event.NoticeS.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NoticeS::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:msg_event.NoticeS.content)
}

// required uint64 begin_time = 3;
bool NoticeS::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NoticeS::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
void NoticeS::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void NoticeS::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_time();
}
 ::google::protobuf::uint64 NoticeS::begin_time() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.begin_time)
  return begin_time_;
}
 void NoticeS::set_begin_time(::google::protobuf::uint64 value) {
  set_has_begin_time();
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.begin_time)
}

// required uint64 break_time = 4;
bool NoticeS::has_break_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NoticeS::set_has_break_time() {
  _has_bits_[0] |= 0x00000008u;
}
void NoticeS::clear_has_break_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void NoticeS::clear_break_time() {
  break_time_ = GOOGLE_ULONGLONG(0);
  clear_has_break_time();
}
 ::google::protobuf::uint64 NoticeS::break_time() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.break_time)
  return break_time_;
}
 void NoticeS::set_break_time(::google::protobuf::uint64 value) {
  set_has_break_time();
  break_time_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.break_time)
}

// required uint32 minute_time = 5;
bool NoticeS::has_minute_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void NoticeS::set_has_minute_time() {
  _has_bits_[0] |= 0x00000010u;
}
void NoticeS::clear_has_minute_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void NoticeS::clear_minute_time() {
  minute_time_ = 0u;
  clear_has_minute_time();
}
 ::google::protobuf::uint32 NoticeS::minute_time() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.minute_time)
  return minute_time_;
}
 void NoticeS::set_minute_time(::google::protobuf::uint32 value) {
  set_has_minute_time();
  minute_time_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.minute_time)
}

// required uint32 sort_level = 6;
bool NoticeS::has_sort_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void NoticeS::set_has_sort_level() {
  _has_bits_[0] |= 0x00000020u;
}
void NoticeS::clear_has_sort_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void NoticeS::clear_sort_level() {
  sort_level_ = 0u;
  clear_has_sort_level();
}
 ::google::protobuf::uint32 NoticeS::sort_level() const {
  // @@protoc_insertion_point(field_get:msg_event.NoticeS.sort_level)
  return sort_level_;
}
 void NoticeS::set_sort_level(::google::protobuf::uint32 value) {
  set_has_sort_level();
  sort_level_ = value;
  // @@protoc_insertion_point(field_set:msg_event.NoticeS.sort_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TipResp::kTypeFieldNumber;
const int TipResp::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TipResp::TipResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg_event.TipResp)
}

void TipResp::InitAsDefaultInstance() {
}

TipResp::TipResp(const TipResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:msg_event.TipResp)
}

void TipResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TipResp::~TipResp() {
  // @@protoc_insertion_point(destructor:msg_event.TipResp)
  SharedDtor();
}

void TipResp::SharedDtor() {
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TipResp_descriptor_;
}

const TipResp& TipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_5fevent_2eproto();
  return *default_instance_;
}

TipResp* TipResp::default_instance_ = NULL;

TipResp* TipResp::New(::google::protobuf::Arena* arena) const {
  TipResp* n = new TipResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TipResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_event.TipResp)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    if (has_args()) {
      args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:msg_event.TipResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .msg_event.tip_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::msg_event::tip_type_IsValid(value)) {
            set_type(static_cast< ::msg_event::tip_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // optional string args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_event.TipResp.args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:msg_event.TipResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:msg_event.TipResp)
  return false;
#undef DO_
}

void TipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:msg_event.TipResp)
  // required .msg_event.tip_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.TipResp.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:msg_event.TipResp)
}

::google::protobuf::uint8* TipResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_event.TipResp)
  // required .msg_event.tip_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_event.TipResp.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_event.TipResp)
  return target;
}

int TipResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:msg_event.TipResp)
  int total_size = 0;

  // required .msg_event.tip_type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string args = 2;
  if (has_args()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TipResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_event.TipResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TipResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TipResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_event.TipResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_event.TipResp)
    MergeFrom(*source);
  }
}

void TipResp::MergeFrom(const TipResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_event.TipResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_args()) {
      set_has_args();
      args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TipResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_event.TipResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TipResp::CopyFrom(const TipResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_event.TipResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TipResp::Swap(TipResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TipResp::InternalSwap(TipResp* other) {
  std::swap(type_, other->type_);
  args_.Swap(&other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TipResp_descriptor_;
  metadata.reflection = TipResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TipResp

// required .msg_event.tip_type type = 1;
bool TipResp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TipResp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void TipResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void TipResp::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::msg_event::tip_type TipResp::type() const {
  // @@protoc_insertion_point(field_get:msg_event.TipResp.type)
  return static_cast< ::msg_event::tip_type >(type_);
}
 void TipResp::set_type(::msg_event::tip_type value) {
  assert(::msg_event::tip_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_event.TipResp.type)
}

// optional string args = 2;
bool TipResp::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TipResp::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
void TipResp::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
void TipResp::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
 const ::std::string& TipResp::args() const {
  // @@protoc_insertion_point(field_get:msg_event.TipResp.args)
  return args_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TipResp::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_event.TipResp.args)
}
 void TipResp::set_args(const char* value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_event.TipResp.args)
}
 void TipResp::set_args(const char* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_event.TipResp.args)
}
 ::std::string* TipResp::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:msg_event.TipResp.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TipResp::release_args() {
  // @@protoc_insertion_point(field_release:msg_event.TipResp.args)
  clear_has_args();
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TipResp::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:msg_event.TipResp.args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_event

// @@protoc_insertion_point(global_scope)
