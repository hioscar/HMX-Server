// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmx_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hmx_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config {

namespace {

const ::google::protobuf::Descriptor* ServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerivceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerivceInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* server_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hmx_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hmx_5fconfig_2eproto() {
  protobuf_AddDesc_hmx_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hmx_config.proto");
  GOOGLE_CHECK(file != NULL);
  ServerInfo_descriptor_ = file->message_type(0);
  static const int ServerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, recvsrvlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, broadcastlist_),
  };
  ServerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerInfo_descriptor_,
      ServerInfo::default_instance_,
      ServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInfo, _internal_metadata_),
      -1);
  SerivceInfo_descriptor_ = file->message_type(1);
  static const int SerivceInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivcename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivcefun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivceip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivceport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivceremoteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivceuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivcepasswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, serivcevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, maxconntions_),
  };
  SerivceInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerivceInfo_descriptor_,
      SerivceInfo::default_instance_,
      SerivceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SerivceInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceInfo, _internal_metadata_),
      -1);
  server_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hmx_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerInfo_descriptor_, &ServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerivceInfo_descriptor_, &SerivceInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hmx_5fconfig_2eproto() {
  delete ServerInfo::default_instance_;
  delete ServerInfo_reflection_;
  delete SerivceInfo::default_instance_;
  delete SerivceInfo_reflection_;
}

void protobuf_AddDesc_hmx_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_hmx_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020hmx_config.proto\022\006config\"^\n\nServerInfo"
    "\022\020\n\010ServerID\030\001 \001(\r\022\022\n\nServerName\030\002 \001(\t\022\023"
    "\n\013Recvsrvlist\030\003 \001(\010\022\025\n\rBroadcastlist\030\004 \001"
    "(\010\"\342\001\n\013SerivceInfo\022\021\n\tSerivceID\030\001 \001(\r\022\023\n"
    "\013SerivceName\030\002 \001(\t\022\022\n\nSerivceFun\030\003 \001(\t\022\021"
    "\n\tSerivceIP\030\004 \001(\t\022\023\n\013SerivcePort\030\005 \001(\r\022\027"
    "\n\017SerivceRemoteid\030\006 \001(\r\022\023\n\013SerivceUser\030\007"
    " \001(\t\022\025\n\rSerivcePasswd\030\010 \001(\t\022\024\n\014SerivceVa"
    "lue\030\t \001(\t\022\024\n\014Maxconntions\030\n \001(\r*v\n\013serve"
    "r_type\022\024\n\020server_t_gateway\020\001\022\022\n\016server_t"
    "_login\020\002\022\022\n\016server_t_world\020\003\022\022\n\016server_t"
    "_scene\020\004\022\025\n\021server_t_database\020\005", 471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmx_config.proto", &protobuf_RegisterTypes);
  ServerInfo::default_instance_ = new ServerInfo();
  SerivceInfo::default_instance_ = new SerivceInfo();
  ServerInfo::default_instance_->InitAsDefaultInstance();
  SerivceInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hmx_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hmx_5fconfig_2eproto {
  StaticDescriptorInitializer_hmx_5fconfig_2eproto() {
    protobuf_AddDesc_hmx_5fconfig_2eproto();
  }
} static_descriptor_initializer_hmx_5fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* server_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_type_descriptor_;
}
bool server_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerInfo::kServerIDFieldNumber;
const int ServerInfo::kServerNameFieldNumber;
const int ServerInfo::kRecvsrvlistFieldNumber;
const int ServerInfo::kBroadcastlistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerInfo::ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.ServerInfo)
}

void ServerInfo::InitAsDefaultInstance() {
}

ServerInfo::ServerInfo(const ServerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:config.ServerInfo)
}

void ServerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = 0u;
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvsrvlist_ = false;
  broadcastlist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:config.ServerInfo)
  SharedDtor();
}

void ServerInfo::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInfo_descriptor_;
}

const ServerInfo& ServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fconfig_2eproto();
  return *default_instance_;
}

ServerInfo* ServerInfo::default_instance_ = NULL;

ServerInfo* ServerInfo::New(::google::protobuf::Arena* arena) const {
  ServerInfo* n = new ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ServerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ServerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(serverid_, broadcastlist_);
    if (has_servername()) {
      servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerName;
        break;
      }

      // optional string ServerName = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.ServerInfo.ServerName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Recvsrvlist;
        break;
      }

      // optional bool Recvsrvlist = 3;
      case 3: {
        if (tag == 24) {
         parse_Recvsrvlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recvsrvlist_)));
          set_has_recvsrvlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Broadcastlist;
        break;
      }

      // optional bool Broadcastlist = 4;
      case 4: {
        if (tag == 32) {
         parse_Broadcastlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcastlist_)));
          set_has_broadcastlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.ServerInfo)
  return false;
#undef DO_
}

void ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.ServerInfo)
  // optional uint32 ServerID = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // optional string ServerName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ServerInfo.ServerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->servername(), output);
  }

  // optional bool Recvsrvlist = 3;
  if (has_recvsrvlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->recvsrvlist(), output);
  }

  // optional bool Broadcastlist = 4;
  if (has_broadcastlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->broadcastlist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.ServerInfo)
}

::google::protobuf::uint8* ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.ServerInfo)
  // optional uint32 ServerID = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // optional string ServerName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.ServerInfo.ServerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  // optional bool Recvsrvlist = 3;
  if (has_recvsrvlist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->recvsrvlist(), target);
  }

  // optional bool Broadcastlist = 4;
  if (has_broadcastlist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->broadcastlist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ServerInfo)
  return target;
}

int ServerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:config.ServerInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 ServerID = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional string ServerName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional bool Recvsrvlist = 3;
    if (has_recvsrvlist()) {
      total_size += 1 + 1;
    }

    // optional bool Broadcastlist = 4;
    if (has_broadcastlist()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.ServerInfo)
    MergeFrom(*source);
  }
}

void ServerInfo::MergeFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.ServerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_has_servername();
      servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
    }
    if (from.has_recvsrvlist()) {
      set_recvsrvlist(from.recvsrvlist());
    }
    if (from.has_broadcastlist()) {
      set_broadcastlist(from.broadcastlist());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {

  return true;
}

void ServerInfo::Swap(ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerInfo::InternalSwap(ServerInfo* other) {
  std::swap(serverid_, other->serverid_);
  servername_.Swap(&other->servername_);
  std::swap(recvsrvlist_, other->recvsrvlist_);
  std::swap(broadcastlist_, other->broadcastlist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInfo_descriptor_;
  metadata.reflection = ServerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// optional uint32 ServerID = 1;
bool ServerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
 ::google::protobuf::uint32 ServerInfo::serverid() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.ServerID)
  return serverid_;
}
 void ServerInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.ServerID)
}

// optional string ServerName = 2;
bool ServerInfo::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerInfo::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servername();
}
 const ::std::string& ServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.ServerName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ServerInfo.ServerName)
}
 void ServerInfo::set_servername(const char* value) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ServerInfo.ServerName)
}
 void ServerInfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ServerInfo.ServerName)
}
 ::std::string* ServerInfo::mutable_servername() {
  set_has_servername();
  // @@protoc_insertion_point(field_mutable:config.ServerInfo.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerInfo::release_servername() {
  // @@protoc_insertion_point(field_release:config.ServerInfo.ServerName)
  clear_has_servername();
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerInfo::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    set_has_servername();
  } else {
    clear_has_servername();
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:config.ServerInfo.ServerName)
}

// optional bool Recvsrvlist = 3;
bool ServerInfo::has_recvsrvlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerInfo::set_has_recvsrvlist() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerInfo::clear_has_recvsrvlist() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerInfo::clear_recvsrvlist() {
  recvsrvlist_ = false;
  clear_has_recvsrvlist();
}
 bool ServerInfo::recvsrvlist() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.Recvsrvlist)
  return recvsrvlist_;
}
 void ServerInfo::set_recvsrvlist(bool value) {
  set_has_recvsrvlist();
  recvsrvlist_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.Recvsrvlist)
}

// optional bool Broadcastlist = 4;
bool ServerInfo::has_broadcastlist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerInfo::set_has_broadcastlist() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerInfo::clear_has_broadcastlist() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerInfo::clear_broadcastlist() {
  broadcastlist_ = false;
  clear_has_broadcastlist();
}
 bool ServerInfo::broadcastlist() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.Broadcastlist)
  return broadcastlist_;
}
 void ServerInfo::set_broadcastlist(bool value) {
  set_has_broadcastlist();
  broadcastlist_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.Broadcastlist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerivceInfo::kSerivceIDFieldNumber;
const int SerivceInfo::kSerivceNameFieldNumber;
const int SerivceInfo::kSerivceFunFieldNumber;
const int SerivceInfo::kSerivceIPFieldNumber;
const int SerivceInfo::kSerivcePortFieldNumber;
const int SerivceInfo::kSerivceRemoteidFieldNumber;
const int SerivceInfo::kSerivceUserFieldNumber;
const int SerivceInfo::kSerivcePasswdFieldNumber;
const int SerivceInfo::kSerivceValueFieldNumber;
const int SerivceInfo::kMaxconntionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerivceInfo::SerivceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.SerivceInfo)
}

void SerivceInfo::InitAsDefaultInstance() {
}

SerivceInfo::SerivceInfo(const SerivceInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:config.SerivceInfo)
}

void SerivceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serivceid_ = 0u;
  serivcename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcefun_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivceip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivceport_ = 0u;
  serivceremoteid_ = 0u;
  serivceuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcepasswd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcevalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxconntions_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerivceInfo::~SerivceInfo() {
  // @@protoc_insertion_point(destructor:config.SerivceInfo)
  SharedDtor();
}

void SerivceInfo::SharedDtor() {
  serivcename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcefun_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivceip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivceuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcepasswd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serivcevalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SerivceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerivceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerivceInfo_descriptor_;
}

const SerivceInfo& SerivceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fconfig_2eproto();
  return *default_instance_;
}

SerivceInfo* SerivceInfo::default_instance_ = NULL;

SerivceInfo* SerivceInfo::New(::google::protobuf::Arena* arena) const {
  SerivceInfo* n = new SerivceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerivceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:config.SerivceInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SerivceInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SerivceInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(serivceid_, serivceport_);
    if (has_serivcename()) {
      serivcename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_serivcefun()) {
      serivcefun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_serivceip()) {
      serivceip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    serivceremoteid_ = 0u;
    if (has_serivceuser()) {
      serivceuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_serivcepasswd()) {
      serivcepasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_serivcevalue()) {
      serivcevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    maxconntions_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SerivceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.SerivceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SerivceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serivceid_)));
          set_has_serivceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SerivceName;
        break;
      }

      // optional string SerivceName = 2;
      case 2: {
        if (tag == 18) {
         parse_SerivceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivcename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivcename().data(), this->serivcename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivceName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SerivceFun;
        break;
      }

      // optional string SerivceFun = 3;
      case 3: {
        if (tag == 26) {
         parse_SerivceFun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivcefun()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivcefun().data(), this->serivcefun().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivceFun");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SerivceIP;
        break;
      }

      // optional string SerivceIP = 4;
      case 4: {
        if (tag == 34) {
         parse_SerivceIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivceip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivceip().data(), this->serivceip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivceIP");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SerivcePort;
        break;
      }

      // optional uint32 SerivcePort = 5;
      case 5: {
        if (tag == 40) {
         parse_SerivcePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serivceport_)));
          set_has_serivceport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SerivceRemoteid;
        break;
      }

      // optional uint32 SerivceRemoteid = 6;
      case 6: {
        if (tag == 48) {
         parse_SerivceRemoteid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serivceremoteid_)));
          set_has_serivceremoteid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SerivceUser;
        break;
      }

      // optional string SerivceUser = 7;
      case 7: {
        if (tag == 58) {
         parse_SerivceUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivceuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivceuser().data(), this->serivceuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivceUser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SerivcePasswd;
        break;
      }

      // optional string SerivcePasswd = 8;
      case 8: {
        if (tag == 66) {
         parse_SerivcePasswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivcepasswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivcepasswd().data(), this->serivcepasswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivcePasswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SerivceValue;
        break;
      }

      // optional string SerivceValue = 9;
      case 9: {
        if (tag == 74) {
         parse_SerivceValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serivcevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serivcevalue().data(), this->serivcevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.SerivceInfo.SerivceValue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Maxconntions;
        break;
      }

      // optional uint32 Maxconntions = 10;
      case 10: {
        if (tag == 80) {
         parse_Maxconntions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxconntions_)));
          set_has_maxconntions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.SerivceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.SerivceInfo)
  return false;
#undef DO_
}

void SerivceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.SerivceInfo)
  // optional uint32 SerivceID = 1;
  if (has_serivceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serivceid(), output);
  }

  // optional string SerivceName = 2;
  if (has_serivcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcename().data(), this->serivcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serivcename(), output);
  }

  // optional string SerivceFun = 3;
  if (has_serivcefun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcefun().data(), this->serivcefun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceFun");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serivcefun(), output);
  }

  // optional string SerivceIP = 4;
  if (has_serivceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivceip().data(), this->serivceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serivceip(), output);
  }

  // optional uint32 SerivcePort = 5;
  if (has_serivceport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serivceport(), output);
  }

  // optional uint32 SerivceRemoteid = 6;
  if (has_serivceremoteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serivceremoteid(), output);
  }

  // optional string SerivceUser = 7;
  if (has_serivceuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivceuser().data(), this->serivceuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceUser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serivceuser(), output);
  }

  // optional string SerivcePasswd = 8;
  if (has_serivcepasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcepasswd().data(), this->serivcepasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivcePasswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->serivcepasswd(), output);
  }

  // optional string SerivceValue = 9;
  if (has_serivcevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcevalue().data(), this->serivcevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->serivcevalue(), output);
  }

  // optional uint32 Maxconntions = 10;
  if (has_maxconntions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxconntions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.SerivceInfo)
}

::google::protobuf::uint8* SerivceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.SerivceInfo)
  // optional uint32 SerivceID = 1;
  if (has_serivceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serivceid(), target);
  }

  // optional string SerivceName = 2;
  if (has_serivcename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcename().data(), this->serivcename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serivcename(), target);
  }

  // optional string SerivceFun = 3;
  if (has_serivcefun()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcefun().data(), this->serivcefun().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceFun");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serivcefun(), target);
  }

  // optional string SerivceIP = 4;
  if (has_serivceip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivceip().data(), this->serivceip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serivceip(), target);
  }

  // optional uint32 SerivcePort = 5;
  if (has_serivceport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serivceport(), target);
  }

  // optional uint32 SerivceRemoteid = 6;
  if (has_serivceremoteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serivceremoteid(), target);
  }

  // optional string SerivceUser = 7;
  if (has_serivceuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivceuser().data(), this->serivceuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceUser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serivceuser(), target);
  }

  // optional string SerivcePasswd = 8;
  if (has_serivcepasswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcepasswd().data(), this->serivcepasswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivcePasswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->serivcepasswd(), target);
  }

  // optional string SerivceValue = 9;
  if (has_serivcevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serivcevalue().data(), this->serivcevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.SerivceInfo.SerivceValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->serivcevalue(), target);
  }

  // optional uint32 Maxconntions = 10;
  if (has_maxconntions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxconntions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.SerivceInfo)
  return target;
}

int SerivceInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:config.SerivceInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 SerivceID = 1;
    if (has_serivceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serivceid());
    }

    // optional string SerivceName = 2;
    if (has_serivcename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivcename());
    }

    // optional string SerivceFun = 3;
    if (has_serivcefun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivcefun());
    }

    // optional string SerivceIP = 4;
    if (has_serivceip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivceip());
    }

    // optional uint32 SerivcePort = 5;
    if (has_serivceport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serivceport());
    }

    // optional uint32 SerivceRemoteid = 6;
    if (has_serivceremoteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serivceremoteid());
    }

    // optional string SerivceUser = 7;
    if (has_serivceuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivceuser());
    }

    // optional string SerivcePasswd = 8;
    if (has_serivcepasswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivcepasswd());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string SerivceValue = 9;
    if (has_serivcevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serivcevalue());
    }

    // optional uint32 Maxconntions = 10;
    if (has_maxconntions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxconntions());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerivceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.SerivceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerivceInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerivceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.SerivceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.SerivceInfo)
    MergeFrom(*source);
  }
}

void SerivceInfo::MergeFrom(const SerivceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.SerivceInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serivceid()) {
      set_serivceid(from.serivceid());
    }
    if (from.has_serivcename()) {
      set_has_serivcename();
      serivcename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivcename_);
    }
    if (from.has_serivcefun()) {
      set_has_serivcefun();
      serivcefun_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivcefun_);
    }
    if (from.has_serivceip()) {
      set_has_serivceip();
      serivceip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivceip_);
    }
    if (from.has_serivceport()) {
      set_serivceport(from.serivceport());
    }
    if (from.has_serivceremoteid()) {
      set_serivceremoteid(from.serivceremoteid());
    }
    if (from.has_serivceuser()) {
      set_has_serivceuser();
      serivceuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivceuser_);
    }
    if (from.has_serivcepasswd()) {
      set_has_serivcepasswd();
      serivcepasswd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivcepasswd_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serivcevalue()) {
      set_has_serivcevalue();
      serivcevalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serivcevalue_);
    }
    if (from.has_maxconntions()) {
      set_maxconntions(from.maxconntions());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SerivceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.SerivceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerivceInfo::CopyFrom(const SerivceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.SerivceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerivceInfo::IsInitialized() const {

  return true;
}

void SerivceInfo::Swap(SerivceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerivceInfo::InternalSwap(SerivceInfo* other) {
  std::swap(serivceid_, other->serivceid_);
  serivcename_.Swap(&other->serivcename_);
  serivcefun_.Swap(&other->serivcefun_);
  serivceip_.Swap(&other->serivceip_);
  std::swap(serivceport_, other->serivceport_);
  std::swap(serivceremoteid_, other->serivceremoteid_);
  serivceuser_.Swap(&other->serivceuser_);
  serivcepasswd_.Swap(&other->serivcepasswd_);
  serivcevalue_.Swap(&other->serivcevalue_);
  std::swap(maxconntions_, other->maxconntions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerivceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerivceInfo_descriptor_;
  metadata.reflection = SerivceInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerivceInfo

// optional uint32 SerivceID = 1;
bool SerivceInfo::has_serivceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SerivceInfo::set_has_serivceid() {
  _has_bits_[0] |= 0x00000001u;
}
void SerivceInfo::clear_has_serivceid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SerivceInfo::clear_serivceid() {
  serivceid_ = 0u;
  clear_has_serivceid();
}
 ::google::protobuf::uint32 SerivceInfo::serivceid() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceID)
  return serivceid_;
}
 void SerivceInfo::set_serivceid(::google::protobuf::uint32 value) {
  set_has_serivceid();
  serivceid_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceID)
}

// optional string SerivceName = 2;
bool SerivceInfo::has_serivcename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SerivceInfo::set_has_serivcename() {
  _has_bits_[0] |= 0x00000002u;
}
void SerivceInfo::clear_has_serivcename() {
  _has_bits_[0] &= ~0x00000002u;
}
void SerivceInfo::clear_serivcename() {
  serivcename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcename();
}
 const ::std::string& SerivceInfo::serivcename() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceName)
  return serivcename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivcename(const ::std::string& value) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceName)
}
 void SerivceInfo::set_serivcename(const char* value) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceName)
}
 void SerivceInfo::set_serivcename(const char* value, size_t size) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceName)
}
 ::std::string* SerivceInfo::mutable_serivcename() {
  set_has_serivcename();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceName)
  return serivcename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivcename() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceName)
  clear_has_serivcename();
  return serivcename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivcename(::std::string* serivcename) {
  if (serivcename != NULL) {
    set_has_serivcename();
  } else {
    clear_has_serivcename();
  }
  serivcename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcename);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceName)
}

// optional string SerivceFun = 3;
bool SerivceInfo::has_serivcefun() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SerivceInfo::set_has_serivcefun() {
  _has_bits_[0] |= 0x00000004u;
}
void SerivceInfo::clear_has_serivcefun() {
  _has_bits_[0] &= ~0x00000004u;
}
void SerivceInfo::clear_serivcefun() {
  serivcefun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcefun();
}
 const ::std::string& SerivceInfo::serivcefun() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceFun)
  return serivcefun_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivcefun(const ::std::string& value) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceFun)
}
 void SerivceInfo::set_serivcefun(const char* value) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceFun)
}
 void SerivceInfo::set_serivcefun(const char* value, size_t size) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceFun)
}
 ::std::string* SerivceInfo::mutable_serivcefun() {
  set_has_serivcefun();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceFun)
  return serivcefun_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivcefun() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceFun)
  clear_has_serivcefun();
  return serivcefun_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivcefun(::std::string* serivcefun) {
  if (serivcefun != NULL) {
    set_has_serivcefun();
  } else {
    clear_has_serivcefun();
  }
  serivcefun_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcefun);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceFun)
}

// optional string SerivceIP = 4;
bool SerivceInfo::has_serivceip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SerivceInfo::set_has_serivceip() {
  _has_bits_[0] |= 0x00000008u;
}
void SerivceInfo::clear_has_serivceip() {
  _has_bits_[0] &= ~0x00000008u;
}
void SerivceInfo::clear_serivceip() {
  serivceip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivceip();
}
 const ::std::string& SerivceInfo::serivceip() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceIP)
  return serivceip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivceip(const ::std::string& value) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceIP)
}
 void SerivceInfo::set_serivceip(const char* value) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceIP)
}
 void SerivceInfo::set_serivceip(const char* value, size_t size) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceIP)
}
 ::std::string* SerivceInfo::mutable_serivceip() {
  set_has_serivceip();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceIP)
  return serivceip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivceip() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceIP)
  clear_has_serivceip();
  return serivceip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivceip(::std::string* serivceip) {
  if (serivceip != NULL) {
    set_has_serivceip();
  } else {
    clear_has_serivceip();
  }
  serivceip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivceip);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceIP)
}

// optional uint32 SerivcePort = 5;
bool SerivceInfo::has_serivceport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SerivceInfo::set_has_serivceport() {
  _has_bits_[0] |= 0x00000010u;
}
void SerivceInfo::clear_has_serivceport() {
  _has_bits_[0] &= ~0x00000010u;
}
void SerivceInfo::clear_serivceport() {
  serivceport_ = 0u;
  clear_has_serivceport();
}
 ::google::protobuf::uint32 SerivceInfo::serivceport() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivcePort)
  return serivceport_;
}
 void SerivceInfo::set_serivceport(::google::protobuf::uint32 value) {
  set_has_serivceport();
  serivceport_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivcePort)
}

// optional uint32 SerivceRemoteid = 6;
bool SerivceInfo::has_serivceremoteid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SerivceInfo::set_has_serivceremoteid() {
  _has_bits_[0] |= 0x00000020u;
}
void SerivceInfo::clear_has_serivceremoteid() {
  _has_bits_[0] &= ~0x00000020u;
}
void SerivceInfo::clear_serivceremoteid() {
  serivceremoteid_ = 0u;
  clear_has_serivceremoteid();
}
 ::google::protobuf::uint32 SerivceInfo::serivceremoteid() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceRemoteid)
  return serivceremoteid_;
}
 void SerivceInfo::set_serivceremoteid(::google::protobuf::uint32 value) {
  set_has_serivceremoteid();
  serivceremoteid_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceRemoteid)
}

// optional string SerivceUser = 7;
bool SerivceInfo::has_serivceuser() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SerivceInfo::set_has_serivceuser() {
  _has_bits_[0] |= 0x00000040u;
}
void SerivceInfo::clear_has_serivceuser() {
  _has_bits_[0] &= ~0x00000040u;
}
void SerivceInfo::clear_serivceuser() {
  serivceuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivceuser();
}
 const ::std::string& SerivceInfo::serivceuser() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceUser)
  return serivceuser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivceuser(const ::std::string& value) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceUser)
}
 void SerivceInfo::set_serivceuser(const char* value) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceUser)
}
 void SerivceInfo::set_serivceuser(const char* value, size_t size) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceUser)
}
 ::std::string* SerivceInfo::mutable_serivceuser() {
  set_has_serivceuser();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceUser)
  return serivceuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivceuser() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceUser)
  clear_has_serivceuser();
  return serivceuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivceuser(::std::string* serivceuser) {
  if (serivceuser != NULL) {
    set_has_serivceuser();
  } else {
    clear_has_serivceuser();
  }
  serivceuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivceuser);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceUser)
}

// optional string SerivcePasswd = 8;
bool SerivceInfo::has_serivcepasswd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SerivceInfo::set_has_serivcepasswd() {
  _has_bits_[0] |= 0x00000080u;
}
void SerivceInfo::clear_has_serivcepasswd() {
  _has_bits_[0] &= ~0x00000080u;
}
void SerivceInfo::clear_serivcepasswd() {
  serivcepasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcepasswd();
}
 const ::std::string& SerivceInfo::serivcepasswd() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivcePasswd)
  return serivcepasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivcepasswd(const ::std::string& value) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivcePasswd)
}
 void SerivceInfo::set_serivcepasswd(const char* value) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivcePasswd)
}
 void SerivceInfo::set_serivcepasswd(const char* value, size_t size) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivcePasswd)
}
 ::std::string* SerivceInfo::mutable_serivcepasswd() {
  set_has_serivcepasswd();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivcePasswd)
  return serivcepasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivcepasswd() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivcePasswd)
  clear_has_serivcepasswd();
  return serivcepasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivcepasswd(::std::string* serivcepasswd) {
  if (serivcepasswd != NULL) {
    set_has_serivcepasswd();
  } else {
    clear_has_serivcepasswd();
  }
  serivcepasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcepasswd);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivcePasswd)
}

// optional string SerivceValue = 9;
bool SerivceInfo::has_serivcevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SerivceInfo::set_has_serivcevalue() {
  _has_bits_[0] |= 0x00000100u;
}
void SerivceInfo::clear_has_serivcevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
void SerivceInfo::clear_serivcevalue() {
  serivcevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcevalue();
}
 const ::std::string& SerivceInfo::serivcevalue() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceValue)
  return serivcevalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_serivcevalue(const ::std::string& value) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceValue)
}
 void SerivceInfo::set_serivcevalue(const char* value) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceValue)
}
 void SerivceInfo::set_serivcevalue(const char* value, size_t size) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceValue)
}
 ::std::string* SerivceInfo::mutable_serivcevalue() {
  set_has_serivcevalue();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceValue)
  return serivcevalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerivceInfo::release_serivcevalue() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceValue)
  clear_has_serivcevalue();
  return serivcevalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerivceInfo::set_allocated_serivcevalue(::std::string* serivcevalue) {
  if (serivcevalue != NULL) {
    set_has_serivcevalue();
  } else {
    clear_has_serivcevalue();
  }
  serivcevalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcevalue);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceValue)
}

// optional uint32 Maxconntions = 10;
bool SerivceInfo::has_maxconntions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SerivceInfo::set_has_maxconntions() {
  _has_bits_[0] |= 0x00000200u;
}
void SerivceInfo::clear_has_maxconntions() {
  _has_bits_[0] &= ~0x00000200u;
}
void SerivceInfo::clear_maxconntions() {
  maxconntions_ = 0u;
  clear_has_maxconntions();
}
 ::google::protobuf::uint32 SerivceInfo::maxconntions() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.Maxconntions)
  return maxconntions_;
}
 void SerivceInfo::set_maxconntions(::google::protobuf::uint32 value) {
  set_has_maxconntions();
  maxconntions_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.Maxconntions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)
