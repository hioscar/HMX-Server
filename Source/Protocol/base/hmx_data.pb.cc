// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmx_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hmx_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace data {

namespace {

const ::google::protobuf::Descriptor* QueryUserProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBin_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOfflineUserProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOfflineUserProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Counter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Counter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelChatProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelChatProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* WsUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryWsUserProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryWsUserProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserMaxIDProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserMaxIDProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAccountProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAccountProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountWxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountWxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBin_reflection_ = NULL;
const ::google::protobuf::Descriptor* GateUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GateUserInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hmx_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hmx_5fdata_2eproto() {
  protobuf_AddDesc_hmx_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hmx_data.proto");
  GOOGLE_CHECK(file != NULL);
  QueryUserProto_descriptor_ = file->message_type(0);
  static const int QueryUserProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserProto, user_list_),
  };
  QueryUserProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserProto_descriptor_,
      QueryUserProto::default_instance_,
      QueryUserProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUserProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserProto, _internal_metadata_),
      -1);
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, roletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, copper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, info_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      -1);
  UserBin_descriptor_ = file->message_type(2);
  static const int UserBin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBin, testid_),
  };
  UserBin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBin_descriptor_,
      UserBin::default_instance_,
      UserBin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBin, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserBin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBin, _internal_metadata_),
      -1);
  QueryOfflineUserProto_descriptor_ = file->message_type(3);
  static const int QueryOfflineUserProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOfflineUserProto, user_list_),
  };
  QueryOfflineUserProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOfflineUserProto_descriptor_,
      QueryOfflineUserProto::default_instance_,
      QueryOfflineUserProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOfflineUserProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryOfflineUserProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOfflineUserProto, _internal_metadata_),
      -1);
  OfflineUserInfo_descriptor_ = file->message_type(4);
  static const int OfflineUserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, vip_),
  };
  OfflineUserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OfflineUserInfo_descriptor_,
      OfflineUserInfo::default_instance_,
      OfflineUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(OfflineUserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineUserInfo, _internal_metadata_),
      -1);
  WorldUserInfo_descriptor_ = file->message_type(5);
  static const int WorldUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, mapid_),
  };
  WorldUserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorldUserInfo_descriptor_,
      WorldUserInfo::default_instance_,
      WorldUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(WorldUserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldUserInfo, _internal_metadata_),
      -1);
  Counter_descriptor_ = file->message_type(6);
  static const int Counter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, itemval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, endtime_),
  };
  Counter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Counter_descriptor_,
      Counter::default_instance_,
      Counter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, _has_bits_[0]),
      -1,
      -1,
      sizeof(Counter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Counter, _internal_metadata_),
      -1);
  CounterProto_descriptor_ = file->message_type(7);
  static const int CounterProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, counter_),
  };
  CounterProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CounterProto_descriptor_,
      CounterProto::default_instance_,
      CounterProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(CounterProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterProto, _internal_metadata_),
      -1);
  MsgObject_descriptor_ = file->message_type(8);
  static const int MsgObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, conent_),
  };
  MsgObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgObject_descriptor_,
      MsgObject::default_instance_,
      MsgObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObject, _internal_metadata_),
      -1);
  RelChatMsg_descriptor_ = file->message_type(9);
  static const int RelChatMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, senduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, recvuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, recvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, msgobj_),
  };
  RelChatMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelChatMsg_descriptor_,
      RelChatMsg::default_instance_,
      RelChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelChatMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatMsg, _internal_metadata_),
      -1);
  RelChatProto_descriptor_ = file->message_type(10);
  static const int RelChatProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, msglist_),
  };
  RelChatProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelChatProto_descriptor_,
      RelChatProto::default_instance_,
      RelChatProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelChatProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelChatProto, _internal_metadata_),
      -1);
  Relation_descriptor_ = file->message_type(11);
  static const int Relation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, rel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, dealreltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, relchat_),
  };
  Relation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Relation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _internal_metadata_),
      -1);
  RelationProto_descriptor_ = file->message_type(12);
  static const int RelationProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, relation_),
  };
  RelationProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelationProto_descriptor_,
      RelationProto::default_instance_,
      RelationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelationProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationProto, _internal_metadata_),
      -1);
  UserBinary_descriptor_ = file->message_type(13);
  static const int UserBinary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, relations_),
  };
  UserBinary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBinary_descriptor_,
      UserBinary::default_instance_,
      UserBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserBinary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _internal_metadata_),
      -1);
  WsUser_descriptor_ = file->message_type(14);
  static const int WsUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, level_),
  };
  WsUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WsUser_descriptor_,
      WsUser::default_instance_,
      WsUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(WsUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _internal_metadata_),
      -1);
  QueryWsUserProto_descriptor_ = file->message_type(15);
  static const int QueryWsUserProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWsUserProto, user_list_),
  };
  QueryWsUserProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryWsUserProto_descriptor_,
      QueryWsUserProto::default_instance_,
      QueryWsUserProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWsUserProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryWsUserProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryWsUserProto, _internal_metadata_),
      -1);
  QueryUserMaxIDProto_descriptor_ = file->message_type(16);
  static const int QueryUserMaxIDProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserMaxIDProto, id_),
  };
  QueryUserMaxIDProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserMaxIDProto_descriptor_,
      QueryUserMaxIDProto::default_instance_,
      QueryUserMaxIDProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserMaxIDProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUserMaxIDProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserMaxIDProto, _internal_metadata_),
      -1);
  QueryUserDataProto_descriptor_ = file->message_type(17);
  static const int QueryUserDataProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserDataProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserDataProto, user_),
  };
  QueryUserDataProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserDataProto_descriptor_,
      QueryUserDataProto::default_instance_,
      QueryUserDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserDataProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryUserDataProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserDataProto, _internal_metadata_),
      -1);
  QueryAccountProto_descriptor_ = file->message_type(18);
  static const int QueryAccountProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAccountProto, account_list_),
  };
  QueryAccountProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryAccountProto_descriptor_,
      QueryAccountProto::default_instance_,
      QueryAccountProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAccountProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(QueryAccountProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAccountProto, _internal_metadata_),
      -1);
  AccountWxInfo_descriptor_ = file->message_type(19);
  static const int AccountWxInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, wxtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, ip_),
  };
  AccountWxInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccountWxInfo_descriptor_,
      AccountWxInfo::default_instance_,
      AccountWxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AccountWxInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountWxInfo, _internal_metadata_),
      -1);
  AccountBin_descriptor_ = file->message_type(20);
  static const int AccountBin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBin, test_),
  };
  AccountBin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccountBin_descriptor_,
      AccountBin::default_instance_,
      AccountBin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBin, _has_bits_[0]),
      -1,
      -1,
      sizeof(AccountBin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBin, _internal_metadata_),
      -1);
  GateUserInfo_descriptor_ = file->message_type(21);
  static const int GateUserInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, fepserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, ssservierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, teamid_),
  };
  GateUserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GateUserInfo_descriptor_,
      GateUserInfo::default_instance_,
      GateUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GateUserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GateUserInfo, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hmx_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserProto_descriptor_, &QueryUserProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBin_descriptor_, &UserBin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOfflineUserProto_descriptor_, &QueryOfflineUserProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OfflineUserInfo_descriptor_, &OfflineUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorldUserInfo_descriptor_, &WorldUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Counter_descriptor_, &Counter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CounterProto_descriptor_, &CounterProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgObject_descriptor_, &MsgObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelChatMsg_descriptor_, &RelChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelChatProto_descriptor_, &RelChatProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelationProto_descriptor_, &RelationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBinary_descriptor_, &UserBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WsUser_descriptor_, &WsUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryWsUserProto_descriptor_, &QueryWsUserProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserMaxIDProto_descriptor_, &QueryUserMaxIDProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserDataProto_descriptor_, &QueryUserDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryAccountProto_descriptor_, &QueryAccountProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccountWxInfo_descriptor_, &AccountWxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccountBin_descriptor_, &AccountBin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GateUserInfo_descriptor_, &GateUserInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hmx_5fdata_2eproto() {
  delete QueryUserProto::default_instance_;
  delete QueryUserProto_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserBin::default_instance_;
  delete UserBin_reflection_;
  delete QueryOfflineUserProto::default_instance_;
  delete QueryOfflineUserProto_reflection_;
  delete OfflineUserInfo::default_instance_;
  delete OfflineUserInfo_reflection_;
  delete WorldUserInfo::default_instance_;
  delete WorldUserInfo_reflection_;
  delete Counter::default_instance_;
  delete Counter_reflection_;
  delete CounterProto::default_instance_;
  delete CounterProto_reflection_;
  delete MsgObject::default_instance_;
  delete MsgObject_reflection_;
  delete RelChatMsg::default_instance_;
  delete RelChatMsg_reflection_;
  delete RelChatProto::default_instance_;
  delete RelChatProto_reflection_;
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete RelationProto::default_instance_;
  delete RelationProto_reflection_;
  delete UserBinary::default_instance_;
  delete UserBinary_reflection_;
  delete WsUser::default_instance_;
  delete WsUser_reflection_;
  delete QueryWsUserProto::default_instance_;
  delete QueryWsUserProto_reflection_;
  delete QueryUserMaxIDProto::default_instance_;
  delete QueryUserMaxIDProto_reflection_;
  delete QueryUserDataProto::default_instance_;
  delete QueryUserDataProto_reflection_;
  delete QueryAccountProto::default_instance_;
  delete QueryAccountProto_reflection_;
  delete AccountWxInfo::default_instance_;
  delete AccountWxInfo_reflection_;
  delete AccountBin::default_instance_;
  delete AccountBin_reflection_;
  delete GateUserInfo::default_instance_;
  delete GateUserInfo_reflection_;
}

void protobuf_AddDesc_hmx_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_hmx_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016hmx_data.proto\022\004data\"3\n\016QueryUserProto"
    "\022!\n\tuser_list\030\001 \003(\0132\016.data.UserInfo\"\271\002\n\010"
    "UserInfo\022\n\n\002ID\030\001 \001(\004\022\r\n\005ACCID\030\002 \001(\004\022\014\n\004N"
    "AME\030\003 \001(\t\022\r\n\005LEVEL\030\004 \001(\r\022\013\n\003VIP\030\005 \001(\r\022\016\n"
    "\006STATUS\030\006 \001(\r\022\017\n\007SCENEID\030\007 \001(\004\022\r\n\005MAPID\030"
    "\010 \001(\r\022\020\n\010ROLETYPE\030\t \001(\r\022\013\n\003EXP\030\n \001(\r\022\014\n\004"
    "POSX\030\013 \001(\005\022\014\n\004POSY\030\014 \001(\005\022\014\n\004GOLD\030\r \001(\005\022\016"
    "\n\006SILVER\030\016 \001(\005\022\016\n\006COPPER\030\017 \001(\005\022\021\n\tLASTLO"
    "GIN\030\020 \001(\r\022\017\n\007COUNTRY\030\021 \001(\r\022\016\n\006TEAMID\030\022 \001"
    "(\r\022\033\n\004INFO\030\023 \001(\0132\r.data.UserBin\"\031\n\007UserB"
    "in\022\016\n\006testID\030\001 \001(\005\"A\n\025QueryOfflineUserPr"
    "oto\022(\n\tuser_list\030\001 \003(\0132\025.data.OfflineUse"
    "rInfo\"V\n\017OfflineUserInfo\022\n\n\002ID\030\001 \001(\004\022\r\n\005"
    "ACCID\030\002 \001(\004\022\014\n\004NAME\030\003 \001(\t\022\r\n\005LEVEL\030\004 \001(\r"
    "\022\013\n\003VIP\030\005 \001(\r\"g\n\rWorldUserInfo\022\n\n\002ID\030\001 \001"
    "(\004\022\r\n\005ACCID\030\002 \001(\004\022\014\n\004NAME\030\003 \001(\t\022\r\n\005LEVEL"
    "\030\004 \001(\r\022\017\n\007SCENEID\030\005 \001(\r\022\r\n\005MAPID\030\006 \001(\r\"N"
    "\n\007Counter\022\016\n\006itemid\030\001 \001(\005\022\017\n\007itemval\030\002 \001"
    "(\005\022\021\n\tstarttime\030\003 \001(\005\022\017\n\007endtime\030\004 \001(\005\"."
    "\n\014CounterProto\022\036\n\007counter\030\001 \003(\0132\r.data.C"
    "ounter\"\033\n\tMsgObject\022\016\n\006conent\030\001 \001(\t\"\224\001\n\n"
    "RelChatMsg\022\r\n\005msgid\030\001 \001(\003\022\017\n\007senduid\030\002 \001"
    "(\003\022\020\n\010sendname\030\003 \001(\t\022\017\n\007recvuid\030\004 \001(\003\022\020\n"
    "\010recvname\030\005 \001(\t\022\020\n\010sendtime\030\006 \001(\005\022\037\n\006msg"
    "obj\030\007 \001(\0132\017.data.MsgObject\"1\n\014RelChatPro"
    "to\022!\n\007msglist\030\001 \003(\0132\020.data.RelChatMsg\"\200\001"
    "\n\010Relation\022\013\n\003uid\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\013\n"
    "\003rel\030\003 \001(\005\022\022\n\ncreatetime\030\004 \001(\005\022\023\n\013dealre"
    "ltime\030\005 \001(\005\022#\n\007relchat\030\006 \001(\0132\022.data.RelC"
    "hatProto\"1\n\rRelationProto\022 \n\010relation\030\001 "
    "\003(\0132\016.data.Relation\"Z\n\nUserBinary\022$\n\010cou"
    "nters\030\001 \001(\0132\022.data.CounterProto\022&\n\trelat"
    "ions\030\003 \001(\0132\023.data.RelationProto\"X\n\006WsUse"
    "r\022\017\n\007char_id\030\001 \001(\003\022\022\n\naccount_id\030\002 \001(\003\022\014"
    "\n\004name\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\022\r\n\005level\030\005 \001("
    "\005\":\n\020QueryWsUserProto\022&\n\tuser_list\030\001 \003(\013"
    "2\023.data.WorldUserInfo\"!\n\023QueryUserMaxIDP"
    "roto\022\n\n\002ID\030\001 \001(\004\">\n\022QueryUserDataProto\022\n"
    "\n\002ID\030\001 \001(\004\022\034\n\004user\030\002 \001(\0132\016.data.UserInfo"
    "\">\n\021QueryAccountProto\022)\n\014account_list\030\003 "
    "\003(\0132\023.data.AccountWxInfo\"\261\001\n\rAccountWxIn"
    "fo\022\016\n\006openid\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\013\n\003"
    "sex\030\003 \001(\005\022\020\n\010province\030\004 \001(\t\022\014\n\004city\030\005 \001("
    "\t\022\017\n\007country\030\006 \001(\t\022\022\n\nheadimgurl\030\007 \001(\t\022\017"
    "\n\007unionid\030\010 \001(\t\022\017\n\007wxtoken\030\t \001(\t\022\n\n\002ip\030\n"
    " \001(\t\"\032\n\nAccountBin\022\014\n\004Test\030\001 \001(\r\"\310\001\n\014Gat"
    "eUserInfo\022\n\n\002ID\030\001 \001(\004\022\023\n\013fepserverid\030\002 \001"
    "(\r\022\023\n\013ssservierid\030\003 \001(\r\022\021\n\tsessionid\030\004 \001"
    "(\004\022\021\n\tcountryid\030\005 \001(\r\022\r\n\005mapid\030\006 \001(\r\022\017\n\007"
    "sceneid\030\007 \001(\r\022\016\n\006zoneid\030\010 \001(\r\022\r\n\005pos_x\030\t"
    " \001(\r\022\r\n\005pos_y\030\n \001(\r\022\016\n\006teamid\030\013 \001(\r", 2035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmx_data.proto", &protobuf_RegisterTypes);
  QueryUserProto::default_instance_ = new QueryUserProto();
  UserInfo::default_instance_ = new UserInfo();
  UserBin::default_instance_ = new UserBin();
  QueryOfflineUserProto::default_instance_ = new QueryOfflineUserProto();
  OfflineUserInfo::default_instance_ = new OfflineUserInfo();
  WorldUserInfo::default_instance_ = new WorldUserInfo();
  Counter::default_instance_ = new Counter();
  CounterProto::default_instance_ = new CounterProto();
  MsgObject::default_instance_ = new MsgObject();
  RelChatMsg::default_instance_ = new RelChatMsg();
  RelChatProto::default_instance_ = new RelChatProto();
  Relation::default_instance_ = new Relation();
  RelationProto::default_instance_ = new RelationProto();
  UserBinary::default_instance_ = new UserBinary();
  WsUser::default_instance_ = new WsUser();
  QueryWsUserProto::default_instance_ = new QueryWsUserProto();
  QueryUserMaxIDProto::default_instance_ = new QueryUserMaxIDProto();
  QueryUserDataProto::default_instance_ = new QueryUserDataProto();
  QueryAccountProto::default_instance_ = new QueryAccountProto();
  AccountWxInfo::default_instance_ = new AccountWxInfo();
  AccountBin::default_instance_ = new AccountBin();
  GateUserInfo::default_instance_ = new GateUserInfo();
  QueryUserProto::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserBin::default_instance_->InitAsDefaultInstance();
  QueryOfflineUserProto::default_instance_->InitAsDefaultInstance();
  OfflineUserInfo::default_instance_->InitAsDefaultInstance();
  WorldUserInfo::default_instance_->InitAsDefaultInstance();
  Counter::default_instance_->InitAsDefaultInstance();
  CounterProto::default_instance_->InitAsDefaultInstance();
  MsgObject::default_instance_->InitAsDefaultInstance();
  RelChatMsg::default_instance_->InitAsDefaultInstance();
  RelChatProto::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  RelationProto::default_instance_->InitAsDefaultInstance();
  UserBinary::default_instance_->InitAsDefaultInstance();
  WsUser::default_instance_->InitAsDefaultInstance();
  QueryWsUserProto::default_instance_->InitAsDefaultInstance();
  QueryUserMaxIDProto::default_instance_->InitAsDefaultInstance();
  QueryUserDataProto::default_instance_->InitAsDefaultInstance();
  QueryAccountProto::default_instance_->InitAsDefaultInstance();
  AccountWxInfo::default_instance_->InitAsDefaultInstance();
  AccountBin::default_instance_->InitAsDefaultInstance();
  GateUserInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hmx_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hmx_5fdata_2eproto {
  StaticDescriptorInitializer_hmx_5fdata_2eproto() {
    protobuf_AddDesc_hmx_5fdata_2eproto();
  }
} static_descriptor_initializer_hmx_5fdata_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserProto::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserProto::QueryUserProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryUserProto)
}

void QueryUserProto::InitAsDefaultInstance() {
}

QueryUserProto::QueryUserProto(const QueryUserProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryUserProto)
}

void QueryUserProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserProto::~QueryUserProto() {
  // @@protoc_insertion_point(destructor:data.QueryUserProto)
  SharedDtor();
}

void QueryUserProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserProto_descriptor_;
}

const QueryUserProto& QueryUserProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryUserProto* QueryUserProto::default_instance_ = NULL;

QueryUserProto* QueryUserProto::New(::google::protobuf::Arena* arena) const {
  QueryUserProto* n = new QueryUserProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryUserProto)
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUserProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryUserProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.UserInfo user_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryUserProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryUserProto)
  return false;
#undef DO_
}

void QueryUserProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryUserProto)
  // repeated .data.UserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryUserProto)
}

::google::protobuf::uint8* QueryUserProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryUserProto)
  // repeated .data.UserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryUserProto)
  return target;
}

int QueryUserProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryUserProto)
  int total_size = 0;

  // repeated .data.UserInfo user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUserProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryUserProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryUserProto)
    MergeFrom(*source);
  }
}

void QueryUserProto::MergeFrom(const QueryUserProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_list_.MergeFrom(from.user_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUserProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserProto::CopyFrom(const QueryUserProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserProto::IsInitialized() const {

  return true;
}

void QueryUserProto::Swap(QueryUserProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserProto::InternalSwap(QueryUserProto* other) {
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserProto_descriptor_;
  metadata.reflection = QueryUserProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserProto

// repeated .data.UserInfo user_list = 1;
int QueryUserProto::user_list_size() const {
  return user_list_.size();
}
void QueryUserProto::clear_user_list() {
  user_list_.Clear();
}
const ::data::UserInfo& QueryUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryUserProto.user_list)
  return user_list_.Get(index);
}
::data::UserInfo* QueryUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryUserProto.user_list)
  return user_list_.Mutable(index);
}
::data::UserInfo* QueryUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryUserProto.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::UserInfo >*
QueryUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryUserProto.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::data::UserInfo >&
QueryUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryUserProto.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kIDFieldNumber;
const int UserInfo::kACCIDFieldNumber;
const int UserInfo::kNAMEFieldNumber;
const int UserInfo::kLEVELFieldNumber;
const int UserInfo::kVIPFieldNumber;
const int UserInfo::kSTATUSFieldNumber;
const int UserInfo::kSCENEIDFieldNumber;
const int UserInfo::kMAPIDFieldNumber;
const int UserInfo::kROLETYPEFieldNumber;
const int UserInfo::kEXPFieldNumber;
const int UserInfo::kPOSXFieldNumber;
const int UserInfo::kPOSYFieldNumber;
const int UserInfo::kGOLDFieldNumber;
const int UserInfo::kSILVERFieldNumber;
const int UserInfo::kCOPPERFieldNumber;
const int UserInfo::kLASTLOGINFieldNumber;
const int UserInfo::kCOUNTRYFieldNumber;
const int UserInfo::kTEAMIDFieldNumber;
const int UserInfo::kINFOFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::data::UserBin*>(&::data::UserBin::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  vip_ = 0u;
  status_ = 0u;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  roletype_ = 0u;
  exp_ = 0u;
  posx_ = 0;
  posy_ = 0;
  gold_ = 0;
  silver_ = 0;
  copper_ = 0;
  lastlogin_ = 0u;
  country_ = 0u;
  teamid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:data.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete info_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data.UserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, accid_);
    ZR_(level_, mapid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(roletype_, lastlogin_);
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ZR_(country_, teamid_);
    if (has_info()) {
      if (info_ != NULL) info_->::data::UserBin::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ACCID;
        break;
      }

      // optional uint64 ACCID = 2;
      case 2: {
        if (tag == 16) {
         parse_ACCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NAME;
        break;
      }

      // optional string NAME = 3;
      case 3: {
        if (tag == 26) {
         parse_NAME:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.UserInfo.NAME");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LEVEL;
        break;
      }

      // optional uint32 LEVEL = 4;
      case 4: {
        if (tag == 32) {
         parse_LEVEL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_VIP;
        break;
      }

      // optional uint32 VIP = 5;
      case 5: {
        if (tag == 40) {
         parse_VIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_STATUS;
        break;
      }

      // optional uint32 STATUS = 6;
      case 6: {
        if (tag == 48) {
         parse_STATUS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SCENEID;
        break;
      }

      // optional uint64 SCENEID = 7;
      case 7: {
        if (tag == 56) {
         parse_SCENEID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MAPID;
        break;
      }

      // optional uint32 MAPID = 8;
      case 8: {
        if (tag == 64) {
         parse_MAPID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ROLETYPE;
        break;
      }

      // optional uint32 ROLETYPE = 9;
      case 9: {
        if (tag == 72) {
         parse_ROLETYPE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_EXP;
        break;
      }

      // optional uint32 EXP = 10;
      case 10: {
        if (tag == 80) {
         parse_EXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_POSX;
        break;
      }

      // optional int32 POSX = 11;
      case 11: {
        if (tag == 88) {
         parse_POSX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_POSY;
        break;
      }

      // optional int32 POSY = 12;
      case 12: {
        if (tag == 96) {
         parse_POSY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_GOLD;
        break;
      }

      // optional int32 GOLD = 13;
      case 13: {
        if (tag == 104) {
         parse_GOLD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_SILVER;
        break;
      }

      // optional int32 SILVER = 14;
      case 14: {
        if (tag == 112) {
         parse_SILVER:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_COPPER;
        break;
      }

      // optional int32 COPPER = 15;
      case 15: {
        if (tag == 120) {
         parse_COPPER:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copper_)));
          set_has_copper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_LASTLOGIN;
        break;
      }

      // optional uint32 LASTLOGIN = 16;
      case 16: {
        if (tag == 128) {
         parse_LASTLOGIN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogin_)));
          set_has_lastlogin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_COUNTRY;
        break;
      }

      // optional uint32 COUNTRY = 17;
      case 17: {
        if (tag == 136) {
         parse_COUNTRY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_TEAMID;
        break;
      }

      // optional uint32 TEAMID = 18;
      case 18: {
        if (tag == 144) {
         parse_TEAMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_INFO;
        break;
      }

      // optional .data.UserBin INFO = 19;
      case 19: {
        if (tag == 154) {
         parse_INFO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.UserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.UserInfo.NAME");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 VIP = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // optional uint32 STATUS = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  // optional uint64 SCENEID = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sceneid(), output);
  }

  // optional uint32 MAPID = 8;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mapid(), output);
  }

  // optional uint32 ROLETYPE = 9;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->roletype(), output);
  }

  // optional uint32 EXP = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->exp(), output);
  }

  // optional int32 POSX = 11;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->posx(), output);
  }

  // optional int32 POSY = 12;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->posy(), output);
  }

  // optional int32 GOLD = 13;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gold(), output);
  }

  // optional int32 SILVER = 14;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->silver(), output);
  }

  // optional int32 COPPER = 15;
  if (has_copper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->copper(), output);
  }

  // optional uint32 LASTLOGIN = 16;
  if (has_lastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lastlogin(), output);
  }

  // optional uint32 COUNTRY = 17;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->country(), output);
  }

  // optional uint32 TEAMID = 18;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->teamid(), output);
  }

  // optional .data.UserBin INFO = 19;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.UserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.UserInfo.NAME");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 VIP = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // optional uint32 STATUS = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  // optional uint64 SCENEID = 7;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sceneid(), target);
  }

  // optional uint32 MAPID = 8;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mapid(), target);
  }

  // optional uint32 ROLETYPE = 9;
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->roletype(), target);
  }

  // optional uint32 EXP = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->exp(), target);
  }

  // optional int32 POSX = 11;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->posx(), target);
  }

  // optional int32 POSY = 12;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->posy(), target);
  }

  // optional int32 GOLD = 13;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gold(), target);
  }

  // optional int32 SILVER = 14;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->silver(), target);
  }

  // optional int32 COPPER = 15;
  if (has_copper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->copper(), target);
  }

  // optional uint32 LASTLOGIN = 16;
  if (has_lastlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lastlogin(), target);
  }

  // optional uint32 COUNTRY = 17;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->country(), target);
  }

  // optional uint32 TEAMID = 18;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->teamid(), target);
  }

  // optional .data.UserBin INFO = 19;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->info_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.UserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 ACCID = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string NAME = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 LEVEL = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 VIP = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 STATUS = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 SCENEID = 7;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint32 MAPID = 8;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 ROLETYPE = 9;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roletype());
    }

    // optional uint32 EXP = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional int32 POSX = 11;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 POSY = 12;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 GOLD = 13;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 SILVER = 14;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }

    // optional int32 COPPER = 15;
    if (has_copper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copper());
    }

    // optional uint32 LASTLOGIN = 16;
    if (has_lastlogin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogin());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 COUNTRY = 17;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->country());
    }

    // optional uint32 TEAMID = 18;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .data.UserBin INFO = 19;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_copper()) {
      set_copper(from.copper());
    }
    if (from.has_lastlogin()) {
      set_lastlogin(from.lastlogin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_info()) {
      mutable_info()->::data::UserBin::MergeFrom(from.info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(id_, other->id_);
  std::swap(accid_, other->accid_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(vip_, other->vip_);
  std::swap(status_, other->status_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(mapid_, other->mapid_);
  std::swap(roletype_, other->roletype_);
  std::swap(exp_, other->exp_);
  std::swap(posx_, other->posx_);
  std::swap(posy_, other->posy_);
  std::swap(gold_, other->gold_);
  std::swap(silver_, other->silver_);
  std::swap(copper_, other->copper_);
  std::swap(lastlogin_, other->lastlogin_);
  std::swap(country_, other->country_);
  std::swap(teamid_, other->teamid_);
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional uint64 ID = 1;
bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ID)
  return id_;
}
 void UserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ID)
}

// optional uint64 ACCID = 2;
bool UserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
void UserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
 ::google::protobuf::uint64 UserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ACCID)
  return accid_;
}
 void UserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ACCID)
}

// optional string NAME = 3;
bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.UserInfo.NAME)
}
 void UserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.UserInfo.NAME)
}
 void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.UserInfo.NAME)
}
 ::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.UserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.UserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.UserInfo.NAME)
}

// optional uint32 LEVEL = 4;
bool UserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void UserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void UserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 UserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.LEVEL)
  return level_;
}
 void UserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.LEVEL)
}

// optional uint32 VIP = 5;
bool UserInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UserInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
void UserInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
void UserInfo::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
 ::google::protobuf::uint32 UserInfo::vip() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.VIP)
  return vip_;
}
 void UserInfo::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.VIP)
}

// optional uint32 STATUS = 6;
bool UserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void UserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void UserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
 ::google::protobuf::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.STATUS)
  return status_;
}
 void UserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.STATUS)
}

// optional uint64 SCENEID = 7;
bool UserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
void UserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
void UserInfo::clear_sceneid() {
  sceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_sceneid();
}
 ::google::protobuf::uint64 UserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.SCENEID)
  return sceneid_;
}
 void UserInfo::set_sceneid(::google::protobuf::uint64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.SCENEID)
}

// optional uint32 MAPID = 8;
bool UserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000080u;
}
void UserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000080u;
}
void UserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
 ::google::protobuf::uint32 UserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.MAPID)
  return mapid_;
}
 void UserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.MAPID)
}

// optional uint32 ROLETYPE = 9;
bool UserInfo::has_roletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UserInfo::set_has_roletype() {
  _has_bits_[0] |= 0x00000100u;
}
void UserInfo::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000100u;
}
void UserInfo::clear_roletype() {
  roletype_ = 0u;
  clear_has_roletype();
}
 ::google::protobuf::uint32 UserInfo::roletype() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ROLETYPE)
  return roletype_;
}
 void UserInfo::set_roletype(::google::protobuf::uint32 value) {
  set_has_roletype();
  roletype_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ROLETYPE)
}

// optional uint32 EXP = 10;
bool UserInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UserInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
void UserInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
void UserInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
 ::google::protobuf::uint32 UserInfo::exp() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.EXP)
  return exp_;
}
 void UserInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.EXP)
}

// optional int32 POSX = 11;
bool UserInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UserInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000400u;
}
void UserInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000400u;
}
void UserInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
 ::google::protobuf::int32 UserInfo::posx() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.POSX)
  return posx_;
}
 void UserInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.POSX)
}

// optional int32 POSY = 12;
bool UserInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UserInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000800u;
}
void UserInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000800u;
}
void UserInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
 ::google::protobuf::int32 UserInfo::posy() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.POSY)
  return posy_;
}
 void UserInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.POSY)
}

// optional int32 GOLD = 13;
bool UserInfo::has_gold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UserInfo::set_has_gold() {
  _has_bits_[0] |= 0x00001000u;
}
void UserInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00001000u;
}
void UserInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
 ::google::protobuf::int32 UserInfo::gold() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.GOLD)
  return gold_;
}
 void UserInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.GOLD)
}

// optional int32 SILVER = 14;
bool UserInfo::has_silver() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void UserInfo::set_has_silver() {
  _has_bits_[0] |= 0x00002000u;
}
void UserInfo::clear_has_silver() {
  _has_bits_[0] &= ~0x00002000u;
}
void UserInfo::clear_silver() {
  silver_ = 0;
  clear_has_silver();
}
 ::google::protobuf::int32 UserInfo::silver() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.SILVER)
  return silver_;
}
 void UserInfo::set_silver(::google::protobuf::int32 value) {
  set_has_silver();
  silver_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.SILVER)
}

// optional int32 COPPER = 15;
bool UserInfo::has_copper() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UserInfo::set_has_copper() {
  _has_bits_[0] |= 0x00004000u;
}
void UserInfo::clear_has_copper() {
  _has_bits_[0] &= ~0x00004000u;
}
void UserInfo::clear_copper() {
  copper_ = 0;
  clear_has_copper();
}
 ::google::protobuf::int32 UserInfo::copper() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.COPPER)
  return copper_;
}
 void UserInfo::set_copper(::google::protobuf::int32 value) {
  set_has_copper();
  copper_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.COPPER)
}

// optional uint32 LASTLOGIN = 16;
bool UserInfo::has_lastlogin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UserInfo::set_has_lastlogin() {
  _has_bits_[0] |= 0x00008000u;
}
void UserInfo::clear_has_lastlogin() {
  _has_bits_[0] &= ~0x00008000u;
}
void UserInfo::clear_lastlogin() {
  lastlogin_ = 0u;
  clear_has_lastlogin();
}
 ::google::protobuf::uint32 UserInfo::lastlogin() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.LASTLOGIN)
  return lastlogin_;
}
 void UserInfo::set_lastlogin(::google::protobuf::uint32 value) {
  set_has_lastlogin();
  lastlogin_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.LASTLOGIN)
}

// optional uint32 COUNTRY = 17;
bool UserInfo::has_country() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UserInfo::set_has_country() {
  _has_bits_[0] |= 0x00010000u;
}
void UserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00010000u;
}
void UserInfo::clear_country() {
  country_ = 0u;
  clear_has_country();
}
 ::google::protobuf::uint32 UserInfo::country() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.COUNTRY)
  return country_;
}
 void UserInfo::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.COUNTRY)
}

// optional uint32 TEAMID = 18;
bool UserInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void UserInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00020000u;
}
void UserInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00020000u;
}
void UserInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
 ::google::protobuf::uint32 UserInfo::teamid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.TEAMID)
  return teamid_;
}
 void UserInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.TEAMID)
}

// optional .data.UserBin INFO = 19;
bool UserInfo::has_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UserInfo::set_has_info() {
  _has_bits_[0] |= 0x00040000u;
}
void UserInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00040000u;
}
void UserInfo::clear_info() {
  if (info_ != NULL) info_->::data::UserBin::Clear();
  clear_has_info();
}
const ::data::UserBin& UserInfo::info() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.INFO)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::data::UserBin* UserInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::data::UserBin;
  }
  // @@protoc_insertion_point(field_mutable:data.UserInfo.INFO)
  return info_;
}
::data::UserBin* UserInfo::release_info() {
  // @@protoc_insertion_point(field_release:data.UserInfo.INFO)
  clear_has_info();
  ::data::UserBin* temp = info_;
  info_ = NULL;
  return temp;
}
void UserInfo::set_allocated_info(::data::UserBin* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserInfo.INFO)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBin::kTestIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBin::UserBin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.UserBin)
}

void UserBin::InitAsDefaultInstance() {
}

UserBin::UserBin(const UserBin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.UserBin)
}

void UserBin::SharedCtor() {
  _cached_size_ = 0;
  testid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBin::~UserBin() {
  // @@protoc_insertion_point(destructor:data.UserBin)
  SharedDtor();
}

void UserBin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBin_descriptor_;
}

const UserBin& UserBin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

UserBin* UserBin::default_instance_ = NULL;

UserBin* UserBin::New(::google::protobuf::Arena* arena) const {
  UserBin* n = new UserBin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBin::Clear() {
// @@protoc_insertion_point(message_clear_start:data.UserBin)
  testid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserBin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.UserBin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 testID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testid_)));
          set_has_testid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.UserBin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.UserBin)
  return false;
#undef DO_
}

void UserBin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.UserBin)
  // optional int32 testID = 1;
  if (has_testid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->testid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.UserBin)
}

::google::protobuf::uint8* UserBin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.UserBin)
  // optional int32 testID = 1;
  if (has_testid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->testid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.UserBin)
  return target;
}

int UserBin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.UserBin)
  int total_size = 0;

  // optional int32 testID = 1;
  if (has_testid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->testid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.UserBin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserBin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.UserBin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.UserBin)
    MergeFrom(*source);
  }
}

void UserBin::MergeFrom(const UserBin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.UserBin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_testid()) {
      set_testid(from.testid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserBin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.UserBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBin::CopyFrom(const UserBin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.UserBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBin::IsInitialized() const {

  return true;
}

void UserBin::Swap(UserBin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBin::InternalSwap(UserBin* other) {
  std::swap(testid_, other->testid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBin_descriptor_;
  metadata.reflection = UserBin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBin

// optional int32 testID = 1;
bool UserBin::has_testid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserBin::set_has_testid() {
  _has_bits_[0] |= 0x00000001u;
}
void UserBin::clear_has_testid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserBin::clear_testid() {
  testid_ = 0;
  clear_has_testid();
}
 ::google::protobuf::int32 UserBin::testid() const {
  // @@protoc_insertion_point(field_get:data.UserBin.testID)
  return testid_;
}
 void UserBin::set_testid(::google::protobuf::int32 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:data.UserBin.testID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryOfflineUserProto::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryOfflineUserProto::QueryOfflineUserProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryOfflineUserProto)
}

void QueryOfflineUserProto::InitAsDefaultInstance() {
}

QueryOfflineUserProto::QueryOfflineUserProto(const QueryOfflineUserProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryOfflineUserProto)
}

void QueryOfflineUserProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryOfflineUserProto::~QueryOfflineUserProto() {
  // @@protoc_insertion_point(destructor:data.QueryOfflineUserProto)
  SharedDtor();
}

void QueryOfflineUserProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryOfflineUserProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOfflineUserProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOfflineUserProto_descriptor_;
}

const QueryOfflineUserProto& QueryOfflineUserProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryOfflineUserProto* QueryOfflineUserProto::default_instance_ = NULL;

QueryOfflineUserProto* QueryOfflineUserProto::New(::google::protobuf::Arena* arena) const {
  QueryOfflineUserProto* n = new QueryOfflineUserProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOfflineUserProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryOfflineUserProto)
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryOfflineUserProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryOfflineUserProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.OfflineUserInfo user_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryOfflineUserProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryOfflineUserProto)
  return false;
#undef DO_
}

void QueryOfflineUserProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryOfflineUserProto)
  // repeated .data.OfflineUserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryOfflineUserProto)
}

::google::protobuf::uint8* QueryOfflineUserProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryOfflineUserProto)
  // repeated .data.OfflineUserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryOfflineUserProto)
  return target;
}

int QueryOfflineUserProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryOfflineUserProto)
  int total_size = 0;

  // repeated .data.OfflineUserInfo user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOfflineUserProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryOfflineUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryOfflineUserProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOfflineUserProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryOfflineUserProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryOfflineUserProto)
    MergeFrom(*source);
  }
}

void QueryOfflineUserProto::MergeFrom(const QueryOfflineUserProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryOfflineUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_list_.MergeFrom(from.user_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryOfflineUserProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryOfflineUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOfflineUserProto::CopyFrom(const QueryOfflineUserProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryOfflineUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOfflineUserProto::IsInitialized() const {

  return true;
}

void QueryOfflineUserProto::Swap(QueryOfflineUserProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOfflineUserProto::InternalSwap(QueryOfflineUserProto* other) {
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOfflineUserProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOfflineUserProto_descriptor_;
  metadata.reflection = QueryOfflineUserProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOfflineUserProto

// repeated .data.OfflineUserInfo user_list = 1;
int QueryOfflineUserProto::user_list_size() const {
  return user_list_.size();
}
void QueryOfflineUserProto::clear_user_list() {
  user_list_.Clear();
}
const ::data::OfflineUserInfo& QueryOfflineUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryOfflineUserProto.user_list)
  return user_list_.Get(index);
}
::data::OfflineUserInfo* QueryOfflineUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryOfflineUserProto.user_list)
  return user_list_.Mutable(index);
}
::data::OfflineUserInfo* QueryOfflineUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryOfflineUserProto.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >*
QueryOfflineUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryOfflineUserProto.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >&
QueryOfflineUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryOfflineUserProto.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineUserInfo::kIDFieldNumber;
const int OfflineUserInfo::kACCIDFieldNumber;
const int OfflineUserInfo::kNAMEFieldNumber;
const int OfflineUserInfo::kLEVELFieldNumber;
const int OfflineUserInfo::kVIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineUserInfo::OfflineUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.OfflineUserInfo)
}

void OfflineUserInfo::InitAsDefaultInstance() {
}

OfflineUserInfo::OfflineUserInfo(const OfflineUserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.OfflineUserInfo)
}

void OfflineUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineUserInfo::~OfflineUserInfo() {
  // @@protoc_insertion_point(destructor:data.OfflineUserInfo)
  SharedDtor();
}

void OfflineUserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void OfflineUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineUserInfo_descriptor_;
}

const OfflineUserInfo& OfflineUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

OfflineUserInfo* OfflineUserInfo::default_instance_ = NULL;

OfflineUserInfo* OfflineUserInfo::New(::google::protobuf::Arena* arena) const {
  OfflineUserInfo* n = new OfflineUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data.OfflineUserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OfflineUserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OfflineUserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, accid_);
    ZR_(level_, vip_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OfflineUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.OfflineUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ACCID;
        break;
      }

      // optional uint64 ACCID = 2;
      case 2: {
        if (tag == 16) {
         parse_ACCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NAME;
        break;
      }

      // optional string NAME = 3;
      case 3: {
        if (tag == 26) {
         parse_NAME:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.OfflineUserInfo.NAME");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LEVEL;
        break;
      }

      // optional uint32 LEVEL = 4;
      case 4: {
        if (tag == 32) {
         parse_LEVEL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_VIP;
        break;
      }

      // optional uint32 VIP = 5;
      case 5: {
        if (tag == 40) {
         parse_VIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.OfflineUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.OfflineUserInfo)
  return false;
#undef DO_
}

void OfflineUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.OfflineUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.OfflineUserInfo.NAME");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 VIP = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.OfflineUserInfo)
}

::google::protobuf::uint8* OfflineUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.OfflineUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.OfflineUserInfo.NAME");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 VIP = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.OfflineUserInfo)
  return target;
}

int OfflineUserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.OfflineUserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 ACCID = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string NAME = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 LEVEL = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 VIP = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.OfflineUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const OfflineUserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const OfflineUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.OfflineUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.OfflineUserInfo)
    MergeFrom(*source);
  }
}

void OfflineUserInfo::MergeFrom(const OfflineUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.OfflineUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void OfflineUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.OfflineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineUserInfo::CopyFrom(const OfflineUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.OfflineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineUserInfo::IsInitialized() const {

  return true;
}

void OfflineUserInfo::Swap(OfflineUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineUserInfo::InternalSwap(OfflineUserInfo* other) {
  std::swap(id_, other->id_);
  std::swap(accid_, other->accid_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(vip_, other->vip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfflineUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineUserInfo_descriptor_;
  metadata.reflection = OfflineUserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineUserInfo

// optional uint64 ID = 1;
bool OfflineUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OfflineUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void OfflineUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void OfflineUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 OfflineUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.ID)
  return id_;
}
 void OfflineUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.ID)
}

// optional uint64 ACCID = 2;
bool OfflineUserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OfflineUserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
void OfflineUserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
void OfflineUserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
 ::google::protobuf::uint64 OfflineUserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.ACCID)
  return accid_;
}
 void OfflineUserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.ACCID)
}

// optional string NAME = 3;
bool OfflineUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OfflineUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void OfflineUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void OfflineUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& OfflineUserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.NAME)
}
 void OfflineUserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.OfflineUserInfo.NAME)
}
 void OfflineUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.OfflineUserInfo.NAME)
}
 ::std::string* OfflineUserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.OfflineUserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* OfflineUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.OfflineUserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void OfflineUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.OfflineUserInfo.NAME)
}

// optional uint32 LEVEL = 4;
bool OfflineUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OfflineUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void OfflineUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void OfflineUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 OfflineUserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.LEVEL)
  return level_;
}
 void OfflineUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.LEVEL)
}

// optional uint32 VIP = 5;
bool OfflineUserInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OfflineUserInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
void OfflineUserInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
void OfflineUserInfo::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
 ::google::protobuf::uint32 OfflineUserInfo::vip() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.VIP)
  return vip_;
}
 void OfflineUserInfo::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.VIP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldUserInfo::kIDFieldNumber;
const int WorldUserInfo::kACCIDFieldNumber;
const int WorldUserInfo::kNAMEFieldNumber;
const int WorldUserInfo::kLEVELFieldNumber;
const int WorldUserInfo::kSCENEIDFieldNumber;
const int WorldUserInfo::kMAPIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldUserInfo::WorldUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.WorldUserInfo)
}

void WorldUserInfo::InitAsDefaultInstance() {
}

WorldUserInfo::WorldUserInfo(const WorldUserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.WorldUserInfo)
}

void WorldUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  accid_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  sceneid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldUserInfo::~WorldUserInfo() {
  // @@protoc_insertion_point(destructor:data.WorldUserInfo)
  SharedDtor();
}

void WorldUserInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WorldUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldUserInfo_descriptor_;
}

const WorldUserInfo& WorldUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

WorldUserInfo* WorldUserInfo::default_instance_ = NULL;

WorldUserInfo* WorldUserInfo::New(::google::protobuf::Arena* arena) const {
  WorldUserInfo* n = new WorldUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorldUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data.WorldUserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorldUserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorldUserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(id_, accid_);
    ZR_(level_, mapid_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WorldUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.WorldUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ACCID;
        break;
      }

      // optional uint64 ACCID = 2;
      case 2: {
        if (tag == 16) {
         parse_ACCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_NAME;
        break;
      }

      // optional string NAME = 3;
      case 3: {
        if (tag == 26) {
         parse_NAME:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.WorldUserInfo.NAME");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LEVEL;
        break;
      }

      // optional uint32 LEVEL = 4;
      case 4: {
        if (tag == 32) {
         parse_LEVEL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SCENEID;
        break;
      }

      // optional uint32 SCENEID = 5;
      case 5: {
        if (tag == 40) {
         parse_SCENEID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MAPID;
        break;
      }

      // optional uint32 MAPID = 6;
      case 6: {
        if (tag == 48) {
         parse_MAPID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.WorldUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.WorldUserInfo)
  return false;
#undef DO_
}

void WorldUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.WorldUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accid(), output);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.WorldUserInfo.NAME");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 SCENEID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sceneid(), output);
  }

  // optional uint32 MAPID = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.WorldUserInfo)
}

::google::protobuf::uint8* WorldUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.WorldUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 ACCID = 2;
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accid(), target);
  }

  // optional string NAME = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.WorldUserInfo.NAME");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 LEVEL = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 SCENEID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sceneid(), target);
  }

  // optional uint32 MAPID = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.WorldUserInfo)
  return target;
}

int WorldUserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.WorldUserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 ACCID = 2;
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional string NAME = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 LEVEL = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 SCENEID = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 MAPID = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.WorldUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorldUserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.WorldUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.WorldUserInfo)
    MergeFrom(*source);
  }
}

void WorldUserInfo::MergeFrom(const WorldUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.WorldUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WorldUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.WorldUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldUserInfo::CopyFrom(const WorldUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.WorldUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldUserInfo::IsInitialized() const {

  return true;
}

void WorldUserInfo::Swap(WorldUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldUserInfo::InternalSwap(WorldUserInfo* other) {
  std::swap(id_, other->id_);
  std::swap(accid_, other->accid_);
  name_.Swap(&other->name_);
  std::swap(level_, other->level_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(mapid_, other->mapid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorldUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldUserInfo_descriptor_;
  metadata.reflection = WorldUserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorldUserInfo

// optional uint64 ID = 1;
bool WorldUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorldUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WorldUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorldUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 WorldUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.ID)
  return id_;
}
 void WorldUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.ID)
}

// optional uint64 ACCID = 2;
bool WorldUserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorldUserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
void WorldUserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorldUserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
 ::google::protobuf::uint64 WorldUserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.ACCID)
  return accid_;
}
 void WorldUserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.ACCID)
}

// optional string NAME = 3;
bool WorldUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WorldUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void WorldUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void WorldUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& WorldUserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorldUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.NAME)
}
 void WorldUserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.WorldUserInfo.NAME)
}
 void WorldUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.WorldUserInfo.NAME)
}
 ::std::string* WorldUserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.WorldUserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WorldUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.WorldUserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WorldUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.WorldUserInfo.NAME)
}

// optional uint32 LEVEL = 4;
bool WorldUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WorldUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void WorldUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void WorldUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
 ::google::protobuf::uint32 WorldUserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.LEVEL)
  return level_;
}
 void WorldUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.LEVEL)
}

// optional uint32 SCENEID = 5;
bool WorldUserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WorldUserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
void WorldUserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
void WorldUserInfo::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
 ::google::protobuf::uint32 WorldUserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.SCENEID)
  return sceneid_;
}
 void WorldUserInfo::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.SCENEID)
}

// optional uint32 MAPID = 6;
bool WorldUserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WorldUserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
void WorldUserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
void WorldUserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
 ::google::protobuf::uint32 WorldUserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.MAPID)
  return mapid_;
}
 void WorldUserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.MAPID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Counter::kItemidFieldNumber;
const int Counter::kItemvalFieldNumber;
const int Counter::kStarttimeFieldNumber;
const int Counter::kEndtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Counter::Counter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Counter)
}

void Counter::InitAsDefaultInstance() {
}

Counter::Counter(const Counter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Counter)
}

void Counter::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemval_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Counter::~Counter() {
  // @@protoc_insertion_point(destructor:data.Counter)
  SharedDtor();
}

void Counter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Counter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Counter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Counter_descriptor_;
}

const Counter& Counter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

Counter* Counter::default_instance_ = NULL;

Counter* Counter::New(::google::protobuf::Arena* arena) const {
  Counter* n = new Counter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Counter::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Counter)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Counter, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Counter*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, endtime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Counter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Counter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemval;
        break;
      }

      // optional int32 itemval = 2;
      case 2: {
        if (tag == 16) {
         parse_itemval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemval_)));
          set_has_itemval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Counter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Counter)
  return false;
#undef DO_
}

void Counter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Counter)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemval(), output);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Counter)
}

::google::protobuf::uint8* Counter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Counter)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemval(), target);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Counter)
  return target;
}

int Counter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.Counter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemval = 2;
    if (has_itemval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemval());
    }

    // optional int32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Counter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Counter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Counter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Counter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Counter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Counter)
    MergeFrom(*source);
  }
}

void Counter::MergeFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Counter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemval()) {
      set_itemval(from.itemval());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Counter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Counter::CopyFrom(const Counter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Counter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counter::IsInitialized() const {

  return true;
}

void Counter::Swap(Counter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Counter::InternalSwap(Counter* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemval_, other->itemval_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Counter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Counter_descriptor_;
  metadata.reflection = Counter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Counter

// optional int32 itemid = 1;
bool Counter::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Counter::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void Counter::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Counter::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 Counter::itemid() const {
  // @@protoc_insertion_point(field_get:data.Counter.itemid)
  return itemid_;
}
 void Counter::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.itemid)
}

// optional int32 itemval = 2;
bool Counter::has_itemval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Counter::set_has_itemval() {
  _has_bits_[0] |= 0x00000002u;
}
void Counter::clear_has_itemval() {
  _has_bits_[0] &= ~0x00000002u;
}
void Counter::clear_itemval() {
  itemval_ = 0;
  clear_has_itemval();
}
 ::google::protobuf::int32 Counter::itemval() const {
  // @@protoc_insertion_point(field_get:data.Counter.itemval)
  return itemval_;
}
 void Counter::set_itemval(::google::protobuf::int32 value) {
  set_has_itemval();
  itemval_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.itemval)
}

// optional int32 starttime = 3;
bool Counter::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Counter::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
void Counter::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void Counter::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
 ::google::protobuf::int32 Counter::starttime() const {
  // @@protoc_insertion_point(field_get:data.Counter.starttime)
  return starttime_;
}
 void Counter::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.starttime)
}

// optional int32 endtime = 4;
bool Counter::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Counter::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
void Counter::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Counter::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
 ::google::protobuf::int32 Counter::endtime() const {
  // @@protoc_insertion_point(field_get:data.Counter.endtime)
  return endtime_;
}
 void Counter::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.endtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CounterProto::kCounterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CounterProto::CounterProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.CounterProto)
}

void CounterProto::InitAsDefaultInstance() {
}

CounterProto::CounterProto(const CounterProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.CounterProto)
}

void CounterProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterProto::~CounterProto() {
  // @@protoc_insertion_point(destructor:data.CounterProto)
  SharedDtor();
}

void CounterProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterProto_descriptor_;
}

const CounterProto& CounterProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

CounterProto* CounterProto::default_instance_ = NULL;

CounterProto* CounterProto::New(::google::protobuf::Arena* arena) const {
  CounterProto* n = new CounterProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CounterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.CounterProto)
  counter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CounterProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.CounterProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.Counter counter = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_counter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_counter;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.CounterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.CounterProto)
  return false;
#undef DO_
}

void CounterProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.CounterProto)
  // repeated .data.Counter counter = 1;
  for (unsigned int i = 0, n = this->counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counter(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.CounterProto)
}

::google::protobuf::uint8* CounterProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.CounterProto)
  // repeated .data.Counter counter = 1;
  for (unsigned int i = 0, n = this->counter_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->counter(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.CounterProto)
  return target;
}

int CounterProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.CounterProto)
  int total_size = 0;

  // repeated .data.Counter counter = 1;
  total_size += 1 * this->counter_size();
  for (int i = 0; i < this->counter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counter(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.CounterProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CounterProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CounterProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.CounterProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.CounterProto)
    MergeFrom(*source);
  }
}

void CounterProto::MergeFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.CounterProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  counter_.MergeFrom(from.counter_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CounterProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterProto::CopyFrom(const CounterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.CounterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterProto::IsInitialized() const {

  return true;
}

void CounterProto::Swap(CounterProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CounterProto::InternalSwap(CounterProto* other) {
  counter_.UnsafeArenaSwap(&other->counter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CounterProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterProto_descriptor_;
  metadata.reflection = CounterProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CounterProto

// repeated .data.Counter counter = 1;
int CounterProto::counter_size() const {
  return counter_.size();
}
void CounterProto::clear_counter() {
  counter_.Clear();
}
const ::data::Counter& CounterProto::counter(int index) const {
  // @@protoc_insertion_point(field_get:data.CounterProto.counter)
  return counter_.Get(index);
}
::data::Counter* CounterProto::mutable_counter(int index) {
  // @@protoc_insertion_point(field_mutable:data.CounterProto.counter)
  return counter_.Mutable(index);
}
::data::Counter* CounterProto::add_counter() {
  // @@protoc_insertion_point(field_add:data.CounterProto.counter)
  return counter_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::Counter >*
CounterProto::mutable_counter() {
  // @@protoc_insertion_point(field_mutable_list:data.CounterProto.counter)
  return &counter_;
}
const ::google::protobuf::RepeatedPtrField< ::data::Counter >&
CounterProto::counter() const {
  // @@protoc_insertion_point(field_list:data.CounterProto.counter)
  return counter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgObject::kConentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgObject::MsgObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.MsgObject)
}

void MsgObject::InitAsDefaultInstance() {
}

MsgObject::MsgObject(const MsgObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.MsgObject)
}

void MsgObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObject::~MsgObject() {
  // @@protoc_insertion_point(destructor:data.MsgObject)
  SharedDtor();
}

void MsgObject::SharedDtor() {
  conent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObject_descriptor_;
}

const MsgObject& MsgObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

MsgObject* MsgObject::default_instance_ = NULL;

MsgObject* MsgObject::New(::google::protobuf::Arena* arena) const {
  MsgObject* n = new MsgObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgObject::Clear() {
// @@protoc_insertion_point(message_clear_start:data.MsgObject)
  if (has_conent()) {
    conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.MsgObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string conent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conent().data(), this->conent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.MsgObject.conent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.MsgObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.MsgObject)
  return false;
#undef DO_
}

void MsgObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.MsgObject)
  // optional string conent = 1;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.MsgObject.conent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->conent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.MsgObject)
}

::google::protobuf::uint8* MsgObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.MsgObject)
  // optional string conent = 1;
  if (has_conent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conent().data(), this->conent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.MsgObject.conent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->conent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.MsgObject)
  return target;
}

int MsgObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.MsgObject)
  int total_size = 0;

  // optional string conent = 1;
  if (has_conent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->conent());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.MsgObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.MsgObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.MsgObject)
    MergeFrom(*source);
  }
}

void MsgObject::MergeFrom(const MsgObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.MsgObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conent()) {
      set_has_conent();
      conent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conent_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.MsgObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObject::CopyFrom(const MsgObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.MsgObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObject::IsInitialized() const {

  return true;
}

void MsgObject::Swap(MsgObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgObject::InternalSwap(MsgObject* other) {
  conent_.Swap(&other->conent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObject_descriptor_;
  metadata.reflection = MsgObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgObject

// optional string conent = 1;
bool MsgObject::has_conent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgObject::set_has_conent() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgObject::clear_has_conent() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgObject::clear_conent() {
  conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conent();
}
 const ::std::string& MsgObject::conent() const {
  // @@protoc_insertion_point(field_get:data.MsgObject.conent)
  return conent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgObject::set_conent(const ::std::string& value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.MsgObject.conent)
}
 void MsgObject::set_conent(const char* value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.MsgObject.conent)
}
 void MsgObject::set_conent(const char* value, size_t size) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.MsgObject.conent)
}
 ::std::string* MsgObject::mutable_conent() {
  set_has_conent();
  // @@protoc_insertion_point(field_mutable:data.MsgObject.conent)
  return conent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgObject::release_conent() {
  // @@protoc_insertion_point(field_release:data.MsgObject.conent)
  clear_has_conent();
  return conent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgObject::set_allocated_conent(::std::string* conent) {
  if (conent != NULL) {
    set_has_conent();
  } else {
    clear_has_conent();
  }
  conent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conent);
  // @@protoc_insertion_point(field_set_allocated:data.MsgObject.conent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelChatMsg::kMsgidFieldNumber;
const int RelChatMsg::kSenduidFieldNumber;
const int RelChatMsg::kSendnameFieldNumber;
const int RelChatMsg::kRecvuidFieldNumber;
const int RelChatMsg::kRecvnameFieldNumber;
const int RelChatMsg::kSendtimeFieldNumber;
const int RelChatMsg::kMsgobjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelChatMsg::RelChatMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.RelChatMsg)
}

void RelChatMsg::InitAsDefaultInstance() {
  msgobj_ = const_cast< ::data::MsgObject*>(&::data::MsgObject::default_instance());
}

RelChatMsg::RelChatMsg(const RelChatMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.RelChatMsg)
}

void RelChatMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = GOOGLE_LONGLONG(0);
  senduid_ = GOOGLE_LONGLONG(0);
  sendname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvuid_ = GOOGLE_LONGLONG(0);
  recvname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtime_ = 0;
  msgobj_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelChatMsg::~RelChatMsg() {
  // @@protoc_insertion_point(destructor:data.RelChatMsg)
  SharedDtor();
}

void RelChatMsg::SharedDtor() {
  sendname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete msgobj_;
  }
}

void RelChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelChatMsg_descriptor_;
}

const RelChatMsg& RelChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

RelChatMsg* RelChatMsg::default_instance_ = NULL;

RelChatMsg* RelChatMsg::New(::google::protobuf::Arena* arena) const {
  RelChatMsg* n = new RelChatMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:data.RelChatMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RelChatMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RelChatMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(msgid_, senduid_);
    if (has_sendname()) {
      sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    recvuid_ = GOOGLE_LONGLONG(0);
    if (has_recvname()) {
      recvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sendtime_ = 0;
    if (has_msgobj()) {
      if (msgobj_ != NULL) msgobj_->::data::MsgObject::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.RelChatMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 msgid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_senduid;
        break;
      }

      // optional int64 senduid = 2;
      case 2: {
        if (tag == 16) {
         parse_senduid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &senduid_)));
          set_has_senduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sendname;
        break;
      }

      // optional string sendname = 3;
      case 3: {
        if (tag == 26) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.RelChatMsg.sendname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recvuid;
        break;
      }

      // optional int64 recvuid = 4;
      case 4: {
        if (tag == 32) {
         parse_recvuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recvuid_)));
          set_has_recvuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_recvname;
        break;
      }

      // optional string recvname = 5;
      case 5: {
        if (tag == 42) {
         parse_recvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recvname().data(), this->recvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.RelChatMsg.recvname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sendtime;
        break;
      }

      // optional int32 sendtime = 6;
      case 6: {
        if (tag == 48) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msgobj;
        break;
      }

      // optional .data.MsgObject msgobj = 7;
      case 7: {
        if (tag == 58) {
         parse_msgobj:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgobj()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.RelChatMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.RelChatMsg)
  return false;
#undef DO_
}

void RelChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.RelChatMsg)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->msgid(), output);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->senduid(), output);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.RelChatMsg.sendname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sendname(), output);
  }

  // optional int64 recvuid = 4;
  if (has_recvuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->recvuid(), output);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.RelChatMsg.recvname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->recvname(), output);
  }

  // optional int32 sendtime = 6;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sendtime(), output);
  }

  // optional .data.MsgObject msgobj = 7;
  if (has_msgobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->msgobj_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.RelChatMsg)
}

::google::protobuf::uint8* RelChatMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.RelChatMsg)
  // optional int64 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->msgid(), target);
  }

  // optional int64 senduid = 2;
  if (has_senduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->senduid(), target);
  }

  // optional string sendname = 3;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.RelChatMsg.sendname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sendname(), target);
  }

  // optional int64 recvuid = 4;
  if (has_recvuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->recvuid(), target);
  }

  // optional string recvname = 5;
  if (has_recvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recvname().data(), this->recvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.RelChatMsg.recvname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->recvname(), target);
  }

  // optional int32 sendtime = 6;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sendtime(), target);
  }

  // optional .data.MsgObject msgobj = 7;
  if (has_msgobj()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->msgobj_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.RelChatMsg)
  return target;
}

int RelChatMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.RelChatMsg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->msgid());
    }

    // optional int64 senduid = 2;
    if (has_senduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->senduid());
    }

    // optional string sendname = 3;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional int64 recvuid = 4;
    if (has_recvuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->recvuid());
    }

    // optional string recvname = 5;
    if (has_recvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recvname());
    }

    // optional int32 sendtime = 6;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // optional .data.MsgObject msgobj = 7;
    if (has_msgobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msgobj_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.RelChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelChatMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelChatMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.RelChatMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.RelChatMsg)
    MergeFrom(*source);
  }
}

void RelChatMsg::MergeFrom(const RelChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.RelChatMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_senduid()) {
      set_senduid(from.senduid());
    }
    if (from.has_sendname()) {
      set_has_sendname();
      sendname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sendname_);
    }
    if (from.has_recvuid()) {
      set_recvuid(from.recvuid());
    }
    if (from.has_recvname()) {
      set_has_recvname();
      recvname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvname_);
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_msgobj()) {
      mutable_msgobj()->::data::MsgObject::MergeFrom(from.msgobj());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.RelChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelChatMsg::CopyFrom(const RelChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.RelChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelChatMsg::IsInitialized() const {

  return true;
}

void RelChatMsg::Swap(RelChatMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelChatMsg::InternalSwap(RelChatMsg* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(senduid_, other->senduid_);
  sendname_.Swap(&other->sendname_);
  std::swap(recvuid_, other->recvuid_);
  recvname_.Swap(&other->recvname_);
  std::swap(sendtime_, other->sendtime_);
  std::swap(msgobj_, other->msgobj_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelChatMsg_descriptor_;
  metadata.reflection = RelChatMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelChatMsg

// optional int64 msgid = 1;
bool RelChatMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelChatMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
void RelChatMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelChatMsg::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
 ::google::protobuf::int64 RelChatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.msgid)
  return msgid_;
}
 void RelChatMsg::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.msgid)
}

// optional int64 senduid = 2;
bool RelChatMsg::has_senduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelChatMsg::set_has_senduid() {
  _has_bits_[0] |= 0x00000002u;
}
void RelChatMsg::clear_has_senduid() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelChatMsg::clear_senduid() {
  senduid_ = GOOGLE_LONGLONG(0);
  clear_has_senduid();
}
 ::google::protobuf::int64 RelChatMsg::senduid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.senduid)
  return senduid_;
}
 void RelChatMsg::set_senduid(::google::protobuf::int64 value) {
  set_has_senduid();
  senduid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.senduid)
}

// optional string sendname = 3;
bool RelChatMsg::has_sendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RelChatMsg::set_has_sendname() {
  _has_bits_[0] |= 0x00000004u;
}
void RelChatMsg::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000004u;
}
void RelChatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendname();
}
 const ::std::string& RelChatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.sendname)
  return sendname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_sendname(const ::std::string& value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.RelChatMsg.sendname)
}
 void RelChatMsg::set_sendname(const char* value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.RelChatMsg.sendname)
}
 void RelChatMsg::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.RelChatMsg.sendname)
}
 ::std::string* RelChatMsg::mutable_sendname() {
  set_has_sendname();
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.sendname)
  return sendname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelChatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.sendname)
  clear_has_sendname();
  return sendname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_allocated_sendname(::std::string* sendname) {
  if (sendname != NULL) {
    set_has_sendname();
  } else {
    clear_has_sendname();
  }
  sendname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.sendname)
}

// optional int64 recvuid = 4;
bool RelChatMsg::has_recvuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RelChatMsg::set_has_recvuid() {
  _has_bits_[0] |= 0x00000008u;
}
void RelChatMsg::clear_has_recvuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void RelChatMsg::clear_recvuid() {
  recvuid_ = GOOGLE_LONGLONG(0);
  clear_has_recvuid();
}
 ::google::protobuf::int64 RelChatMsg::recvuid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.recvuid)
  return recvuid_;
}
 void RelChatMsg::set_recvuid(::google::protobuf::int64 value) {
  set_has_recvuid();
  recvuid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.recvuid)
}

// optional string recvname = 5;
bool RelChatMsg::has_recvname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RelChatMsg::set_has_recvname() {
  _has_bits_[0] |= 0x00000010u;
}
void RelChatMsg::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000010u;
}
void RelChatMsg::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recvname();
}
 const ::std::string& RelChatMsg::recvname() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.recvname)
  return recvname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_recvname(const ::std::string& value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.RelChatMsg.recvname)
}
 void RelChatMsg::set_recvname(const char* value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.RelChatMsg.recvname)
}
 void RelChatMsg::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.RelChatMsg.recvname)
}
 ::std::string* RelChatMsg::mutable_recvname() {
  set_has_recvname();
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.recvname)
  return recvname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelChatMsg::release_recvname() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.recvname)
  clear_has_recvname();
  return recvname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelChatMsg::set_allocated_recvname(::std::string* recvname) {
  if (recvname != NULL) {
    set_has_recvname();
  } else {
    clear_has_recvname();
  }
  recvname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.recvname)
}

// optional int32 sendtime = 6;
bool RelChatMsg::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RelChatMsg::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
void RelChatMsg::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void RelChatMsg::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
 ::google::protobuf::int32 RelChatMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.sendtime)
  return sendtime_;
}
 void RelChatMsg::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.sendtime)
}

// optional .data.MsgObject msgobj = 7;
bool RelChatMsg::has_msgobj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RelChatMsg::set_has_msgobj() {
  _has_bits_[0] |= 0x00000040u;
}
void RelChatMsg::clear_has_msgobj() {
  _has_bits_[0] &= ~0x00000040u;
}
void RelChatMsg::clear_msgobj() {
  if (msgobj_ != NULL) msgobj_->::data::MsgObject::Clear();
  clear_has_msgobj();
}
const ::data::MsgObject& RelChatMsg::msgobj() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.msgobj)
  return msgobj_ != NULL ? *msgobj_ : *default_instance_->msgobj_;
}
::data::MsgObject* RelChatMsg::mutable_msgobj() {
  set_has_msgobj();
  if (msgobj_ == NULL) {
    msgobj_ = new ::data::MsgObject;
  }
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.msgobj)
  return msgobj_;
}
::data::MsgObject* RelChatMsg::release_msgobj() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.msgobj)
  clear_has_msgobj();
  ::data::MsgObject* temp = msgobj_;
  msgobj_ = NULL;
  return temp;
}
void RelChatMsg::set_allocated_msgobj(::data::MsgObject* msgobj) {
  delete msgobj_;
  msgobj_ = msgobj;
  if (msgobj) {
    set_has_msgobj();
  } else {
    clear_has_msgobj();
  }
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.msgobj)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelChatProto::kMsglistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelChatProto::RelChatProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.RelChatProto)
}

void RelChatProto::InitAsDefaultInstance() {
}

RelChatProto::RelChatProto(const RelChatProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.RelChatProto)
}

void RelChatProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelChatProto::~RelChatProto() {
  // @@protoc_insertion_point(destructor:data.RelChatProto)
  SharedDtor();
}

void RelChatProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelChatProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelChatProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelChatProto_descriptor_;
}

const RelChatProto& RelChatProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

RelChatProto* RelChatProto::default_instance_ = NULL;

RelChatProto* RelChatProto::New(::google::protobuf::Arena* arena) const {
  RelChatProto* n = new RelChatProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelChatProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.RelChatProto)
  msglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelChatProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.RelChatProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.RelChatMsg msglist = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_msglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_msglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_msglist;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.RelChatProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.RelChatProto)
  return false;
#undef DO_
}

void RelChatProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.RelChatProto)
  // repeated .data.RelChatMsg msglist = 1;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msglist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.RelChatProto)
}

::google::protobuf::uint8* RelChatProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.RelChatProto)
  // repeated .data.RelChatMsg msglist = 1;
  for (unsigned int i = 0, n = this->msglist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->msglist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.RelChatProto)
  return target;
}

int RelChatProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.RelChatProto)
  int total_size = 0;

  // repeated .data.RelChatMsg msglist = 1;
  total_size += 1 * this->msglist_size();
  for (int i = 0; i < this->msglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msglist(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelChatProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.RelChatProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelChatProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelChatProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.RelChatProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.RelChatProto)
    MergeFrom(*source);
  }
}

void RelChatProto::MergeFrom(const RelChatProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.RelChatProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  msglist_.MergeFrom(from.msglist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelChatProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.RelChatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelChatProto::CopyFrom(const RelChatProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.RelChatProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelChatProto::IsInitialized() const {

  return true;
}

void RelChatProto::Swap(RelChatProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelChatProto::InternalSwap(RelChatProto* other) {
  msglist_.UnsafeArenaSwap(&other->msglist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelChatProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelChatProto_descriptor_;
  metadata.reflection = RelChatProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelChatProto

// repeated .data.RelChatMsg msglist = 1;
int RelChatProto::msglist_size() const {
  return msglist_.size();
}
void RelChatProto::clear_msglist() {
  msglist_.Clear();
}
const ::data::RelChatMsg& RelChatProto::msglist(int index) const {
  // @@protoc_insertion_point(field_get:data.RelChatProto.msglist)
  return msglist_.Get(index);
}
::data::RelChatMsg* RelChatProto::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:data.RelChatProto.msglist)
  return msglist_.Mutable(index);
}
::data::RelChatMsg* RelChatProto::add_msglist() {
  // @@protoc_insertion_point(field_add:data.RelChatProto.msglist)
  return msglist_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >*
RelChatProto::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:data.RelChatProto.msglist)
  return &msglist_;
}
const ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >&
RelChatProto::msglist() const {
  // @@protoc_insertion_point(field_list:data.RelChatProto.msglist)
  return msglist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kUidFieldNumber;
const int Relation::kNameFieldNumber;
const int Relation::kRelFieldNumber;
const int Relation::kCreatetimeFieldNumber;
const int Relation::kDealreltimeFieldNumber;
const int Relation::kRelchatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.Relation)
}

void Relation::InitAsDefaultInstance() {
  relchat_ = const_cast< ::data::RelChatProto*>(&::data::RelChatProto::default_instance());
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.Relation)
}

void Relation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rel_ = 0;
  createtime_ = 0;
  dealreltime_ = 0;
  relchat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:data.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete relchat_;
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New(::google::protobuf::Arena* arena) const {
  Relation* n = new Relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:data.Relation)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Relation, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Relation*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(rel_, createtime_);
    uid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    dealreltime_ = 0;
    if (has_relchat()) {
      if (relchat_ != NULL) relchat_->::data::RelChatProto::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.Relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.Relation.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rel;
        break;
      }

      // optional int32 rel = 3;
      case 3: {
        if (tag == 24) {
         parse_rel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_)));
          set_has_rel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 4;
      case 4: {
        if (tag == 32) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dealreltime;
        break;
      }

      // optional int32 dealreltime = 5;
      case 5: {
        if (tag == 40) {
         parse_dealreltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealreltime_)));
          set_has_dealreltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_relchat;
        break;
      }

      // optional .data.RelChatProto relchat = 6;
      case 6: {
        if (tag == 50) {
         parse_relchat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relchat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.Relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.Relation)
  return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.Relation)
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.Relation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 rel = 3;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rel(), output);
  }

  // optional int32 createtime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->createtime(), output);
  }

  // optional int32 dealreltime = 5;
  if (has_dealreltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dealreltime(), output);
  }

  // optional .data.RelChatProto relchat = 6;
  if (has_relchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->relchat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.Relation)
}

::google::protobuf::uint8* Relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.Relation)
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.Relation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 rel = 3;
  if (has_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rel(), target);
  }

  // optional int32 createtime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->createtime(), target);
  }

  // optional int32 dealreltime = 5;
  if (has_dealreltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dealreltime(), target);
  }

  // optional .data.RelChatProto relchat = 6;
  if (has_relchat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->relchat_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.Relation)
  return target;
}

int Relation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.Relation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rel = 3;
    if (has_rel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel());
    }

    // optional int32 createtime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int32 dealreltime = 5;
    if (has_dealreltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealreltime());
    }

    // optional .data.RelChatProto relchat = 6;
    if (has_relchat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relchat_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Relation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.Relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_rel()) {
      set_rel(from.rel());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_dealreltime()) {
      set_dealreltime(from.dealreltime());
    }
    if (from.has_relchat()) {
      mutable_relchat()->::data::RelChatProto::MergeFrom(from.relchat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {

  return true;
}

void Relation::Swap(Relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
  std::swap(uid_, other->uid_);
  name_.Swap(&other->name_);
  std::swap(rel_, other->rel_);
  std::swap(createtime_, other->createtime_);
  std::swap(dealreltime_, other->dealreltime_);
  std::swap(relchat_, other->relchat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Relation

// optional int64 uid = 1;
bool Relation::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Relation::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void Relation::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Relation::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 Relation::uid() const {
  // @@protoc_insertion_point(field_get:data.Relation.uid)
  return uid_;
}
 void Relation::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.uid)
}

// optional string name = 2;
bool Relation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Relation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Relation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Relation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Relation::name() const {
  // @@protoc_insertion_point(field_get:data.Relation.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Relation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.Relation.name)
}
 void Relation::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.Relation.name)
}
 void Relation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.Relation.name)
}
 ::std::string* Relation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.Relation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Relation::release_name() {
  // @@protoc_insertion_point(field_release:data.Relation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Relation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.Relation.name)
}

// optional int32 rel = 3;
bool Relation::has_rel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Relation::set_has_rel() {
  _has_bits_[0] |= 0x00000004u;
}
void Relation::clear_has_rel() {
  _has_bits_[0] &= ~0x00000004u;
}
void Relation::clear_rel() {
  rel_ = 0;
  clear_has_rel();
}
 ::google::protobuf::int32 Relation::rel() const {
  // @@protoc_insertion_point(field_get:data.Relation.rel)
  return rel_;
}
 void Relation::set_rel(::google::protobuf::int32 value) {
  set_has_rel();
  rel_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.rel)
}

// optional int32 createtime = 4;
bool Relation::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Relation::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
void Relation::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Relation::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
 ::google::protobuf::int32 Relation::createtime() const {
  // @@protoc_insertion_point(field_get:data.Relation.createtime)
  return createtime_;
}
 void Relation::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.createtime)
}

// optional int32 dealreltime = 5;
bool Relation::has_dealreltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Relation::set_has_dealreltime() {
  _has_bits_[0] |= 0x00000010u;
}
void Relation::clear_has_dealreltime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Relation::clear_dealreltime() {
  dealreltime_ = 0;
  clear_has_dealreltime();
}
 ::google::protobuf::int32 Relation::dealreltime() const {
  // @@protoc_insertion_point(field_get:data.Relation.dealreltime)
  return dealreltime_;
}
 void Relation::set_dealreltime(::google::protobuf::int32 value) {
  set_has_dealreltime();
  dealreltime_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.dealreltime)
}

// optional .data.RelChatProto relchat = 6;
bool Relation::has_relchat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Relation::set_has_relchat() {
  _has_bits_[0] |= 0x00000020u;
}
void Relation::clear_has_relchat() {
  _has_bits_[0] &= ~0x00000020u;
}
void Relation::clear_relchat() {
  if (relchat_ != NULL) relchat_->::data::RelChatProto::Clear();
  clear_has_relchat();
}
const ::data::RelChatProto& Relation::relchat() const {
  // @@protoc_insertion_point(field_get:data.Relation.relchat)
  return relchat_ != NULL ? *relchat_ : *default_instance_->relchat_;
}
::data::RelChatProto* Relation::mutable_relchat() {
  set_has_relchat();
  if (relchat_ == NULL) {
    relchat_ = new ::data::RelChatProto;
  }
  // @@protoc_insertion_point(field_mutable:data.Relation.relchat)
  return relchat_;
}
::data::RelChatProto* Relation::release_relchat() {
  // @@protoc_insertion_point(field_release:data.Relation.relchat)
  clear_has_relchat();
  ::data::RelChatProto* temp = relchat_;
  relchat_ = NULL;
  return temp;
}
void Relation::set_allocated_relchat(::data::RelChatProto* relchat) {
  delete relchat_;
  relchat_ = relchat;
  if (relchat) {
    set_has_relchat();
  } else {
    clear_has_relchat();
  }
  // @@protoc_insertion_point(field_set_allocated:data.Relation.relchat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelationProto::kRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelationProto::RelationProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.RelationProto)
}

void RelationProto::InitAsDefaultInstance() {
}

RelationProto::RelationProto(const RelationProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.RelationProto)
}

void RelationProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationProto::~RelationProto() {
  // @@protoc_insertion_point(destructor:data.RelationProto)
  SharedDtor();
}

void RelationProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationProto_descriptor_;
}

const RelationProto& RelationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

RelationProto* RelationProto::default_instance_ = NULL;

RelationProto* RelationProto::New(::google::protobuf::Arena* arena) const {
  RelationProto* n = new RelationProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.RelationProto)
  relation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.RelationProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.Relation relation = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_relation;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.RelationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.RelationProto)
  return false;
#undef DO_
}

void RelationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.RelationProto)
  // repeated .data.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relation(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.RelationProto)
}

::google::protobuf::uint8* RelationProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.RelationProto)
  // repeated .data.Relation relation = 1;
  for (unsigned int i = 0, n = this->relation_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->relation(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.RelationProto)
  return target;
}

int RelationProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.RelationProto)
  int total_size = 0;

  // repeated .data.Relation relation = 1;
  total_size += 1 * this->relation_size();
  for (int i = 0; i < this->relation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relation(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.RelationProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RelationProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelationProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.RelationProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.RelationProto)
    MergeFrom(*source);
  }
}

void RelationProto::MergeFrom(const RelationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.RelationProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  relation_.MergeFrom(from.relation_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelationProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.RelationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationProto::CopyFrom(const RelationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.RelationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationProto::IsInitialized() const {

  return true;
}

void RelationProto::Swap(RelationProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelationProto::InternalSwap(RelationProto* other) {
  relation_.UnsafeArenaSwap(&other->relation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationProto_descriptor_;
  metadata.reflection = RelationProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelationProto

// repeated .data.Relation relation = 1;
int RelationProto::relation_size() const {
  return relation_.size();
}
void RelationProto::clear_relation() {
  relation_.Clear();
}
const ::data::Relation& RelationProto::relation(int index) const {
  // @@protoc_insertion_point(field_get:data.RelationProto.relation)
  return relation_.Get(index);
}
::data::Relation* RelationProto::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:data.RelationProto.relation)
  return relation_.Mutable(index);
}
::data::Relation* RelationProto::add_relation() {
  // @@protoc_insertion_point(field_add:data.RelationProto.relation)
  return relation_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::Relation >*
RelationProto::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:data.RelationProto.relation)
  return &relation_;
}
const ::google::protobuf::RepeatedPtrField< ::data::Relation >&
RelationProto::relation() const {
  // @@protoc_insertion_point(field_list:data.RelationProto.relation)
  return relation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBinary::kCountersFieldNumber;
const int UserBinary::kRelationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBinary::UserBinary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.UserBinary)
}

void UserBinary::InitAsDefaultInstance() {
  counters_ = const_cast< ::data::CounterProto*>(&::data::CounterProto::default_instance());
  relations_ = const_cast< ::data::RelationProto*>(&::data::RelationProto::default_instance());
}

UserBinary::UserBinary(const UserBinary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.UserBinary)
}

void UserBinary::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  relations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBinary::~UserBinary() {
  // @@protoc_insertion_point(destructor:data.UserBinary)
  SharedDtor();
}

void UserBinary::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
    delete relations_;
  }
}

void UserBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBinary_descriptor_;
}

const UserBinary& UserBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

UserBinary* UserBinary::default_instance_ = NULL;

UserBinary* UserBinary::New(::google::protobuf::Arena* arena) const {
  UserBinary* n = new UserBinary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:data.UserBinary)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_counters()) {
      if (counters_ != NULL) counters_->::data::CounterProto::Clear();
    }
    if (has_relations()) {
      if (relations_ != NULL) relations_->::data::RelationProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.UserBinary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .data.CounterProto counters = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relations;
        break;
      }

      // optional .data.RelationProto relations = 3;
      case 3: {
        if (tag == 26) {
         parse_relations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.UserBinary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.UserBinary)
  return false;
#undef DO_
}

void UserBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.UserBinary)
  // optional .data.CounterProto counters = 1;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->counters_, output);
  }

  // optional .data.RelationProto relations = 3;
  if (has_relations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relations_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.UserBinary)
}

::google::protobuf::uint8* UserBinary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.UserBinary)
  // optional .data.CounterProto counters = 1;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->counters_, false, target);
  }

  // optional .data.RelationProto relations = 3;
  if (has_relations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->relations_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.UserBinary)
  return target;
}

int UserBinary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.UserBinary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .data.CounterProto counters = 1;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->counters_);
    }

    // optional .data.RelationProto relations = 3;
    if (has_relations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relations_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBinary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UserBinary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBinary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.UserBinary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.UserBinary)
    MergeFrom(*source);
  }
}

void UserBinary::MergeFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counters()) {
      mutable_counters()->::data::CounterProto::MergeFrom(from.counters());
    }
    if (from.has_relations()) {
      mutable_relations()->::data::RelationProto::MergeFrom(from.relations());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserBinary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBinary::CopyFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBinary::IsInitialized() const {

  return true;
}

void UserBinary::Swap(UserBinary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBinary::InternalSwap(UserBinary* other) {
  std::swap(counters_, other->counters_);
  std::swap(relations_, other->relations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBinary_descriptor_;
  metadata.reflection = UserBinary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBinary

// optional .data.CounterProto counters = 1;
bool UserBinary::has_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserBinary::set_has_counters() {
  _has_bits_[0] |= 0x00000001u;
}
void UserBinary::clear_has_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserBinary::clear_counters() {
  if (counters_ != NULL) counters_->::data::CounterProto::Clear();
  clear_has_counters();
}
const ::data::CounterProto& UserBinary::counters() const {
  // @@protoc_insertion_point(field_get:data.UserBinary.counters)
  return counters_ != NULL ? *counters_ : *default_instance_->counters_;
}
::data::CounterProto* UserBinary::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::data::CounterProto;
  }
  // @@protoc_insertion_point(field_mutable:data.UserBinary.counters)
  return counters_;
}
::data::CounterProto* UserBinary::release_counters() {
  // @@protoc_insertion_point(field_release:data.UserBinary.counters)
  clear_has_counters();
  ::data::CounterProto* temp = counters_;
  counters_ = NULL;
  return temp;
}
void UserBinary::set_allocated_counters(::data::CounterProto* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserBinary.counters)
}

// optional .data.RelationProto relations = 3;
bool UserBinary::has_relations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserBinary::set_has_relations() {
  _has_bits_[0] |= 0x00000002u;
}
void UserBinary::clear_has_relations() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserBinary::clear_relations() {
  if (relations_ != NULL) relations_->::data::RelationProto::Clear();
  clear_has_relations();
}
const ::data::RelationProto& UserBinary::relations() const {
  // @@protoc_insertion_point(field_get:data.UserBinary.relations)
  return relations_ != NULL ? *relations_ : *default_instance_->relations_;
}
::data::RelationProto* UserBinary::mutable_relations() {
  set_has_relations();
  if (relations_ == NULL) {
    relations_ = new ::data::RelationProto;
  }
  // @@protoc_insertion_point(field_mutable:data.UserBinary.relations)
  return relations_;
}
::data::RelationProto* UserBinary::release_relations() {
  // @@protoc_insertion_point(field_release:data.UserBinary.relations)
  clear_has_relations();
  ::data::RelationProto* temp = relations_;
  relations_ = NULL;
  return temp;
}
void UserBinary::set_allocated_relations(::data::RelationProto* relations) {
  delete relations_;
  relations_ = relations;
  if (relations) {
    set_has_relations();
  } else {
    clear_has_relations();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserBinary.relations)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsUser::kCharIdFieldNumber;
const int WsUser::kAccountIdFieldNumber;
const int WsUser::kNameFieldNumber;
const int WsUser::kTypeFieldNumber;
const int WsUser::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsUser::WsUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.WsUser)
}

void WsUser::InitAsDefaultInstance() {
}

WsUser::WsUser(const WsUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.WsUser)
}

void WsUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  char_id_ = GOOGLE_LONGLONG(0);
  account_id_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsUser::~WsUser() {
  // @@protoc_insertion_point(destructor:data.WsUser)
  SharedDtor();
}

void WsUser::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WsUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsUser_descriptor_;
}

const WsUser& WsUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

WsUser* WsUser::default_instance_ = NULL;

WsUser* WsUser::New(::google::protobuf::Arena* arena) const {
  WsUser* n = new WsUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WsUser::Clear() {
// @@protoc_insertion_point(message_clear_start:data.WsUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WsUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WsUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(char_id_, account_id_);
    ZR_(type_, level_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WsUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.WsUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 char_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional int64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.WsUser.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.WsUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.WsUser)
  return false;
#undef DO_
}

void WsUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->char_id(), output);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->account_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.WsUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.WsUser)
}

::google::protobuf::uint8* WsUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->char_id(), target);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->account_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.WsUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.WsUser)
  return target;
}

int WsUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.WsUser)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->char_id());
    }

    // optional int64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WsUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WsUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.WsUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.WsUser)
    MergeFrom(*source);
  }
}

void WsUser::MergeFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WsUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsUser::CopyFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsUser::IsInitialized() const {

  return true;
}

void WsUser::Swap(WsUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsUser::InternalSwap(WsUser* other) {
  std::swap(char_id_, other->char_id_);
  std::swap(account_id_, other->account_id_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WsUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsUser_descriptor_;
  metadata.reflection = WsUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WsUser

// optional int64 char_id = 1;
bool WsUser::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WsUser::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WsUser::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WsUser::clear_char_id() {
  char_id_ = GOOGLE_LONGLONG(0);
  clear_has_char_id();
}
 ::google::protobuf::int64 WsUser::char_id() const {
  // @@protoc_insertion_point(field_get:data.WsUser.char_id)
  return char_id_;
}
 void WsUser::set_char_id(::google::protobuf::int64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.char_id)
}

// optional int64 account_id = 2;
bool WsUser::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WsUser::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void WsUser::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void WsUser::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
 ::google::protobuf::int64 WsUser::account_id() const {
  // @@protoc_insertion_point(field_get:data.WsUser.account_id)
  return account_id_;
}
 void WsUser::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.account_id)
}

// optional string name = 3;
bool WsUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WsUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void WsUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void WsUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& WsUser::name() const {
  // @@protoc_insertion_point(field_get:data.WsUser.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.WsUser.name)
}
 void WsUser::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.WsUser.name)
}
 void WsUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.WsUser.name)
}
 ::std::string* WsUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.WsUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WsUser::release_name() {
  // @@protoc_insertion_point(field_release:data.WsUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.WsUser.name)
}

// optional int32 type = 4;
bool WsUser::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WsUser::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void WsUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void WsUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WsUser::type() const {
  // @@protoc_insertion_point(field_get:data.WsUser.type)
  return type_;
}
 void WsUser::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.type)
}

// optional int32 level = 5;
bool WsUser::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WsUser::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void WsUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void WsUser::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 WsUser::level() const {
  // @@protoc_insertion_point(field_get:data.WsUser.level)
  return level_;
}
 void WsUser::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryWsUserProto::kUserListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryWsUserProto::QueryWsUserProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryWsUserProto)
}

void QueryWsUserProto::InitAsDefaultInstance() {
}

QueryWsUserProto::QueryWsUserProto(const QueryWsUserProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryWsUserProto)
}

void QueryWsUserProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryWsUserProto::~QueryWsUserProto() {
  // @@protoc_insertion_point(destructor:data.QueryWsUserProto)
  SharedDtor();
}

void QueryWsUserProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryWsUserProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryWsUserProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryWsUserProto_descriptor_;
}

const QueryWsUserProto& QueryWsUserProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryWsUserProto* QueryWsUserProto::default_instance_ = NULL;

QueryWsUserProto* QueryWsUserProto::New(::google::protobuf::Arena* arena) const {
  QueryWsUserProto* n = new QueryWsUserProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryWsUserProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryWsUserProto)
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryWsUserProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryWsUserProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.WorldUserInfo user_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryWsUserProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryWsUserProto)
  return false;
#undef DO_
}

void QueryWsUserProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryWsUserProto)
  // repeated .data.WorldUserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryWsUserProto)
}

::google::protobuf::uint8* QueryWsUserProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryWsUserProto)
  // repeated .data.WorldUserInfo user_list = 1;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->user_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryWsUserProto)
  return target;
}

int QueryWsUserProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryWsUserProto)
  int total_size = 0;

  // repeated .data.WorldUserInfo user_list = 1;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryWsUserProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryWsUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryWsUserProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryWsUserProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryWsUserProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryWsUserProto)
    MergeFrom(*source);
  }
}

void QueryWsUserProto::MergeFrom(const QueryWsUserProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryWsUserProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  user_list_.MergeFrom(from.user_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryWsUserProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryWsUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryWsUserProto::CopyFrom(const QueryWsUserProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryWsUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryWsUserProto::IsInitialized() const {

  return true;
}

void QueryWsUserProto::Swap(QueryWsUserProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryWsUserProto::InternalSwap(QueryWsUserProto* other) {
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryWsUserProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryWsUserProto_descriptor_;
  metadata.reflection = QueryWsUserProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryWsUserProto

// repeated .data.WorldUserInfo user_list = 1;
int QueryWsUserProto::user_list_size() const {
  return user_list_.size();
}
void QueryWsUserProto::clear_user_list() {
  user_list_.Clear();
}
const ::data::WorldUserInfo& QueryWsUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryWsUserProto.user_list)
  return user_list_.Get(index);
}
::data::WorldUserInfo* QueryWsUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryWsUserProto.user_list)
  return user_list_.Mutable(index);
}
::data::WorldUserInfo* QueryWsUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryWsUserProto.user_list)
  return user_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >*
QueryWsUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryWsUserProto.user_list)
  return &user_list_;
}
const ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >&
QueryWsUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryWsUserProto.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserMaxIDProto::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserMaxIDProto::QueryUserMaxIDProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryUserMaxIDProto)
}

void QueryUserMaxIDProto::InitAsDefaultInstance() {
}

QueryUserMaxIDProto::QueryUserMaxIDProto(const QueryUserMaxIDProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryUserMaxIDProto)
}

void QueryUserMaxIDProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserMaxIDProto::~QueryUserMaxIDProto() {
  // @@protoc_insertion_point(destructor:data.QueryUserMaxIDProto)
  SharedDtor();
}

void QueryUserMaxIDProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserMaxIDProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserMaxIDProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserMaxIDProto_descriptor_;
}

const QueryUserMaxIDProto& QueryUserMaxIDProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryUserMaxIDProto* QueryUserMaxIDProto::default_instance_ = NULL;

QueryUserMaxIDProto* QueryUserMaxIDProto::New(::google::protobuf::Arena* arena) const {
  QueryUserMaxIDProto* n = new QueryUserMaxIDProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserMaxIDProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryUserMaxIDProto)
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUserMaxIDProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryUserMaxIDProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryUserMaxIDProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryUserMaxIDProto)
  return false;
#undef DO_
}

void QueryUserMaxIDProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryUserMaxIDProto)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryUserMaxIDProto)
}

::google::protobuf::uint8* QueryUserMaxIDProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryUserMaxIDProto)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryUserMaxIDProto)
  return target;
}

int QueryUserMaxIDProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryUserMaxIDProto)
  int total_size = 0;

  // optional uint64 ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserMaxIDProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryUserMaxIDProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUserMaxIDProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserMaxIDProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryUserMaxIDProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryUserMaxIDProto)
    MergeFrom(*source);
  }
}

void QueryUserMaxIDProto::MergeFrom(const QueryUserMaxIDProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryUserMaxIDProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUserMaxIDProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryUserMaxIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserMaxIDProto::CopyFrom(const QueryUserMaxIDProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryUserMaxIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserMaxIDProto::IsInitialized() const {

  return true;
}

void QueryUserMaxIDProto::Swap(QueryUserMaxIDProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserMaxIDProto::InternalSwap(QueryUserMaxIDProto* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserMaxIDProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserMaxIDProto_descriptor_;
  metadata.reflection = QueryUserMaxIDProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserMaxIDProto

// optional uint64 ID = 1;
bool QueryUserMaxIDProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryUserMaxIDProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryUserMaxIDProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryUserMaxIDProto::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 QueryUserMaxIDProto::id() const {
  // @@protoc_insertion_point(field_get:data.QueryUserMaxIDProto.ID)
  return id_;
}
 void QueryUserMaxIDProto::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.QueryUserMaxIDProto.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserDataProto::kIDFieldNumber;
const int QueryUserDataProto::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserDataProto::QueryUserDataProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryUserDataProto)
}

void QueryUserDataProto::InitAsDefaultInstance() {
  user_ = const_cast< ::data::UserInfo*>(&::data::UserInfo::default_instance());
}

QueryUserDataProto::QueryUserDataProto(const QueryUserDataProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryUserDataProto)
}

void QueryUserDataProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserDataProto::~QueryUserDataProto() {
  // @@protoc_insertion_point(destructor:data.QueryUserDataProto)
  SharedDtor();
}

void QueryUserDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void QueryUserDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserDataProto_descriptor_;
}

const QueryUserDataProto& QueryUserDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryUserDataProto* QueryUserDataProto::default_instance_ = NULL;

QueryUserDataProto* QueryUserDataProto::New(::google::protobuf::Arena* arena) const {
  QueryUserDataProto* n = new QueryUserDataProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryUserDataProto)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != NULL) user_->::data::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryUserDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryUserDataProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .data.UserInfo user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryUserDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryUserDataProto)
  return false;
#undef DO_
}

void QueryUserDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryUserDataProto)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .data.UserInfo user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryUserDataProto)
}

::google::protobuf::uint8* QueryUserDataProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryUserDataProto)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .data.UserInfo user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryUserDataProto)
  return target;
}

int QueryUserDataProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryUserDataProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .data.UserInfo user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->user_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserDataProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryUserDataProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryUserDataProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserDataProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryUserDataProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryUserDataProto)
    MergeFrom(*source);
  }
}

void QueryUserDataProto::MergeFrom(const QueryUserDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryUserDataProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user()) {
      mutable_user()->::data::UserInfo::MergeFrom(from.user());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryUserDataProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryUserDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserDataProto::CopyFrom(const QueryUserDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryUserDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserDataProto::IsInitialized() const {

  return true;
}

void QueryUserDataProto::Swap(QueryUserDataProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserDataProto::InternalSwap(QueryUserDataProto* other) {
  std::swap(id_, other->id_);
  std::swap(user_, other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserDataProto_descriptor_;
  metadata.reflection = QueryUserDataProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserDataProto

// optional uint64 ID = 1;
bool QueryUserDataProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryUserDataProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryUserDataProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryUserDataProto::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 QueryUserDataProto::id() const {
  // @@protoc_insertion_point(field_get:data.QueryUserDataProto.ID)
  return id_;
}
 void QueryUserDataProto::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.QueryUserDataProto.ID)
}

// optional .data.UserInfo user = 2;
bool QueryUserDataProto::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryUserDataProto::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryUserDataProto::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryUserDataProto::clear_user() {
  if (user_ != NULL) user_->::data::UserInfo::Clear();
  clear_has_user();
}
const ::data::UserInfo& QueryUserDataProto::user() const {
  // @@protoc_insertion_point(field_get:data.QueryUserDataProto.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::data::UserInfo* QueryUserDataProto::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::data::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:data.QueryUserDataProto.user)
  return user_;
}
::data::UserInfo* QueryUserDataProto::release_user() {
  // @@protoc_insertion_point(field_release:data.QueryUserDataProto.user)
  clear_has_user();
  ::data::UserInfo* temp = user_;
  user_ = NULL;
  return temp;
}
void QueryUserDataProto::set_allocated_user(::data::UserInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:data.QueryUserDataProto.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryAccountProto::kAccountListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAccountProto::QueryAccountProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.QueryAccountProto)
}

void QueryAccountProto::InitAsDefaultInstance() {
}

QueryAccountProto::QueryAccountProto(const QueryAccountProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.QueryAccountProto)
}

void QueryAccountProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAccountProto::~QueryAccountProto() {
  // @@protoc_insertion_point(destructor:data.QueryAccountProto)
  SharedDtor();
}

void QueryAccountProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAccountProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAccountProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAccountProto_descriptor_;
}

const QueryAccountProto& QueryAccountProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

QueryAccountProto* QueryAccountProto::default_instance_ = NULL;

QueryAccountProto* QueryAccountProto::New(::google::protobuf::Arena* arena) const {
  QueryAccountProto* n = new QueryAccountProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAccountProto::Clear() {
// @@protoc_insertion_point(message_clear_start:data.QueryAccountProto)
  account_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool QueryAccountProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.QueryAccountProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.AccountWxInfo account_list = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_account_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_account_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_account_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.QueryAccountProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.QueryAccountProto)
  return false;
#undef DO_
}

void QueryAccountProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.QueryAccountProto)
  // repeated .data.AccountWxInfo account_list = 3;
  for (unsigned int i = 0, n = this->account_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.QueryAccountProto)
}

::google::protobuf::uint8* QueryAccountProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.QueryAccountProto)
  // repeated .data.AccountWxInfo account_list = 3;
  for (unsigned int i = 0, n = this->account_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->account_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.QueryAccountProto)
  return target;
}

int QueryAccountProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.QueryAccountProto)
  int total_size = 0;

  // repeated .data.AccountWxInfo account_list = 3;
  total_size += 1 * this->account_list_size();
  for (int i = 0; i < this->account_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAccountProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.QueryAccountProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const QueryAccountProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAccountProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.QueryAccountProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.QueryAccountProto)
    MergeFrom(*source);
  }
}

void QueryAccountProto::MergeFrom(const QueryAccountProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.QueryAccountProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  account_list_.MergeFrom(from.account_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void QueryAccountProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.QueryAccountProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAccountProto::CopyFrom(const QueryAccountProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.QueryAccountProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAccountProto::IsInitialized() const {

  return true;
}

void QueryAccountProto::Swap(QueryAccountProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAccountProto::InternalSwap(QueryAccountProto* other) {
  account_list_.UnsafeArenaSwap(&other->account_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAccountProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAccountProto_descriptor_;
  metadata.reflection = QueryAccountProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAccountProto

// repeated .data.AccountWxInfo account_list = 3;
int QueryAccountProto::account_list_size() const {
  return account_list_.size();
}
void QueryAccountProto::clear_account_list() {
  account_list_.Clear();
}
const ::data::AccountWxInfo& QueryAccountProto::account_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryAccountProto.account_list)
  return account_list_.Get(index);
}
::data::AccountWxInfo* QueryAccountProto::mutable_account_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryAccountProto.account_list)
  return account_list_.Mutable(index);
}
::data::AccountWxInfo* QueryAccountProto::add_account_list() {
  // @@protoc_insertion_point(field_add:data.QueryAccountProto.account_list)
  return account_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >*
QueryAccountProto::mutable_account_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryAccountProto.account_list)
  return &account_list_;
}
const ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >&
QueryAccountProto::account_list() const {
  // @@protoc_insertion_point(field_list:data.QueryAccountProto.account_list)
  return account_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountWxInfo::kOpenidFieldNumber;
const int AccountWxInfo::kNicknameFieldNumber;
const int AccountWxInfo::kSexFieldNumber;
const int AccountWxInfo::kProvinceFieldNumber;
const int AccountWxInfo::kCityFieldNumber;
const int AccountWxInfo::kCountryFieldNumber;
const int AccountWxInfo::kHeadimgurlFieldNumber;
const int AccountWxInfo::kUnionidFieldNumber;
const int AccountWxInfo::kWxtokenFieldNumber;
const int AccountWxInfo::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountWxInfo::AccountWxInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.AccountWxInfo)
}

void AccountWxInfo::InitAsDefaultInstance() {
}

AccountWxInfo::AccountWxInfo(const AccountWxInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.AccountWxInfo)
}

void AccountWxInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  openid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountWxInfo::~AccountWxInfo() {
  // @@protoc_insertion_point(destructor:data.AccountWxInfo)
  SharedDtor();
}

void AccountWxInfo::SharedDtor() {
  openid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wxtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AccountWxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountWxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountWxInfo_descriptor_;
}

const AccountWxInfo& AccountWxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

AccountWxInfo* AccountWxInfo::default_instance_ = NULL;

AccountWxInfo* AccountWxInfo::New(::google::protobuf::Arena* arena) const {
  AccountWxInfo* n = new AccountWxInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountWxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data.AccountWxInfo)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_openid()) {
      openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_nickname()) {
      nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sex_ = 0;
    if (has_province()) {
      province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_city()) {
      city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_headimgurl()) {
      headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_unionid()) {
      unionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    if (has_wxtoken()) {
      wxtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AccountWxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.AccountWxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // optional int32 sex = 3;
      case 3: {
        if (tag == 24) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_province;
        break;
      }

      // optional string province = 4;
      case 4: {
        if (tag == 34) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_city;
        break;
      }

      // optional string city = 5;
      case 5: {
        if (tag == 42) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_country;
        break;
      }

      // optional string country = 6;
      case 6: {
        if (tag == 50) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headimgurl;
        break;
      }

      // optional string headimgurl = 7;
      case 7: {
        if (tag == 58) {
         parse_headimgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.headimgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unionid;
        break;
      }

      // optional string unionid = 8;
      case 8: {
        if (tag == 66) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wxtoken;
        break;
      }

      // optional string wxtoken = 9;
      case 9: {
        if (tag == 74) {
         parse_wxtoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wxtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wxtoken().data(), this->wxtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.wxtoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ip;
        break;
      }

      // optional string ip = 10;
      case 10: {
        if (tag == 82) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data.AccountWxInfo.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.AccountWxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.AccountWxInfo)
  return false;
#undef DO_
}

void AccountWxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.AccountWxInfo)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->province(), output);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->city(), output);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->country(), output);
  }

  // optional string headimgurl = 7;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.headimgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->headimgurl(), output);
  }

  // optional string unionid = 8;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->unionid(), output);
  }

  // optional string wxtoken = 9;
  if (has_wxtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxtoken().data(), this->wxtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.wxtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->wxtoken(), output);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.AccountWxInfo)
}

::google::protobuf::uint8* AccountWxInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.AccountWxInfo)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // optional string province = 4;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->province(), target);
  }

  // optional string city = 5;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->city(), target);
  }

  // optional string country = 6;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->country(), target);
  }

  // optional string headimgurl = 7;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.headimgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->headimgurl(), target);
  }

  // optional string unionid = 8;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->unionid(), target);
  }

  // optional string wxtoken = 9;
  if (has_wxtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wxtoken().data(), this->wxtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.wxtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wxtoken(), target);
  }

  // optional string ip = 10;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data.AccountWxInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.AccountWxInfo)
  return target;
}

int AccountWxInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.AccountWxInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string province = 4;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 5;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string country = 6;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string headimgurl = 7;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional string unionid = 8;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional string wxtoken = 9;
    if (has_wxtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wxtoken());
    }

    // optional string ip = 10;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountWxInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.AccountWxInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AccountWxInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountWxInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.AccountWxInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.AccountWxInfo)
    MergeFrom(*source);
  }
}

void AccountWxInfo::MergeFrom(const AccountWxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.AccountWxInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_has_openid();
      openid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.openid_);
    }
    if (from.has_nickname()) {
      set_has_nickname();
      nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_province()) {
      set_has_province();
      province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
    }
    if (from.has_city()) {
      set_has_city();
      city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (from.has_headimgurl()) {
      set_has_headimgurl();
      headimgurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headimgurl_);
    }
    if (from.has_unionid()) {
      set_has_unionid();
      unionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unionid_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wxtoken()) {
      set_has_wxtoken();
      wxtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wxtoken_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AccountWxInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.AccountWxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountWxInfo::CopyFrom(const AccountWxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.AccountWxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountWxInfo::IsInitialized() const {

  return true;
}

void AccountWxInfo::Swap(AccountWxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountWxInfo::InternalSwap(AccountWxInfo* other) {
  openid_.Swap(&other->openid_);
  nickname_.Swap(&other->nickname_);
  std::swap(sex_, other->sex_);
  province_.Swap(&other->province_);
  city_.Swap(&other->city_);
  country_.Swap(&other->country_);
  headimgurl_.Swap(&other->headimgurl_);
  unionid_.Swap(&other->unionid_);
  wxtoken_.Swap(&other->wxtoken_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountWxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountWxInfo_descriptor_;
  metadata.reflection = AccountWxInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountWxInfo

// optional string openid = 1;
bool AccountWxInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountWxInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountWxInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountWxInfo::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
 const ::std::string& AccountWxInfo::openid() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.openid)
}
 void AccountWxInfo::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.openid)
}
 void AccountWxInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.openid)
}
 ::std::string* AccountWxInfo::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_openid() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.openid)
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.openid)
}

// optional string nickname = 2;
bool AccountWxInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AccountWxInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
void AccountWxInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
void AccountWxInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
 const ::std::string& AccountWxInfo::nickname() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.nickname)
}
 void AccountWxInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.nickname)
}
 void AccountWxInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.nickname)
}
 ::std::string* AccountWxInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.nickname)
}

// optional int32 sex = 3;
bool AccountWxInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AccountWxInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
void AccountWxInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
void AccountWxInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
 ::google::protobuf::int32 AccountWxInfo::sex() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.sex)
  return sex_;
}
 void AccountWxInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.sex)
}

// optional string province = 4;
bool AccountWxInfo::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AccountWxInfo::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
void AccountWxInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
void AccountWxInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
 const ::std::string& AccountWxInfo::province() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.province)
}
 void AccountWxInfo::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.province)
}
 void AccountWxInfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.province)
}
 ::std::string* AccountWxInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_province() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.province)
}

// optional string city = 5;
bool AccountWxInfo::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AccountWxInfo::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
void AccountWxInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
void AccountWxInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
 const ::std::string& AccountWxInfo::city() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.city)
}
 void AccountWxInfo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.city)
}
 void AccountWxInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.city)
}
 ::std::string* AccountWxInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_city() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.city)
}

// optional string country = 6;
bool AccountWxInfo::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AccountWxInfo::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
void AccountWxInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
void AccountWxInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& AccountWxInfo::country() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.country)
}
 void AccountWxInfo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.country)
}
 void AccountWxInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.country)
}
 ::std::string* AccountWxInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_country() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.country)
}

// optional string headimgurl = 7;
bool AccountWxInfo::has_headimgurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AccountWxInfo::set_has_headimgurl() {
  _has_bits_[0] |= 0x00000040u;
}
void AccountWxInfo::clear_has_headimgurl() {
  _has_bits_[0] &= ~0x00000040u;
}
void AccountWxInfo::clear_headimgurl() {
  headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgurl();
}
 const ::std::string& AccountWxInfo::headimgurl() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.headimgurl)
  return headimgurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_headimgurl(const ::std::string& value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.headimgurl)
}
 void AccountWxInfo::set_headimgurl(const char* value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.headimgurl)
}
 void AccountWxInfo::set_headimgurl(const char* value, size_t size) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.headimgurl)
}
 ::std::string* AccountWxInfo::mutable_headimgurl() {
  set_has_headimgurl();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.headimgurl)
  return headimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_headimgurl() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.headimgurl)
  clear_has_headimgurl();
  return headimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl != NULL) {
    set_has_headimgurl();
  } else {
    clear_has_headimgurl();
  }
  headimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgurl);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.headimgurl)
}

// optional string unionid = 8;
bool AccountWxInfo::has_unionid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AccountWxInfo::set_has_unionid() {
  _has_bits_[0] |= 0x00000080u;
}
void AccountWxInfo::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000080u;
}
void AccountWxInfo::clear_unionid() {
  unionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unionid();
}
 const ::std::string& AccountWxInfo::unionid() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.unionid)
  return unionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_unionid(const ::std::string& value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.unionid)
}
 void AccountWxInfo::set_unionid(const char* value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.unionid)
}
 void AccountWxInfo::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.unionid)
}
 ::std::string* AccountWxInfo::mutable_unionid() {
  set_has_unionid();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.unionid)
  return unionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_unionid() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.unionid)
  clear_has_unionid();
  return unionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_unionid(::std::string* unionid) {
  if (unionid != NULL) {
    set_has_unionid();
  } else {
    clear_has_unionid();
  }
  unionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unionid);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.unionid)
}

// optional string wxtoken = 9;
bool AccountWxInfo::has_wxtoken() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AccountWxInfo::set_has_wxtoken() {
  _has_bits_[0] |= 0x00000100u;
}
void AccountWxInfo::clear_has_wxtoken() {
  _has_bits_[0] &= ~0x00000100u;
}
void AccountWxInfo::clear_wxtoken() {
  wxtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxtoken();
}
 const ::std::string& AccountWxInfo::wxtoken() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.wxtoken)
  return wxtoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_wxtoken(const ::std::string& value) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.wxtoken)
}
 void AccountWxInfo::set_wxtoken(const char* value) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.wxtoken)
}
 void AccountWxInfo::set_wxtoken(const char* value, size_t size) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.wxtoken)
}
 ::std::string* AccountWxInfo::mutable_wxtoken() {
  set_has_wxtoken();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.wxtoken)
  return wxtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_wxtoken() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.wxtoken)
  clear_has_wxtoken();
  return wxtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_wxtoken(::std::string* wxtoken) {
  if (wxtoken != NULL) {
    set_has_wxtoken();
  } else {
    clear_has_wxtoken();
  }
  wxtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxtoken);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.wxtoken)
}

// optional string ip = 10;
bool AccountWxInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AccountWxInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
void AccountWxInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
void AccountWxInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& AccountWxInfo::ip() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.ip)
}
 void AccountWxInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.ip)
}
 void AccountWxInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.ip)
}
 ::std::string* AccountWxInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccountWxInfo::release_ip() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccountWxInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccountBin::kTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccountBin::AccountBin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.AccountBin)
}

void AccountBin::InitAsDefaultInstance() {
}

AccountBin::AccountBin(const AccountBin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.AccountBin)
}

void AccountBin::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBin::~AccountBin() {
  // @@protoc_insertion_point(destructor:data.AccountBin)
  SharedDtor();
}

void AccountBin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountBin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBin_descriptor_;
}

const AccountBin& AccountBin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

AccountBin* AccountBin::default_instance_ = NULL;

AccountBin* AccountBin::New(::google::protobuf::Arena* arena) const {
  AccountBin* n = new AccountBin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccountBin::Clear() {
// @@protoc_insertion_point(message_clear_start:data.AccountBin)
  test_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AccountBin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.AccountBin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Test = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.AccountBin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.AccountBin)
  return false;
#undef DO_
}

void AccountBin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.AccountBin)
  // optional uint32 Test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->test(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.AccountBin)
}

::google::protobuf::uint8* AccountBin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.AccountBin)
  // optional uint32 Test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->test(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.AccountBin)
  return target;
}

int AccountBin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.AccountBin)
  int total_size = 0;

  // optional uint32 Test = 1;
  if (has_test()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->test());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountBin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.AccountBin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AccountBin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccountBin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.AccountBin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.AccountBin)
    MergeFrom(*source);
  }
}

void AccountBin::MergeFrom(const AccountBin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.AccountBin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AccountBin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.AccountBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBin::CopyFrom(const AccountBin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.AccountBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBin::IsInitialized() const {

  return true;
}

void AccountBin::Swap(AccountBin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccountBin::InternalSwap(AccountBin* other) {
  std::swap(test_, other->test_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccountBin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBin_descriptor_;
  metadata.reflection = AccountBin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccountBin

// optional uint32 Test = 1;
bool AccountBin::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AccountBin::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
void AccountBin::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
void AccountBin::clear_test() {
  test_ = 0u;
  clear_has_test();
}
 ::google::protobuf::uint32 AccountBin::test() const {
  // @@protoc_insertion_point(field_get:data.AccountBin.Test)
  return test_;
}
 void AccountBin::set_test(::google::protobuf::uint32 value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:data.AccountBin.Test)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GateUserInfo::kIDFieldNumber;
const int GateUserInfo::kFepserveridFieldNumber;
const int GateUserInfo::kSsservieridFieldNumber;
const int GateUserInfo::kSessionidFieldNumber;
const int GateUserInfo::kCountryidFieldNumber;
const int GateUserInfo::kMapidFieldNumber;
const int GateUserInfo::kSceneidFieldNumber;
const int GateUserInfo::kZoneidFieldNumber;
const int GateUserInfo::kPosXFieldNumber;
const int GateUserInfo::kPosYFieldNumber;
const int GateUserInfo::kTeamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GateUserInfo::GateUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data.GateUserInfo)
}

void GateUserInfo::InitAsDefaultInstance() {
}

GateUserInfo::GateUserInfo(const GateUserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:data.GateUserInfo)
}

void GateUserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  fepserverid_ = 0u;
  ssservierid_ = 0u;
  sessionid_ = GOOGLE_ULONGLONG(0);
  countryid_ = 0u;
  mapid_ = 0u;
  sceneid_ = 0u;
  zoneid_ = 0u;
  pos_x_ = 0u;
  pos_y_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GateUserInfo::~GateUserInfo() {
  // @@protoc_insertion_point(destructor:data.GateUserInfo)
  SharedDtor();
}

void GateUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GateUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GateUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GateUserInfo_descriptor_;
}

const GateUserInfo& GateUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fdata_2eproto();
  return *default_instance_;
}

GateUserInfo* GateUserInfo::default_instance_ = NULL;

GateUserInfo* GateUserInfo::New(::google::protobuf::Arena* arena) const {
  GateUserInfo* n = new GateUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GateUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:data.GateUserInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GateUserInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GateUserInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, zoneid_);
  }
  ZR_(pos_x_, teamid_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GateUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:data.GateUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fepserverid;
        break;
      }

      // optional uint32 fepserverid = 2;
      case 2: {
        if (tag == 16) {
         parse_fepserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fepserverid_)));
          set_has_fepserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ssservierid;
        break;
      }

      // optional uint32 ssservierid = 3;
      case 3: {
        if (tag == 24) {
         parse_ssservierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssservierid_)));
          set_has_ssservierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessionid;
        break;
      }

      // optional uint64 sessionid = 4;
      case 4: {
        if (tag == 32) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_countryid;
        break;
      }

      // optional uint32 countryid = 5;
      case 5: {
        if (tag == 40) {
         parse_countryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 6;
      case 6: {
        if (tag == 48) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 7;
      case 7: {
        if (tag == 56) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 8;
      case 8: {
        if (tag == 64) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pos_x;
        break;
      }

      // optional uint32 pos_x = 9;
      case 9: {
        if (tag == 72) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pos_y;
        break;
      }

      // optional uint32 pos_y = 10;
      case 10: {
        if (tag == 80) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 11;
      case 11: {
        if (tag == 88) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:data.GateUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:data.GateUserInfo)
  return false;
#undef DO_
}

void GateUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:data.GateUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 fepserverid = 2;
  if (has_fepserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fepserverid(), output);
  }

  // optional uint32 ssservierid = 3;
  if (has_ssservierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ssservierid(), output);
  }

  // optional uint64 sessionid = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sessionid(), output);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countryid(), output);
  }

  // optional uint32 mapid = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  // optional uint32 sceneid = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sceneid(), output);
  }

  // optional uint32 zoneid = 8;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zoneid(), output);
  }

  // optional uint32 pos_x = 9;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos_x(), output);
  }

  // optional uint32 pos_y = 10;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pos_y(), output);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:data.GateUserInfo)
}

::google::protobuf::uint8* GateUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:data.GateUserInfo)
  // optional uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 fepserverid = 2;
  if (has_fepserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fepserverid(), target);
  }

  // optional uint32 ssservierid = 3;
  if (has_ssservierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ssservierid(), target);
  }

  // optional uint64 sessionid = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sessionid(), target);
  }

  // optional uint32 countryid = 5;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countryid(), target);
  }

  // optional uint32 mapid = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  // optional uint32 sceneid = 7;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sceneid(), target);
  }

  // optional uint32 zoneid = 8;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zoneid(), target);
  }

  // optional uint32 pos_x = 9;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos_x(), target);
  }

  // optional uint32 pos_y = 10;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pos_y(), target);
  }

  // optional uint32 teamid = 11;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data.GateUserInfo)
  return target;
}

int GateUserInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:data.GateUserInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 fepserverid = 2;
    if (has_fepserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fepserverid());
    }

    // optional uint32 ssservierid = 3;
    if (has_ssservierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssservierid());
    }

    // optional uint64 sessionid = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sessionid());
    }

    // optional uint32 countryid = 5;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countryid());
    }

    // optional uint32 mapid = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 sceneid = 7;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional uint32 zoneid = 8;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 pos_x = 9;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_x());
    }

    // optional uint32 pos_y = 10;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_y());
    }

    // optional uint32 teamid = 11;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GateUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data.GateUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GateUserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GateUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data.GateUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data.GateUserInfo)
    MergeFrom(*source);
  }
}

void GateUserInfo::MergeFrom(const GateUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data.GateUserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fepserverid()) {
      set_fepserverid(from.fepserverid());
    }
    if (from.has_ssservierid()) {
      set_ssservierid(from.ssservierid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GateUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data.GateUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GateUserInfo::CopyFrom(const GateUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data.GateUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateUserInfo::IsInitialized() const {

  return true;
}

void GateUserInfo::Swap(GateUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GateUserInfo::InternalSwap(GateUserInfo* other) {
  std::swap(id_, other->id_);
  std::swap(fepserverid_, other->fepserverid_);
  std::swap(ssservierid_, other->ssservierid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(countryid_, other->countryid_);
  std::swap(mapid_, other->mapid_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(zoneid_, other->zoneid_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(teamid_, other->teamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GateUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GateUserInfo_descriptor_;
  metadata.reflection = GateUserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GateUserInfo

// optional uint64 ID = 1;
bool GateUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GateUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GateUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GateUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 GateUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.ID)
  return id_;
}
 void GateUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.ID)
}

// optional uint32 fepserverid = 2;
bool GateUserInfo::has_fepserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GateUserInfo::set_has_fepserverid() {
  _has_bits_[0] |= 0x00000002u;
}
void GateUserInfo::clear_has_fepserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void GateUserInfo::clear_fepserverid() {
  fepserverid_ = 0u;
  clear_has_fepserverid();
}
 ::google::protobuf::uint32 GateUserInfo::fepserverid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.fepserverid)
  return fepserverid_;
}
 void GateUserInfo::set_fepserverid(::google::protobuf::uint32 value) {
  set_has_fepserverid();
  fepserverid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.fepserverid)
}

// optional uint32 ssservierid = 3;
bool GateUserInfo::has_ssservierid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GateUserInfo::set_has_ssservierid() {
  _has_bits_[0] |= 0x00000004u;
}
void GateUserInfo::clear_has_ssservierid() {
  _has_bits_[0] &= ~0x00000004u;
}
void GateUserInfo::clear_ssservierid() {
  ssservierid_ = 0u;
  clear_has_ssservierid();
}
 ::google::protobuf::uint32 GateUserInfo::ssservierid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.ssservierid)
  return ssservierid_;
}
 void GateUserInfo::set_ssservierid(::google::protobuf::uint32 value) {
  set_has_ssservierid();
  ssservierid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.ssservierid)
}

// optional uint64 sessionid = 4;
bool GateUserInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GateUserInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
void GateUserInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
void GateUserInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
 ::google::protobuf::uint64 GateUserInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.sessionid)
  return sessionid_;
}
 void GateUserInfo::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.sessionid)
}

// optional uint32 countryid = 5;
bool GateUserInfo::has_countryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GateUserInfo::set_has_countryid() {
  _has_bits_[0] |= 0x00000010u;
}
void GateUserInfo::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000010u;
}
void GateUserInfo::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
 ::google::protobuf::uint32 GateUserInfo::countryid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.countryid)
  return countryid_;
}
 void GateUserInfo::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.countryid)
}

// optional uint32 mapid = 6;
bool GateUserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GateUserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
void GateUserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
void GateUserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
 ::google::protobuf::uint32 GateUserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.mapid)
  return mapid_;
}
 void GateUserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.mapid)
}

// optional uint32 sceneid = 7;
bool GateUserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GateUserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
void GateUserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
void GateUserInfo::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
 ::google::protobuf::uint32 GateUserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.sceneid)
  return sceneid_;
}
 void GateUserInfo::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.sceneid)
}

// optional uint32 zoneid = 8;
bool GateUserInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GateUserInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000080u;
}
void GateUserInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
void GateUserInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
 ::google::protobuf::uint32 GateUserInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.zoneid)
  return zoneid_;
}
 void GateUserInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.zoneid)
}

// optional uint32 pos_x = 9;
bool GateUserInfo::has_pos_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GateUserInfo::set_has_pos_x() {
  _has_bits_[0] |= 0x00000100u;
}
void GateUserInfo::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000100u;
}
void GateUserInfo::clear_pos_x() {
  pos_x_ = 0u;
  clear_has_pos_x();
}
 ::google::protobuf::uint32 GateUserInfo::pos_x() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.pos_x)
  return pos_x_;
}
 void GateUserInfo::set_pos_x(::google::protobuf::uint32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.pos_x)
}

// optional uint32 pos_y = 10;
bool GateUserInfo::has_pos_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GateUserInfo::set_has_pos_y() {
  _has_bits_[0] |= 0x00000200u;
}
void GateUserInfo::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000200u;
}
void GateUserInfo::clear_pos_y() {
  pos_y_ = 0u;
  clear_has_pos_y();
}
 ::google::protobuf::uint32 GateUserInfo::pos_y() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.pos_y)
  return pos_y_;
}
 void GateUserInfo::set_pos_y(::google::protobuf::uint32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.pos_y)
}

// optional uint32 teamid = 11;
bool GateUserInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GateUserInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000400u;
}
void GateUserInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000400u;
}
void GateUserInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
 ::google::protobuf::uint32 GateUserInfo::teamid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.teamid)
  return teamid_;
}
 void GateUserInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.teamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)
