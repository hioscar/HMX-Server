// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmx_data.proto

#ifndef PROTOBUF_hmx_5fdata_2eproto__INCLUDED
#define PROTOBUF_hmx_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hmx_5fdata_2eproto();
void protobuf_AssignDesc_hmx_5fdata_2eproto();
void protobuf_ShutdownFile_hmx_5fdata_2eproto();

class AccountBin;
class AccountWxInfo;
class Counter;
class CounterProto;
class GateUserInfo;
class MsgObject;
class OfflineUserInfo;
class QueryAccountProto;
class QueryOfflineUserProto;
class QueryUserDataProto;
class QueryUserMaxIDProto;
class QueryUserProto;
class QueryWsUserProto;
class RelChatMsg;
class RelChatProto;
class Relation;
class RelationProto;
class UserBin;
class UserBinary;
class UserInfo;
class WorldUserInfo;
class WsUser;

// ===================================================================

class QueryUserProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryUserProto) */ {
 public:
  QueryUserProto();
  virtual ~QueryUserProto();

  QueryUserProto(const QueryUserProto& from);

  inline QueryUserProto& operator=(const QueryUserProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserProto& default_instance();

  void Swap(QueryUserProto* other);

  // implements Message ----------------------------------------------

  inline QueryUserProto* New() const { return New(NULL); }

  QueryUserProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserProto& from);
  void MergeFrom(const QueryUserProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.UserInfo user_list = 1;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 1;
  const ::data::UserInfo& user_list(int index) const;
  ::data::UserInfo* mutable_user_list(int index);
  ::data::UserInfo* add_user_list();
  ::google::protobuf::RepeatedPtrField< ::data::UserInfo >*
      mutable_user_list();
  const ::google::protobuf::RepeatedPtrField< ::data::UserInfo >&
      user_list() const;

  // @@protoc_insertion_point(class_scope:data.QueryUserProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::UserInfo > user_list_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryUserProto* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 ACCID = 2;
  bool has_accid() const;
  void clear_accid();
  static const int kACCIDFieldNumber = 2;
  ::google::protobuf::uint64 accid() const;
  void set_accid(::google::protobuf::uint64 value);

  // optional string NAME = 3;
  bool has_name() const;
  void clear_name();
  static const int kNAMEFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 LEVEL = 4;
  bool has_level() const;
  void clear_level();
  static const int kLEVELFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 VIP = 5;
  bool has_vip() const;
  void clear_vip();
  static const int kVIPFieldNumber = 5;
  ::google::protobuf::uint32 vip() const;
  void set_vip(::google::protobuf::uint32 value);

  // optional uint32 STATUS = 6;
  bool has_status() const;
  void clear_status();
  static const int kSTATUSFieldNumber = 6;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint64 SCENEID = 7;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSCENEIDFieldNumber = 7;
  ::google::protobuf::uint64 sceneid() const;
  void set_sceneid(::google::protobuf::uint64 value);

  // optional uint32 MAPID = 8;
  bool has_mapid() const;
  void clear_mapid();
  static const int kMAPIDFieldNumber = 8;
  ::google::protobuf::uint32 mapid() const;
  void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 ROLETYPE = 9;
  bool has_roletype() const;
  void clear_roletype();
  static const int kROLETYPEFieldNumber = 9;
  ::google::protobuf::uint32 roletype() const;
  void set_roletype(::google::protobuf::uint32 value);

  // optional uint32 EXP = 10;
  bool has_exp() const;
  void clear_exp();
  static const int kEXPFieldNumber = 10;
  ::google::protobuf::uint32 exp() const;
  void set_exp(::google::protobuf::uint32 value);

  // optional int32 POSX = 11;
  bool has_posx() const;
  void clear_posx();
  static const int kPOSXFieldNumber = 11;
  ::google::protobuf::int32 posx() const;
  void set_posx(::google::protobuf::int32 value);

  // optional int32 POSY = 12;
  bool has_posy() const;
  void clear_posy();
  static const int kPOSYFieldNumber = 12;
  ::google::protobuf::int32 posy() const;
  void set_posy(::google::protobuf::int32 value);

  // optional int32 GOLD = 13;
  bool has_gold() const;
  void clear_gold();
  static const int kGOLDFieldNumber = 13;
  ::google::protobuf::int32 gold() const;
  void set_gold(::google::protobuf::int32 value);

  // optional int32 SILVER = 14;
  bool has_silver() const;
  void clear_silver();
  static const int kSILVERFieldNumber = 14;
  ::google::protobuf::int32 silver() const;
  void set_silver(::google::protobuf::int32 value);

  // optional int32 COPPER = 15;
  bool has_copper() const;
  void clear_copper();
  static const int kCOPPERFieldNumber = 15;
  ::google::protobuf::int32 copper() const;
  void set_copper(::google::protobuf::int32 value);

  // optional uint32 LASTLOGIN = 16;
  bool has_lastlogin() const;
  void clear_lastlogin();
  static const int kLASTLOGINFieldNumber = 16;
  ::google::protobuf::uint32 lastlogin() const;
  void set_lastlogin(::google::protobuf::uint32 value);

  // optional uint32 COUNTRY = 17;
  bool has_country() const;
  void clear_country();
  static const int kCOUNTRYFieldNumber = 17;
  ::google::protobuf::uint32 country() const;
  void set_country(::google::protobuf::uint32 value);

  // optional uint32 TEAMID = 18;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTEAMIDFieldNumber = 18;
  ::google::protobuf::uint32 teamid() const;
  void set_teamid(::google::protobuf::uint32 value);

  // optional .data.UserBin INFO = 19;
  bool has_info() const;
  void clear_info();
  static const int kINFOFieldNumber = 19;
  const ::data::UserBin& info() const;
  ::data::UserBin* mutable_info();
  ::data::UserBin* release_info();
  void set_allocated_info(::data::UserBin* info);

  // @@protoc_insertion_point(class_scope:data.UserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_roletype();
  inline void clear_has_roletype();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_silver();
  inline void clear_has_silver();
  inline void set_has_copper();
  inline void clear_has_copper();
  inline void set_has_lastlogin();
  inline void clear_has_lastlogin();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint64 sceneid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 roletype_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 silver_;
  ::google::protobuf::int32 copper_;
  ::google::protobuf::uint32 lastlogin_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 teamid_;
  ::data::UserBin* info_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserBin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.UserBin) */ {
 public:
  UserBin();
  virtual ~UserBin();

  UserBin(const UserBin& from);

  inline UserBin& operator=(const UserBin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBin& default_instance();

  void Swap(UserBin* other);

  // implements Message ----------------------------------------------

  inline UserBin* New() const { return New(NULL); }

  UserBin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBin& from);
  void MergeFrom(const UserBin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserBin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 testID = 1;
  bool has_testid() const;
  void clear_testid();
  static const int kTestIDFieldNumber = 1;
  ::google::protobuf::int32 testid() const;
  void set_testid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.UserBin)
 private:
  inline void set_has_testid();
  inline void clear_has_testid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 testid_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static UserBin* default_instance_;
};
// -------------------------------------------------------------------

class QueryOfflineUserProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryOfflineUserProto) */ {
 public:
  QueryOfflineUserProto();
  virtual ~QueryOfflineUserProto();

  QueryOfflineUserProto(const QueryOfflineUserProto& from);

  inline QueryOfflineUserProto& operator=(const QueryOfflineUserProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOfflineUserProto& default_instance();

  void Swap(QueryOfflineUserProto* other);

  // implements Message ----------------------------------------------

  inline QueryOfflineUserProto* New() const { return New(NULL); }

  QueryOfflineUserProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOfflineUserProto& from);
  void MergeFrom(const QueryOfflineUserProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOfflineUserProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.OfflineUserInfo user_list = 1;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 1;
  const ::data::OfflineUserInfo& user_list(int index) const;
  ::data::OfflineUserInfo* mutable_user_list(int index);
  ::data::OfflineUserInfo* add_user_list();
  ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >*
      mutable_user_list();
  const ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >&
      user_list() const;

  // @@protoc_insertion_point(class_scope:data.QueryOfflineUserProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo > user_list_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryOfflineUserProto* default_instance_;
};
// -------------------------------------------------------------------

class OfflineUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.OfflineUserInfo) */ {
 public:
  OfflineUserInfo();
  virtual ~OfflineUserInfo();

  OfflineUserInfo(const OfflineUserInfo& from);

  inline OfflineUserInfo& operator=(const OfflineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineUserInfo& default_instance();

  void Swap(OfflineUserInfo* other);

  // implements Message ----------------------------------------------

  inline OfflineUserInfo* New() const { return New(NULL); }

  OfflineUserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineUserInfo& from);
  void MergeFrom(const OfflineUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OfflineUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 ACCID = 2;
  bool has_accid() const;
  void clear_accid();
  static const int kACCIDFieldNumber = 2;
  ::google::protobuf::uint64 accid() const;
  void set_accid(::google::protobuf::uint64 value);

  // optional string NAME = 3;
  bool has_name() const;
  void clear_name();
  static const int kNAMEFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 LEVEL = 4;
  bool has_level() const;
  void clear_level();
  static const int kLEVELFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 VIP = 5;
  bool has_vip() const;
  void clear_vip();
  static const int kVIPFieldNumber = 5;
  ::google::protobuf::uint32 vip() const;
  void set_vip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.OfflineUserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static OfflineUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorldUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.WorldUserInfo) */ {
 public:
  WorldUserInfo();
  virtual ~WorldUserInfo();

  WorldUserInfo(const WorldUserInfo& from);

  inline WorldUserInfo& operator=(const WorldUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldUserInfo& default_instance();

  void Swap(WorldUserInfo* other);

  // implements Message ----------------------------------------------

  inline WorldUserInfo* New() const { return New(NULL); }

  WorldUserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldUserInfo& from);
  void MergeFrom(const WorldUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorldUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint64 ACCID = 2;
  bool has_accid() const;
  void clear_accid();
  static const int kACCIDFieldNumber = 2;
  ::google::protobuf::uint64 accid() const;
  void set_accid(::google::protobuf::uint64 value);

  // optional string NAME = 3;
  bool has_name() const;
  void clear_name();
  static const int kNAMEFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 LEVEL = 4;
  bool has_level() const;
  void clear_level();
  static const int kLEVELFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 SCENEID = 5;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSCENEIDFieldNumber = 5;
  ::google::protobuf::uint32 sceneid() const;
  void set_sceneid(::google::protobuf::uint32 value);

  // optional uint32 MAPID = 6;
  bool has_mapid() const;
  void clear_mapid();
  static const int kMAPIDFieldNumber = 6;
  ::google::protobuf::uint32 mapid() const;
  void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.WorldUserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_accid();
  inline void clear_has_accid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 accid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static WorldUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class Counter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.Counter) */ {
 public:
  Counter();
  virtual ~Counter();

  Counter(const Counter& from);

  inline Counter& operator=(const Counter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Counter& default_instance();

  void Swap(Counter* other);

  // implements Message ----------------------------------------------

  inline Counter* New() const { return New(NULL); }

  Counter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Counter& from);
  void MergeFrom(const Counter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Counter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemid = 1;
  bool has_itemid() const;
  void clear_itemid();
  static const int kItemidFieldNumber = 1;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // optional int32 itemval = 2;
  bool has_itemval() const;
  void clear_itemval();
  static const int kItemvalFieldNumber = 2;
  ::google::protobuf::int32 itemval() const;
  void set_itemval(::google::protobuf::int32 value);

  // optional int32 starttime = 3;
  bool has_starttime() const;
  void clear_starttime();
  static const int kStarttimeFieldNumber = 3;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // optional int32 endtime = 4;
  bool has_endtime() const;
  void clear_endtime();
  static const int kEndtimeFieldNumber = 4;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.Counter)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemval();
  inline void clear_has_itemval();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemval_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 endtime_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Counter* default_instance_;
};
// -------------------------------------------------------------------

class CounterProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.CounterProto) */ {
 public:
  CounterProto();
  virtual ~CounterProto();

  CounterProto(const CounterProto& from);

  inline CounterProto& operator=(const CounterProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CounterProto& default_instance();

  void Swap(CounterProto* other);

  // implements Message ----------------------------------------------

  inline CounterProto* New() const { return New(NULL); }

  CounterProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CounterProto& from);
  void MergeFrom(const CounterProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CounterProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.Counter counter = 1;
  int counter_size() const;
  void clear_counter();
  static const int kCounterFieldNumber = 1;
  const ::data::Counter& counter(int index) const;
  ::data::Counter* mutable_counter(int index);
  ::data::Counter* add_counter();
  ::google::protobuf::RepeatedPtrField< ::data::Counter >*
      mutable_counter();
  const ::google::protobuf::RepeatedPtrField< ::data::Counter >&
      counter() const;

  // @@protoc_insertion_point(class_scope:data.CounterProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::Counter > counter_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static CounterProto* default_instance_;
};
// -------------------------------------------------------------------

class MsgObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.MsgObject) */ {
 public:
  MsgObject();
  virtual ~MsgObject();

  MsgObject(const MsgObject& from);

  inline MsgObject& operator=(const MsgObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgObject& default_instance();

  void Swap(MsgObject* other);

  // implements Message ----------------------------------------------

  inline MsgObject* New() const { return New(NULL); }

  MsgObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgObject& from);
  void MergeFrom(const MsgObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string conent = 1;
  bool has_conent() const;
  void clear_conent();
  static const int kConentFieldNumber = 1;
  const ::std::string& conent() const;
  void set_conent(const ::std::string& value);
  void set_conent(const char* value);
  void set_conent(const char* value, size_t size);
  ::std::string* mutable_conent();
  ::std::string* release_conent();
  void set_allocated_conent(::std::string* conent);

  // @@protoc_insertion_point(class_scope:data.MsgObject)
 private:
  inline void set_has_conent();
  inline void clear_has_conent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr conent_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static MsgObject* default_instance_;
};
// -------------------------------------------------------------------

class RelChatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.RelChatMsg) */ {
 public:
  RelChatMsg();
  virtual ~RelChatMsg();

  RelChatMsg(const RelChatMsg& from);

  inline RelChatMsg& operator=(const RelChatMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelChatMsg& default_instance();

  void Swap(RelChatMsg* other);

  // implements Message ----------------------------------------------

  inline RelChatMsg* New() const { return New(NULL); }

  RelChatMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelChatMsg& from);
  void MergeFrom(const RelChatMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelChatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 msgid = 1;
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::int64 msgid() const;
  void set_msgid(::google::protobuf::int64 value);

  // optional int64 senduid = 2;
  bool has_senduid() const;
  void clear_senduid();
  static const int kSenduidFieldNumber = 2;
  ::google::protobuf::int64 senduid() const;
  void set_senduid(::google::protobuf::int64 value);

  // optional string sendname = 3;
  bool has_sendname() const;
  void clear_sendname();
  static const int kSendnameFieldNumber = 3;
  const ::std::string& sendname() const;
  void set_sendname(const ::std::string& value);
  void set_sendname(const char* value);
  void set_sendname(const char* value, size_t size);
  ::std::string* mutable_sendname();
  ::std::string* release_sendname();
  void set_allocated_sendname(::std::string* sendname);

  // optional int64 recvuid = 4;
  bool has_recvuid() const;
  void clear_recvuid();
  static const int kRecvuidFieldNumber = 4;
  ::google::protobuf::int64 recvuid() const;
  void set_recvuid(::google::protobuf::int64 value);

  // optional string recvname = 5;
  bool has_recvname() const;
  void clear_recvname();
  static const int kRecvnameFieldNumber = 5;
  const ::std::string& recvname() const;
  void set_recvname(const ::std::string& value);
  void set_recvname(const char* value);
  void set_recvname(const char* value, size_t size);
  ::std::string* mutable_recvname();
  ::std::string* release_recvname();
  void set_allocated_recvname(::std::string* recvname);

  // optional int32 sendtime = 6;
  bool has_sendtime() const;
  void clear_sendtime();
  static const int kSendtimeFieldNumber = 6;
  ::google::protobuf::int32 sendtime() const;
  void set_sendtime(::google::protobuf::int32 value);

  // optional .data.MsgObject msgobj = 7;
  bool has_msgobj() const;
  void clear_msgobj();
  static const int kMsgobjFieldNumber = 7;
  const ::data::MsgObject& msgobj() const;
  ::data::MsgObject* mutable_msgobj();
  ::data::MsgObject* release_msgobj();
  void set_allocated_msgobj(::data::MsgObject* msgobj);

  // @@protoc_insertion_point(class_scope:data.RelChatMsg)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_senduid();
  inline void clear_has_senduid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_recvuid();
  inline void clear_has_recvuid();
  inline void set_has_recvname();
  inline void clear_has_recvname();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_msgobj();
  inline void clear_has_msgobj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 msgid_;
  ::google::protobuf::int64 senduid_;
  ::google::protobuf::internal::ArenaStringPtr sendname_;
  ::google::protobuf::int64 recvuid_;
  ::google::protobuf::internal::ArenaStringPtr recvname_;
  ::data::MsgObject* msgobj_;
  ::google::protobuf::int32 sendtime_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RelChatMsg* default_instance_;
};
// -------------------------------------------------------------------

class RelChatProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.RelChatProto) */ {
 public:
  RelChatProto();
  virtual ~RelChatProto();

  RelChatProto(const RelChatProto& from);

  inline RelChatProto& operator=(const RelChatProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelChatProto& default_instance();

  void Swap(RelChatProto* other);

  // implements Message ----------------------------------------------

  inline RelChatProto* New() const { return New(NULL); }

  RelChatProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelChatProto& from);
  void MergeFrom(const RelChatProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelChatProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.RelChatMsg msglist = 1;
  int msglist_size() const;
  void clear_msglist();
  static const int kMsglistFieldNumber = 1;
  const ::data::RelChatMsg& msglist(int index) const;
  ::data::RelChatMsg* mutable_msglist(int index);
  ::data::RelChatMsg* add_msglist();
  ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >*
      mutable_msglist();
  const ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >&
      msglist() const;

  // @@protoc_insertion_point(class_scope:data.RelChatProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg > msglist_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RelChatProto* default_instance_;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.Relation) */ {
 public:
  Relation();
  virtual ~Relation();

  Relation(const Relation& from);

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation& default_instance();

  void Swap(Relation* other);

  // implements Message ----------------------------------------------

  inline Relation* New() const { return New(NULL); }

  Relation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Relation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 rel = 3;
  bool has_rel() const;
  void clear_rel();
  static const int kRelFieldNumber = 3;
  ::google::protobuf::int32 rel() const;
  void set_rel(::google::protobuf::int32 value);

  // optional int32 createtime = 4;
  bool has_createtime() const;
  void clear_createtime();
  static const int kCreatetimeFieldNumber = 4;
  ::google::protobuf::int32 createtime() const;
  void set_createtime(::google::protobuf::int32 value);

  // optional int32 dealreltime = 5;
  bool has_dealreltime() const;
  void clear_dealreltime();
  static const int kDealreltimeFieldNumber = 5;
  ::google::protobuf::int32 dealreltime() const;
  void set_dealreltime(::google::protobuf::int32 value);

  // optional .data.RelChatProto relchat = 6;
  bool has_relchat() const;
  void clear_relchat();
  static const int kRelchatFieldNumber = 6;
  const ::data::RelChatProto& relchat() const;
  ::data::RelChatProto* mutable_relchat();
  ::data::RelChatProto* release_relchat();
  void set_allocated_relchat(::data::RelChatProto* relchat);

  // @@protoc_insertion_point(class_scope:data.Relation)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rel();
  inline void clear_has_rel();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_dealreltime();
  inline void clear_has_dealreltime();
  inline void set_has_relchat();
  inline void clear_has_relchat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 rel_;
  ::google::protobuf::int32 createtime_;
  ::data::RelChatProto* relchat_;
  ::google::protobuf::int32 dealreltime_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static Relation* default_instance_;
};
// -------------------------------------------------------------------

class RelationProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.RelationProto) */ {
 public:
  RelationProto();
  virtual ~RelationProto();

  RelationProto(const RelationProto& from);

  inline RelationProto& operator=(const RelationProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelationProto& default_instance();

  void Swap(RelationProto* other);

  // implements Message ----------------------------------------------

  inline RelationProto* New() const { return New(NULL); }

  RelationProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelationProto& from);
  void MergeFrom(const RelationProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelationProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.Relation relation = 1;
  int relation_size() const;
  void clear_relation();
  static const int kRelationFieldNumber = 1;
  const ::data::Relation& relation(int index) const;
  ::data::Relation* mutable_relation(int index);
  ::data::Relation* add_relation();
  ::google::protobuf::RepeatedPtrField< ::data::Relation >*
      mutable_relation();
  const ::google::protobuf::RepeatedPtrField< ::data::Relation >&
      relation() const;

  // @@protoc_insertion_point(class_scope:data.RelationProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::Relation > relation_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static RelationProto* default_instance_;
};
// -------------------------------------------------------------------

class UserBinary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.UserBinary) */ {
 public:
  UserBinary();
  virtual ~UserBinary();

  UserBinary(const UserBinary& from);

  inline UserBinary& operator=(const UserBinary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBinary& default_instance();

  void Swap(UserBinary* other);

  // implements Message ----------------------------------------------

  inline UserBinary* New() const { return New(NULL); }

  UserBinary* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBinary& from);
  void MergeFrom(const UserBinary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserBinary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .data.CounterProto counters = 1;
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 1;
  const ::data::CounterProto& counters() const;
  ::data::CounterProto* mutable_counters();
  ::data::CounterProto* release_counters();
  void set_allocated_counters(::data::CounterProto* counters);

  // optional .data.RelationProto relations = 3;
  bool has_relations() const;
  void clear_relations();
  static const int kRelationsFieldNumber = 3;
  const ::data::RelationProto& relations() const;
  ::data::RelationProto* mutable_relations();
  ::data::RelationProto* release_relations();
  void set_allocated_relations(::data::RelationProto* relations);

  // @@protoc_insertion_point(class_scope:data.UserBinary)
 private:
  inline void set_has_counters();
  inline void clear_has_counters();
  inline void set_has_relations();
  inline void clear_has_relations();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::data::CounterProto* counters_;
  ::data::RelationProto* relations_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static UserBinary* default_instance_;
};
// -------------------------------------------------------------------

class WsUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.WsUser) */ {
 public:
  WsUser();
  virtual ~WsUser();

  WsUser(const WsUser& from);

  inline WsUser& operator=(const WsUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WsUser& default_instance();

  void Swap(WsUser* other);

  // implements Message ----------------------------------------------

  inline WsUser* New() const { return New(NULL); }

  WsUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WsUser& from);
  void MergeFrom(const WsUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WsUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 char_id = 1;
  bool has_char_id() const;
  void clear_char_id();
  static const int kCharIdFieldNumber = 1;
  ::google::protobuf::int64 char_id() const;
  void set_char_id(::google::protobuf::int64 value);

  // optional int64 account_id = 2;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  ::google::protobuf::int64 account_id() const;
  void set_account_id(::google::protobuf::int64 value);

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:data.WsUser)
 private:
  inline void set_has_char_id();
  inline void clear_has_char_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 char_id_;
  ::google::protobuf::int64 account_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static WsUser* default_instance_;
};
// -------------------------------------------------------------------

class QueryWsUserProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryWsUserProto) */ {
 public:
  QueryWsUserProto();
  virtual ~QueryWsUserProto();

  QueryWsUserProto(const QueryWsUserProto& from);

  inline QueryWsUserProto& operator=(const QueryWsUserProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryWsUserProto& default_instance();

  void Swap(QueryWsUserProto* other);

  // implements Message ----------------------------------------------

  inline QueryWsUserProto* New() const { return New(NULL); }

  QueryWsUserProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryWsUserProto& from);
  void MergeFrom(const QueryWsUserProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryWsUserProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.WorldUserInfo user_list = 1;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 1;
  const ::data::WorldUserInfo& user_list(int index) const;
  ::data::WorldUserInfo* mutable_user_list(int index);
  ::data::WorldUserInfo* add_user_list();
  ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >*
      mutable_user_list();
  const ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >&
      user_list() const;

  // @@protoc_insertion_point(class_scope:data.QueryWsUserProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo > user_list_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryWsUserProto* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserMaxIDProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryUserMaxIDProto) */ {
 public:
  QueryUserMaxIDProto();
  virtual ~QueryUserMaxIDProto();

  QueryUserMaxIDProto(const QueryUserMaxIDProto& from);

  inline QueryUserMaxIDProto& operator=(const QueryUserMaxIDProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserMaxIDProto& default_instance();

  void Swap(QueryUserMaxIDProto* other);

  // implements Message ----------------------------------------------

  inline QueryUserMaxIDProto* New() const { return New(NULL); }

  QueryUserMaxIDProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserMaxIDProto& from);
  void MergeFrom(const QueryUserMaxIDProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserMaxIDProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:data.QueryUserMaxIDProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryUserMaxIDProto* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserDataProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryUserDataProto) */ {
 public:
  QueryUserDataProto();
  virtual ~QueryUserDataProto();

  QueryUserDataProto(const QueryUserDataProto& from);

  inline QueryUserDataProto& operator=(const QueryUserDataProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserDataProto& default_instance();

  void Swap(QueryUserDataProto* other);

  // implements Message ----------------------------------------------

  inline QueryUserDataProto* New() const { return New(NULL); }

  QueryUserDataProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserDataProto& from);
  void MergeFrom(const QueryUserDataProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserDataProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional .data.UserInfo user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::data::UserInfo& user() const;
  ::data::UserInfo* mutable_user();
  ::data::UserInfo* release_user();
  void set_allocated_user(::data::UserInfo* user);

  // @@protoc_insertion_point(class_scope:data.QueryUserDataProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::data::UserInfo* user_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryUserDataProto* default_instance_;
};
// -------------------------------------------------------------------

class QueryAccountProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.QueryAccountProto) */ {
 public:
  QueryAccountProto();
  virtual ~QueryAccountProto();

  QueryAccountProto(const QueryAccountProto& from);

  inline QueryAccountProto& operator=(const QueryAccountProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAccountProto& default_instance();

  void Swap(QueryAccountProto* other);

  // implements Message ----------------------------------------------

  inline QueryAccountProto* New() const { return New(NULL); }

  QueryAccountProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAccountProto& from);
  void MergeFrom(const QueryAccountProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryAccountProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .data.AccountWxInfo account_list = 3;
  int account_list_size() const;
  void clear_account_list();
  static const int kAccountListFieldNumber = 3;
  const ::data::AccountWxInfo& account_list(int index) const;
  ::data::AccountWxInfo* mutable_account_list(int index);
  ::data::AccountWxInfo* add_account_list();
  ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >*
      mutable_account_list();
  const ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >&
      account_list() const;

  // @@protoc_insertion_point(class_scope:data.QueryAccountProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo > account_list_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static QueryAccountProto* default_instance_;
};
// -------------------------------------------------------------------

class AccountWxInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.AccountWxInfo) */ {
 public:
  AccountWxInfo();
  virtual ~AccountWxInfo();

  AccountWxInfo(const AccountWxInfo& from);

  inline AccountWxInfo& operator=(const AccountWxInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountWxInfo& default_instance();

  void Swap(AccountWxInfo* other);

  // implements Message ----------------------------------------------

  inline AccountWxInfo* New() const { return New(NULL); }

  AccountWxInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountWxInfo& from);
  void MergeFrom(const AccountWxInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccountWxInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string openid = 1;
  bool has_openid() const;
  void clear_openid();
  static const int kOpenidFieldNumber = 1;
  const ::std::string& openid() const;
  void set_openid(const ::std::string& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  ::std::string* mutable_openid();
  ::std::string* release_openid();
  void set_allocated_openid(::std::string* openid);

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 sex = 3;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional string province = 4;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 4;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // optional string city = 5;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 5;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // optional string country = 6;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 6;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // optional string headimgurl = 7;
  bool has_headimgurl() const;
  void clear_headimgurl();
  static const int kHeadimgurlFieldNumber = 7;
  const ::std::string& headimgurl() const;
  void set_headimgurl(const ::std::string& value);
  void set_headimgurl(const char* value);
  void set_headimgurl(const char* value, size_t size);
  ::std::string* mutable_headimgurl();
  ::std::string* release_headimgurl();
  void set_allocated_headimgurl(::std::string* headimgurl);

  // optional string unionid = 8;
  bool has_unionid() const;
  void clear_unionid();
  static const int kUnionidFieldNumber = 8;
  const ::std::string& unionid() const;
  void set_unionid(const ::std::string& value);
  void set_unionid(const char* value);
  void set_unionid(const char* value, size_t size);
  ::std::string* mutable_unionid();
  ::std::string* release_unionid();
  void set_allocated_unionid(::std::string* unionid);

  // optional string wxtoken = 9;
  bool has_wxtoken() const;
  void clear_wxtoken();
  static const int kWxtokenFieldNumber = 9;
  const ::std::string& wxtoken() const;
  void set_wxtoken(const ::std::string& value);
  void set_wxtoken(const char* value);
  void set_wxtoken(const char* value, size_t size);
  ::std::string* mutable_wxtoken();
  ::std::string* release_wxtoken();
  void set_allocated_wxtoken(::std::string* wxtoken);

  // optional string ip = 10;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 10;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:data.AccountWxInfo)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_headimgurl();
  inline void clear_has_headimgurl();
  inline void set_has_unionid();
  inline void clear_has_unionid();
  inline void set_has_wxtoken();
  inline void clear_has_wxtoken();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr openid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr headimgurl_;
  ::google::protobuf::internal::ArenaStringPtr unionid_;
  ::google::protobuf::internal::ArenaStringPtr wxtoken_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 sex_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AccountWxInfo* default_instance_;
};
// -------------------------------------------------------------------

class AccountBin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.AccountBin) */ {
 public:
  AccountBin();
  virtual ~AccountBin();

  AccountBin(const AccountBin& from);

  inline AccountBin& operator=(const AccountBin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountBin& default_instance();

  void Swap(AccountBin* other);

  // implements Message ----------------------------------------------

  inline AccountBin* New() const { return New(NULL); }

  AccountBin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountBin& from);
  void MergeFrom(const AccountBin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccountBin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Test = 1;
  bool has_test() const;
  void clear_test();
  static const int kTestFieldNumber = 1;
  ::google::protobuf::uint32 test() const;
  void set_test(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.AccountBin)
 private:
  inline void set_has_test();
  inline void clear_has_test();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 test_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static AccountBin* default_instance_;
};
// -------------------------------------------------------------------

class GateUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.GateUserInfo) */ {
 public:
  GateUserInfo();
  virtual ~GateUserInfo();

  GateUserInfo(const GateUserInfo& from);

  inline GateUserInfo& operator=(const GateUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateUserInfo& default_instance();

  void Swap(GateUserInfo* other);

  // implements Message ----------------------------------------------

  inline GateUserInfo* New() const { return New(NULL); }

  GateUserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateUserInfo& from);
  void MergeFrom(const GateUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GateUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 fepserverid = 2;
  bool has_fepserverid() const;
  void clear_fepserverid();
  static const int kFepserveridFieldNumber = 2;
  ::google::protobuf::uint32 fepserverid() const;
  void set_fepserverid(::google::protobuf::uint32 value);

  // optional uint32 ssservierid = 3;
  bool has_ssservierid() const;
  void clear_ssservierid();
  static const int kSsservieridFieldNumber = 3;
  ::google::protobuf::uint32 ssservierid() const;
  void set_ssservierid(::google::protobuf::uint32 value);

  // optional uint64 sessionid = 4;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 4;
  ::google::protobuf::uint64 sessionid() const;
  void set_sessionid(::google::protobuf::uint64 value);

  // optional uint32 countryid = 5;
  bool has_countryid() const;
  void clear_countryid();
  static const int kCountryidFieldNumber = 5;
  ::google::protobuf::uint32 countryid() const;
  void set_countryid(::google::protobuf::uint32 value);

  // optional uint32 mapid = 6;
  bool has_mapid() const;
  void clear_mapid();
  static const int kMapidFieldNumber = 6;
  ::google::protobuf::uint32 mapid() const;
  void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 sceneid = 7;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSceneidFieldNumber = 7;
  ::google::protobuf::uint32 sceneid() const;
  void set_sceneid(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 8;
  bool has_zoneid() const;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 8;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 pos_x = 9;
  bool has_pos_x() const;
  void clear_pos_x();
  static const int kPosXFieldNumber = 9;
  ::google::protobuf::uint32 pos_x() const;
  void set_pos_x(::google::protobuf::uint32 value);

  // optional uint32 pos_y = 10;
  bool has_pos_y() const;
  void clear_pos_y();
  static const int kPosYFieldNumber = 10;
  ::google::protobuf::uint32 pos_y() const;
  void set_pos_y(::google::protobuf::uint32 value);

  // optional uint32 teamid = 11;
  bool has_teamid() const;
  void clear_teamid();
  static const int kTeamidFieldNumber = 11;
  ::google::protobuf::uint32 teamid() const;
  void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.GateUserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_fepserverid();
  inline void clear_has_fepserverid();
  inline void set_has_ssservierid();
  inline void clear_has_ssservierid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_pos_x();
  inline void clear_has_pos_x();
  inline void set_has_pos_y();
  inline void clear_has_pos_y();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 fepserverid_;
  ::google::protobuf::uint32 ssservierid_;
  ::google::protobuf::uint64 sessionid_;
  ::google::protobuf::uint32 countryid_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 pos_x_;
  ::google::protobuf::uint32 pos_y_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_hmx_5fdata_2eproto();
  friend void protobuf_AssignDesc_hmx_5fdata_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fdata_2eproto();

  void InitAsDefaultInstance();
  static GateUserInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserProto

// repeated .data.UserInfo user_list = 1;
inline int QueryUserProto::user_list_size() const {
  return user_list_.size();
}
inline void QueryUserProto::clear_user_list() {
  user_list_.Clear();
}
inline const ::data::UserInfo& QueryUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryUserProto.user_list)
  return user_list_.Get(index);
}
inline ::data::UserInfo* QueryUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryUserProto.user_list)
  return user_list_.Mutable(index);
}
inline ::data::UserInfo* QueryUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryUserProto.user_list)
  return user_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::UserInfo >*
QueryUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryUserProto.user_list)
  return &user_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::UserInfo >&
QueryUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryUserProto.user_list)
  return user_list_;
}

// -------------------------------------------------------------------

// UserInfo

// optional uint64 ID = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ID)
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ID)
}

// optional uint64 ACCID = 2;
inline bool UserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 UserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ACCID)
  return accid_;
}
inline void UserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ACCID)
}

// optional string NAME = 3;
inline bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.UserInfo.NAME)
}
inline void UserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.UserInfo.NAME)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.UserInfo.NAME)
}
inline ::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.UserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.UserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.UserInfo.NAME)
}

// optional uint32 LEVEL = 4;
inline bool UserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 UserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.LEVEL)
  return level_;
}
inline void UserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.LEVEL)
}

// optional uint32 VIP = 5;
inline bool UserInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 UserInfo::vip() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.VIP)
  return vip_;
}
inline void UserInfo::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.VIP)
}

// optional uint32 STATUS = 6;
inline bool UserInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 UserInfo::status() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.STATUS)
  return status_;
}
inline void UserInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.STATUS)
}

// optional uint64 SCENEID = 7;
inline bool UserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_sceneid() {
  sceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_sceneid();
}
inline ::google::protobuf::uint64 UserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.SCENEID)
  return sceneid_;
}
inline void UserInfo::set_sceneid(::google::protobuf::uint64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.SCENEID)
}

// optional uint32 MAPID = 8;
inline bool UserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 UserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.MAPID)
  return mapid_;
}
inline void UserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.MAPID)
}

// optional uint32 ROLETYPE = 9;
inline bool UserInfo::has_roletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_roletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_roletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_roletype() {
  roletype_ = 0u;
  clear_has_roletype();
}
inline ::google::protobuf::uint32 UserInfo::roletype() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.ROLETYPE)
  return roletype_;
}
inline void UserInfo::set_roletype(::google::protobuf::uint32 value) {
  set_has_roletype();
  roletype_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.ROLETYPE)
}

// optional uint32 EXP = 10;
inline bool UserInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 UserInfo::exp() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.EXP)
  return exp_;
}
inline void UserInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.EXP)
}

// optional int32 POSX = 11;
inline bool UserInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 UserInfo::posx() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.POSX)
  return posx_;
}
inline void UserInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.POSX)
}

// optional int32 POSY = 12;
inline bool UserInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 UserInfo::posy() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.POSY)
  return posy_;
}
inline void UserInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.POSY)
}

// optional int32 GOLD = 13;
inline bool UserInfo::has_gold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfo::set_has_gold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 UserInfo::gold() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.GOLD)
  return gold_;
}
inline void UserInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.GOLD)
}

// optional int32 SILVER = 14;
inline bool UserInfo::has_silver() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfo::set_has_silver() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfo::clear_has_silver() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfo::clear_silver() {
  silver_ = 0;
  clear_has_silver();
}
inline ::google::protobuf::int32 UserInfo::silver() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.SILVER)
  return silver_;
}
inline void UserInfo::set_silver(::google::protobuf::int32 value) {
  set_has_silver();
  silver_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.SILVER)
}

// optional int32 COPPER = 15;
inline bool UserInfo::has_copper() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfo::set_has_copper() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfo::clear_has_copper() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfo::clear_copper() {
  copper_ = 0;
  clear_has_copper();
}
inline ::google::protobuf::int32 UserInfo::copper() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.COPPER)
  return copper_;
}
inline void UserInfo::set_copper(::google::protobuf::int32 value) {
  set_has_copper();
  copper_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.COPPER)
}

// optional uint32 LASTLOGIN = 16;
inline bool UserInfo::has_lastlogin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfo::set_has_lastlogin() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfo::clear_has_lastlogin() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfo::clear_lastlogin() {
  lastlogin_ = 0u;
  clear_has_lastlogin();
}
inline ::google::protobuf::uint32 UserInfo::lastlogin() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.LASTLOGIN)
  return lastlogin_;
}
inline void UserInfo::set_lastlogin(::google::protobuf::uint32 value) {
  set_has_lastlogin();
  lastlogin_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.LASTLOGIN)
}

// optional uint32 COUNTRY = 17;
inline bool UserInfo::has_country() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserInfo::set_has_country() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserInfo::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 UserInfo::country() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.COUNTRY)
  return country_;
}
inline void UserInfo::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.COUNTRY)
}

// optional uint32 TEAMID = 18;
inline bool UserInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 UserInfo::teamid() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.TEAMID)
  return teamid_;
}
inline void UserInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:data.UserInfo.TEAMID)
}

// optional .data.UserBin INFO = 19;
inline bool UserInfo::has_info() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserInfo::set_has_info() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserInfo::clear_info() {
  if (info_ != NULL) info_->::data::UserBin::Clear();
  clear_has_info();
}
inline const ::data::UserBin& UserInfo::info() const {
  // @@protoc_insertion_point(field_get:data.UserInfo.INFO)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::data::UserBin* UserInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::data::UserBin;
  }
  // @@protoc_insertion_point(field_mutable:data.UserInfo.INFO)
  return info_;
}
inline ::data::UserBin* UserInfo::release_info() {
  // @@protoc_insertion_point(field_release:data.UserInfo.INFO)
  clear_has_info();
  ::data::UserBin* temp = info_;
  info_ = NULL;
  return temp;
}
inline void UserInfo::set_allocated_info(::data::UserBin* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserInfo.INFO)
}

// -------------------------------------------------------------------

// UserBin

// optional int32 testID = 1;
inline bool UserBin::has_testid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBin::set_has_testid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBin::clear_has_testid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBin::clear_testid() {
  testid_ = 0;
  clear_has_testid();
}
inline ::google::protobuf::int32 UserBin::testid() const {
  // @@protoc_insertion_point(field_get:data.UserBin.testID)
  return testid_;
}
inline void UserBin::set_testid(::google::protobuf::int32 value) {
  set_has_testid();
  testid_ = value;
  // @@protoc_insertion_point(field_set:data.UserBin.testID)
}

// -------------------------------------------------------------------

// QueryOfflineUserProto

// repeated .data.OfflineUserInfo user_list = 1;
inline int QueryOfflineUserProto::user_list_size() const {
  return user_list_.size();
}
inline void QueryOfflineUserProto::clear_user_list() {
  user_list_.Clear();
}
inline const ::data::OfflineUserInfo& QueryOfflineUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryOfflineUserProto.user_list)
  return user_list_.Get(index);
}
inline ::data::OfflineUserInfo* QueryOfflineUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryOfflineUserProto.user_list)
  return user_list_.Mutable(index);
}
inline ::data::OfflineUserInfo* QueryOfflineUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryOfflineUserProto.user_list)
  return user_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >*
QueryOfflineUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryOfflineUserProto.user_list)
  return &user_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::OfflineUserInfo >&
QueryOfflineUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryOfflineUserProto.user_list)
  return user_list_;
}

// -------------------------------------------------------------------

// OfflineUserInfo

// optional uint64 ID = 1;
inline bool OfflineUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 OfflineUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.ID)
  return id_;
}
inline void OfflineUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.ID)
}

// optional uint64 ACCID = 2;
inline bool OfflineUserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineUserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineUserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineUserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 OfflineUserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.ACCID)
  return accid_;
}
inline void OfflineUserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.ACCID)
}

// optional string NAME = 3;
inline bool OfflineUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OfflineUserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.NAME)
}
inline void OfflineUserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.OfflineUserInfo.NAME)
}
inline void OfflineUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.OfflineUserInfo.NAME)
}
inline ::std::string* OfflineUserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.OfflineUserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.OfflineUserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.OfflineUserInfo.NAME)
}

// optional uint32 LEVEL = 4;
inline bool OfflineUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfflineUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfflineUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfflineUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 OfflineUserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.LEVEL)
  return level_;
}
inline void OfflineUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.LEVEL)
}

// optional uint32 VIP = 5;
inline bool OfflineUserInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfflineUserInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfflineUserInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfflineUserInfo::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 OfflineUserInfo::vip() const {
  // @@protoc_insertion_point(field_get:data.OfflineUserInfo.VIP)
  return vip_;
}
inline void OfflineUserInfo::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
  // @@protoc_insertion_point(field_set:data.OfflineUserInfo.VIP)
}

// -------------------------------------------------------------------

// WorldUserInfo

// optional uint64 ID = 1;
inline bool WorldUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WorldUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.ID)
  return id_;
}
inline void WorldUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.ID)
}

// optional uint64 ACCID = 2;
inline bool WorldUserInfo::has_accid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldUserInfo::set_has_accid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldUserInfo::clear_has_accid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldUserInfo::clear_accid() {
  accid_ = GOOGLE_ULONGLONG(0);
  clear_has_accid();
}
inline ::google::protobuf::uint64 WorldUserInfo::accid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.ACCID)
  return accid_;
}
inline void WorldUserInfo::set_accid(::google::protobuf::uint64 value) {
  set_has_accid();
  accid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.ACCID)
}

// optional string NAME = 3;
inline bool WorldUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& WorldUserInfo::name() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.NAME)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorldUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.NAME)
}
inline void WorldUserInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.WorldUserInfo.NAME)
}
inline void WorldUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.WorldUserInfo.NAME)
}
inline ::std::string* WorldUserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.WorldUserInfo.NAME)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorldUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:data.WorldUserInfo.NAME)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorldUserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.WorldUserInfo.NAME)
}

// optional uint32 LEVEL = 4;
inline bool WorldUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 WorldUserInfo::level() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.LEVEL)
  return level_;
}
inline void WorldUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.LEVEL)
}

// optional uint32 SCENEID = 5;
inline bool WorldUserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldUserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldUserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldUserInfo::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 WorldUserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.SCENEID)
  return sceneid_;
}
inline void WorldUserInfo::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.SCENEID)
}

// optional uint32 MAPID = 6;
inline bool WorldUserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldUserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WorldUserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WorldUserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 WorldUserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.WorldUserInfo.MAPID)
  return mapid_;
}
inline void WorldUserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.WorldUserInfo.MAPID)
}

// -------------------------------------------------------------------

// Counter

// optional int32 itemid = 1;
inline bool Counter::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Counter::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Counter::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Counter::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 Counter::itemid() const {
  // @@protoc_insertion_point(field_get:data.Counter.itemid)
  return itemid_;
}
inline void Counter::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.itemid)
}

// optional int32 itemval = 2;
inline bool Counter::has_itemval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Counter::set_has_itemval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Counter::clear_has_itemval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Counter::clear_itemval() {
  itemval_ = 0;
  clear_has_itemval();
}
inline ::google::protobuf::int32 Counter::itemval() const {
  // @@protoc_insertion_point(field_get:data.Counter.itemval)
  return itemval_;
}
inline void Counter::set_itemval(::google::protobuf::int32 value) {
  set_has_itemval();
  itemval_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.itemval)
}

// optional int32 starttime = 3;
inline bool Counter::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Counter::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Counter::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Counter::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 Counter::starttime() const {
  // @@protoc_insertion_point(field_get:data.Counter.starttime)
  return starttime_;
}
inline void Counter::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.starttime)
}

// optional int32 endtime = 4;
inline bool Counter::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Counter::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Counter::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Counter::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 Counter::endtime() const {
  // @@protoc_insertion_point(field_get:data.Counter.endtime)
  return endtime_;
}
inline void Counter::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:data.Counter.endtime)
}

// -------------------------------------------------------------------

// CounterProto

// repeated .data.Counter counter = 1;
inline int CounterProto::counter_size() const {
  return counter_.size();
}
inline void CounterProto::clear_counter() {
  counter_.Clear();
}
inline const ::data::Counter& CounterProto::counter(int index) const {
  // @@protoc_insertion_point(field_get:data.CounterProto.counter)
  return counter_.Get(index);
}
inline ::data::Counter* CounterProto::mutable_counter(int index) {
  // @@protoc_insertion_point(field_mutable:data.CounterProto.counter)
  return counter_.Mutable(index);
}
inline ::data::Counter* CounterProto::add_counter() {
  // @@protoc_insertion_point(field_add:data.CounterProto.counter)
  return counter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::Counter >*
CounterProto::mutable_counter() {
  // @@protoc_insertion_point(field_mutable_list:data.CounterProto.counter)
  return &counter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::Counter >&
CounterProto::counter() const {
  // @@protoc_insertion_point(field_list:data.CounterProto.counter)
  return counter_;
}

// -------------------------------------------------------------------

// MsgObject

// optional string conent = 1;
inline bool MsgObject::has_conent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgObject::set_has_conent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgObject::clear_has_conent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgObject::clear_conent() {
  conent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conent();
}
inline const ::std::string& MsgObject::conent() const {
  // @@protoc_insertion_point(field_get:data.MsgObject.conent)
  return conent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgObject::set_conent(const ::std::string& value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.MsgObject.conent)
}
inline void MsgObject::set_conent(const char* value) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.MsgObject.conent)
}
inline void MsgObject::set_conent(const char* value, size_t size) {
  set_has_conent();
  conent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.MsgObject.conent)
}
inline ::std::string* MsgObject::mutable_conent() {
  set_has_conent();
  // @@protoc_insertion_point(field_mutable:data.MsgObject.conent)
  return conent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgObject::release_conent() {
  // @@protoc_insertion_point(field_release:data.MsgObject.conent)
  clear_has_conent();
  return conent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgObject::set_allocated_conent(::std::string* conent) {
  if (conent != NULL) {
    set_has_conent();
  } else {
    clear_has_conent();
  }
  conent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conent);
  // @@protoc_insertion_point(field_set_allocated:data.MsgObject.conent)
}

// -------------------------------------------------------------------

// RelChatMsg

// optional int64 msgid = 1;
inline bool RelChatMsg::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelChatMsg::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelChatMsg::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelChatMsg::clear_msgid() {
  msgid_ = GOOGLE_LONGLONG(0);
  clear_has_msgid();
}
inline ::google::protobuf::int64 RelChatMsg::msgid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.msgid)
  return msgid_;
}
inline void RelChatMsg::set_msgid(::google::protobuf::int64 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.msgid)
}

// optional int64 senduid = 2;
inline bool RelChatMsg::has_senduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelChatMsg::set_has_senduid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelChatMsg::clear_has_senduid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelChatMsg::clear_senduid() {
  senduid_ = GOOGLE_LONGLONG(0);
  clear_has_senduid();
}
inline ::google::protobuf::int64 RelChatMsg::senduid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.senduid)
  return senduid_;
}
inline void RelChatMsg::set_senduid(::google::protobuf::int64 value) {
  set_has_senduid();
  senduid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.senduid)
}

// optional string sendname = 3;
inline bool RelChatMsg::has_sendname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelChatMsg::set_has_sendname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelChatMsg::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelChatMsg::clear_sendname() {
  sendname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sendname();
}
inline const ::std::string& RelChatMsg::sendname() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.sendname)
  return sendname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelChatMsg::set_sendname(const ::std::string& value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.RelChatMsg.sendname)
}
inline void RelChatMsg::set_sendname(const char* value) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.RelChatMsg.sendname)
}
inline void RelChatMsg::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  sendname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.RelChatMsg.sendname)
}
inline ::std::string* RelChatMsg::mutable_sendname() {
  set_has_sendname();
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.sendname)
  return sendname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelChatMsg::release_sendname() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.sendname)
  clear_has_sendname();
  return sendname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelChatMsg::set_allocated_sendname(::std::string* sendname) {
  if (sendname != NULL) {
    set_has_sendname();
  } else {
    clear_has_sendname();
  }
  sendname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sendname);
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.sendname)
}

// optional int64 recvuid = 4;
inline bool RelChatMsg::has_recvuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelChatMsg::set_has_recvuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelChatMsg::clear_has_recvuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelChatMsg::clear_recvuid() {
  recvuid_ = GOOGLE_LONGLONG(0);
  clear_has_recvuid();
}
inline ::google::protobuf::int64 RelChatMsg::recvuid() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.recvuid)
  return recvuid_;
}
inline void RelChatMsg::set_recvuid(::google::protobuf::int64 value) {
  set_has_recvuid();
  recvuid_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.recvuid)
}

// optional string recvname = 5;
inline bool RelChatMsg::has_recvname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelChatMsg::set_has_recvname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelChatMsg::clear_has_recvname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelChatMsg::clear_recvname() {
  recvname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recvname();
}
inline const ::std::string& RelChatMsg::recvname() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.recvname)
  return recvname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelChatMsg::set_recvname(const ::std::string& value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.RelChatMsg.recvname)
}
inline void RelChatMsg::set_recvname(const char* value) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.RelChatMsg.recvname)
}
inline void RelChatMsg::set_recvname(const char* value, size_t size) {
  set_has_recvname();
  recvname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.RelChatMsg.recvname)
}
inline ::std::string* RelChatMsg::mutable_recvname() {
  set_has_recvname();
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.recvname)
  return recvname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelChatMsg::release_recvname() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.recvname)
  clear_has_recvname();
  return recvname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelChatMsg::set_allocated_recvname(::std::string* recvname) {
  if (recvname != NULL) {
    set_has_recvname();
  } else {
    clear_has_recvname();
  }
  recvname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recvname);
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.recvname)
}

// optional int32 sendtime = 6;
inline bool RelChatMsg::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelChatMsg::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelChatMsg::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelChatMsg::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
inline ::google::protobuf::int32 RelChatMsg::sendtime() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.sendtime)
  return sendtime_;
}
inline void RelChatMsg::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:data.RelChatMsg.sendtime)
}

// optional .data.MsgObject msgobj = 7;
inline bool RelChatMsg::has_msgobj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RelChatMsg::set_has_msgobj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RelChatMsg::clear_has_msgobj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RelChatMsg::clear_msgobj() {
  if (msgobj_ != NULL) msgobj_->::data::MsgObject::Clear();
  clear_has_msgobj();
}
inline const ::data::MsgObject& RelChatMsg::msgobj() const {
  // @@protoc_insertion_point(field_get:data.RelChatMsg.msgobj)
  return msgobj_ != NULL ? *msgobj_ : *default_instance_->msgobj_;
}
inline ::data::MsgObject* RelChatMsg::mutable_msgobj() {
  set_has_msgobj();
  if (msgobj_ == NULL) {
    msgobj_ = new ::data::MsgObject;
  }
  // @@protoc_insertion_point(field_mutable:data.RelChatMsg.msgobj)
  return msgobj_;
}
inline ::data::MsgObject* RelChatMsg::release_msgobj() {
  // @@protoc_insertion_point(field_release:data.RelChatMsg.msgobj)
  clear_has_msgobj();
  ::data::MsgObject* temp = msgobj_;
  msgobj_ = NULL;
  return temp;
}
inline void RelChatMsg::set_allocated_msgobj(::data::MsgObject* msgobj) {
  delete msgobj_;
  msgobj_ = msgobj;
  if (msgobj) {
    set_has_msgobj();
  } else {
    clear_has_msgobj();
  }
  // @@protoc_insertion_point(field_set_allocated:data.RelChatMsg.msgobj)
}

// -------------------------------------------------------------------

// RelChatProto

// repeated .data.RelChatMsg msglist = 1;
inline int RelChatProto::msglist_size() const {
  return msglist_.size();
}
inline void RelChatProto::clear_msglist() {
  msglist_.Clear();
}
inline const ::data::RelChatMsg& RelChatProto::msglist(int index) const {
  // @@protoc_insertion_point(field_get:data.RelChatProto.msglist)
  return msglist_.Get(index);
}
inline ::data::RelChatMsg* RelChatProto::mutable_msglist(int index) {
  // @@protoc_insertion_point(field_mutable:data.RelChatProto.msglist)
  return msglist_.Mutable(index);
}
inline ::data::RelChatMsg* RelChatProto::add_msglist() {
  // @@protoc_insertion_point(field_add:data.RelChatProto.msglist)
  return msglist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >*
RelChatProto::mutable_msglist() {
  // @@protoc_insertion_point(field_mutable_list:data.RelChatProto.msglist)
  return &msglist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::RelChatMsg >&
RelChatProto::msglist() const {
  // @@protoc_insertion_point(field_list:data.RelChatProto.msglist)
  return msglist_;
}

// -------------------------------------------------------------------

// Relation

// optional int64 uid = 1;
inline bool Relation::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Relation::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Relation::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Relation::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 Relation::uid() const {
  // @@protoc_insertion_point(field_get:data.Relation.uid)
  return uid_;
}
inline void Relation::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.uid)
}

// optional string name = 2;
inline bool Relation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Relation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Relation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Relation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Relation::name() const {
  // @@protoc_insertion_point(field_get:data.Relation.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Relation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.Relation.name)
}
inline void Relation::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.Relation.name)
}
inline void Relation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.Relation.name)
}
inline ::std::string* Relation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.Relation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Relation::release_name() {
  // @@protoc_insertion_point(field_release:data.Relation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Relation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.Relation.name)
}

// optional int32 rel = 3;
inline bool Relation::has_rel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Relation::set_has_rel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Relation::clear_has_rel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Relation::clear_rel() {
  rel_ = 0;
  clear_has_rel();
}
inline ::google::protobuf::int32 Relation::rel() const {
  // @@protoc_insertion_point(field_get:data.Relation.rel)
  return rel_;
}
inline void Relation::set_rel(::google::protobuf::int32 value) {
  set_has_rel();
  rel_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.rel)
}

// optional int32 createtime = 4;
inline bool Relation::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Relation::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Relation::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Relation::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
inline ::google::protobuf::int32 Relation::createtime() const {
  // @@protoc_insertion_point(field_get:data.Relation.createtime)
  return createtime_;
}
inline void Relation::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.createtime)
}

// optional int32 dealreltime = 5;
inline bool Relation::has_dealreltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Relation::set_has_dealreltime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Relation::clear_has_dealreltime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Relation::clear_dealreltime() {
  dealreltime_ = 0;
  clear_has_dealreltime();
}
inline ::google::protobuf::int32 Relation::dealreltime() const {
  // @@protoc_insertion_point(field_get:data.Relation.dealreltime)
  return dealreltime_;
}
inline void Relation::set_dealreltime(::google::protobuf::int32 value) {
  set_has_dealreltime();
  dealreltime_ = value;
  // @@protoc_insertion_point(field_set:data.Relation.dealreltime)
}

// optional .data.RelChatProto relchat = 6;
inline bool Relation::has_relchat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Relation::set_has_relchat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Relation::clear_has_relchat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Relation::clear_relchat() {
  if (relchat_ != NULL) relchat_->::data::RelChatProto::Clear();
  clear_has_relchat();
}
inline const ::data::RelChatProto& Relation::relchat() const {
  // @@protoc_insertion_point(field_get:data.Relation.relchat)
  return relchat_ != NULL ? *relchat_ : *default_instance_->relchat_;
}
inline ::data::RelChatProto* Relation::mutable_relchat() {
  set_has_relchat();
  if (relchat_ == NULL) {
    relchat_ = new ::data::RelChatProto;
  }
  // @@protoc_insertion_point(field_mutable:data.Relation.relchat)
  return relchat_;
}
inline ::data::RelChatProto* Relation::release_relchat() {
  // @@protoc_insertion_point(field_release:data.Relation.relchat)
  clear_has_relchat();
  ::data::RelChatProto* temp = relchat_;
  relchat_ = NULL;
  return temp;
}
inline void Relation::set_allocated_relchat(::data::RelChatProto* relchat) {
  delete relchat_;
  relchat_ = relchat;
  if (relchat) {
    set_has_relchat();
  } else {
    clear_has_relchat();
  }
  // @@protoc_insertion_point(field_set_allocated:data.Relation.relchat)
}

// -------------------------------------------------------------------

// RelationProto

// repeated .data.Relation relation = 1;
inline int RelationProto::relation_size() const {
  return relation_.size();
}
inline void RelationProto::clear_relation() {
  relation_.Clear();
}
inline const ::data::Relation& RelationProto::relation(int index) const {
  // @@protoc_insertion_point(field_get:data.RelationProto.relation)
  return relation_.Get(index);
}
inline ::data::Relation* RelationProto::mutable_relation(int index) {
  // @@protoc_insertion_point(field_mutable:data.RelationProto.relation)
  return relation_.Mutable(index);
}
inline ::data::Relation* RelationProto::add_relation() {
  // @@protoc_insertion_point(field_add:data.RelationProto.relation)
  return relation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::Relation >*
RelationProto::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:data.RelationProto.relation)
  return &relation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::Relation >&
RelationProto::relation() const {
  // @@protoc_insertion_point(field_list:data.RelationProto.relation)
  return relation_;
}

// -------------------------------------------------------------------

// UserBinary

// optional .data.CounterProto counters = 1;
inline bool UserBinary::has_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBinary::set_has_counters() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBinary::clear_has_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBinary::clear_counters() {
  if (counters_ != NULL) counters_->::data::CounterProto::Clear();
  clear_has_counters();
}
inline const ::data::CounterProto& UserBinary::counters() const {
  // @@protoc_insertion_point(field_get:data.UserBinary.counters)
  return counters_ != NULL ? *counters_ : *default_instance_->counters_;
}
inline ::data::CounterProto* UserBinary::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::data::CounterProto;
  }
  // @@protoc_insertion_point(field_mutable:data.UserBinary.counters)
  return counters_;
}
inline ::data::CounterProto* UserBinary::release_counters() {
  // @@protoc_insertion_point(field_release:data.UserBinary.counters)
  clear_has_counters();
  ::data::CounterProto* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline void UserBinary::set_allocated_counters(::data::CounterProto* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserBinary.counters)
}

// optional .data.RelationProto relations = 3;
inline bool UserBinary::has_relations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBinary::set_has_relations() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBinary::clear_has_relations() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBinary::clear_relations() {
  if (relations_ != NULL) relations_->::data::RelationProto::Clear();
  clear_has_relations();
}
inline const ::data::RelationProto& UserBinary::relations() const {
  // @@protoc_insertion_point(field_get:data.UserBinary.relations)
  return relations_ != NULL ? *relations_ : *default_instance_->relations_;
}
inline ::data::RelationProto* UserBinary::mutable_relations() {
  set_has_relations();
  if (relations_ == NULL) {
    relations_ = new ::data::RelationProto;
  }
  // @@protoc_insertion_point(field_mutable:data.UserBinary.relations)
  return relations_;
}
inline ::data::RelationProto* UserBinary::release_relations() {
  // @@protoc_insertion_point(field_release:data.UserBinary.relations)
  clear_has_relations();
  ::data::RelationProto* temp = relations_;
  relations_ = NULL;
  return temp;
}
inline void UserBinary::set_allocated_relations(::data::RelationProto* relations) {
  delete relations_;
  relations_ = relations;
  if (relations) {
    set_has_relations();
  } else {
    clear_has_relations();
  }
  // @@protoc_insertion_point(field_set_allocated:data.UserBinary.relations)
}

// -------------------------------------------------------------------

// WsUser

// optional int64 char_id = 1;
inline bool WsUser::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WsUser::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WsUser::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WsUser::clear_char_id() {
  char_id_ = GOOGLE_LONGLONG(0);
  clear_has_char_id();
}
inline ::google::protobuf::int64 WsUser::char_id() const {
  // @@protoc_insertion_point(field_get:data.WsUser.char_id)
  return char_id_;
}
inline void WsUser::set_char_id(::google::protobuf::int64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.char_id)
}

// optional int64 account_id = 2;
inline bool WsUser::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WsUser::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WsUser::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WsUser::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::int64 WsUser::account_id() const {
  // @@protoc_insertion_point(field_get:data.WsUser.account_id)
  return account_id_;
}
inline void WsUser::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.account_id)
}

// optional string name = 3;
inline bool WsUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WsUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WsUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WsUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& WsUser::name() const {
  // @@protoc_insertion_point(field_get:data.WsUser.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WsUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.WsUser.name)
}
inline void WsUser::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.WsUser.name)
}
inline void WsUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.WsUser.name)
}
inline ::std::string* WsUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:data.WsUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WsUser::release_name() {
  // @@protoc_insertion_point(field_release:data.WsUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WsUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:data.WsUser.name)
}

// optional int32 type = 4;
inline bool WsUser::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WsUser::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WsUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WsUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WsUser::type() const {
  // @@protoc_insertion_point(field_get:data.WsUser.type)
  return type_;
}
inline void WsUser::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.type)
}

// optional int32 level = 5;
inline bool WsUser::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WsUser::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WsUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WsUser::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 WsUser::level() const {
  // @@protoc_insertion_point(field_get:data.WsUser.level)
  return level_;
}
inline void WsUser::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:data.WsUser.level)
}

// -------------------------------------------------------------------

// QueryWsUserProto

// repeated .data.WorldUserInfo user_list = 1;
inline int QueryWsUserProto::user_list_size() const {
  return user_list_.size();
}
inline void QueryWsUserProto::clear_user_list() {
  user_list_.Clear();
}
inline const ::data::WorldUserInfo& QueryWsUserProto::user_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryWsUserProto.user_list)
  return user_list_.Get(index);
}
inline ::data::WorldUserInfo* QueryWsUserProto::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryWsUserProto.user_list)
  return user_list_.Mutable(index);
}
inline ::data::WorldUserInfo* QueryWsUserProto::add_user_list() {
  // @@protoc_insertion_point(field_add:data.QueryWsUserProto.user_list)
  return user_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >*
QueryWsUserProto::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryWsUserProto.user_list)
  return &user_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::WorldUserInfo >&
QueryWsUserProto::user_list() const {
  // @@protoc_insertion_point(field_list:data.QueryWsUserProto.user_list)
  return user_list_;
}

// -------------------------------------------------------------------

// QueryUserMaxIDProto

// optional uint64 ID = 1;
inline bool QueryUserMaxIDProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserMaxIDProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserMaxIDProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserMaxIDProto::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 QueryUserMaxIDProto::id() const {
  // @@protoc_insertion_point(field_get:data.QueryUserMaxIDProto.ID)
  return id_;
}
inline void QueryUserMaxIDProto::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.QueryUserMaxIDProto.ID)
}

// -------------------------------------------------------------------

// QueryUserDataProto

// optional uint64 ID = 1;
inline bool QueryUserDataProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserDataProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserDataProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserDataProto::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 QueryUserDataProto::id() const {
  // @@protoc_insertion_point(field_get:data.QueryUserDataProto.ID)
  return id_;
}
inline void QueryUserDataProto::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.QueryUserDataProto.ID)
}

// optional .data.UserInfo user = 2;
inline bool QueryUserDataProto::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserDataProto::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserDataProto::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserDataProto::clear_user() {
  if (user_ != NULL) user_->::data::UserInfo::Clear();
  clear_has_user();
}
inline const ::data::UserInfo& QueryUserDataProto::user() const {
  // @@protoc_insertion_point(field_get:data.QueryUserDataProto.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::data::UserInfo* QueryUserDataProto::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::data::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:data.QueryUserDataProto.user)
  return user_;
}
inline ::data::UserInfo* QueryUserDataProto::release_user() {
  // @@protoc_insertion_point(field_release:data.QueryUserDataProto.user)
  clear_has_user();
  ::data::UserInfo* temp = user_;
  user_ = NULL;
  return temp;
}
inline void QueryUserDataProto::set_allocated_user(::data::UserInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:data.QueryUserDataProto.user)
}

// -------------------------------------------------------------------

// QueryAccountProto

// repeated .data.AccountWxInfo account_list = 3;
inline int QueryAccountProto::account_list_size() const {
  return account_list_.size();
}
inline void QueryAccountProto::clear_account_list() {
  account_list_.Clear();
}
inline const ::data::AccountWxInfo& QueryAccountProto::account_list(int index) const {
  // @@protoc_insertion_point(field_get:data.QueryAccountProto.account_list)
  return account_list_.Get(index);
}
inline ::data::AccountWxInfo* QueryAccountProto::mutable_account_list(int index) {
  // @@protoc_insertion_point(field_mutable:data.QueryAccountProto.account_list)
  return account_list_.Mutable(index);
}
inline ::data::AccountWxInfo* QueryAccountProto::add_account_list() {
  // @@protoc_insertion_point(field_add:data.QueryAccountProto.account_list)
  return account_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >*
QueryAccountProto::mutable_account_list() {
  // @@protoc_insertion_point(field_mutable_list:data.QueryAccountProto.account_list)
  return &account_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::data::AccountWxInfo >&
QueryAccountProto::account_list() const {
  // @@protoc_insertion_point(field_list:data.QueryAccountProto.account_list)
  return account_list_;
}

// -------------------------------------------------------------------

// AccountWxInfo

// optional string openid = 1;
inline bool AccountWxInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountWxInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountWxInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountWxInfo::clear_openid() {
  openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_openid();
}
inline const ::std::string& AccountWxInfo::openid() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.openid)
  return openid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.openid)
}
inline void AccountWxInfo::set_openid(const char* value) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.openid)
}
inline void AccountWxInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.openid)
}
inline ::std::string* AccountWxInfo::mutable_openid() {
  set_has_openid();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.openid)
  return openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_openid() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.openid)
  clear_has_openid();
  return openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_openid(::std::string* openid) {
  if (openid != NULL) {
    set_has_openid();
  } else {
    clear_has_openid();
  }
  openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), openid);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.openid)
}

// optional string nickname = 2;
inline bool AccountWxInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountWxInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountWxInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountWxInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& AccountWxInfo::nickname() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.nickname)
}
inline void AccountWxInfo::set_nickname(const char* value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.nickname)
}
inline void AccountWxInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.nickname)
}
inline ::std::string* AccountWxInfo::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.nickname)
}

// optional int32 sex = 3;
inline bool AccountWxInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountWxInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountWxInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountWxInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 AccountWxInfo::sex() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.sex)
  return sex_;
}
inline void AccountWxInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.sex)
}

// optional string province = 4;
inline bool AccountWxInfo::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountWxInfo::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountWxInfo::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountWxInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_province();
}
inline const ::std::string& AccountWxInfo::province() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.province)
  return province_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_province(const ::std::string& value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.province)
}
inline void AccountWxInfo::set_province(const char* value) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.province)
}
inline void AccountWxInfo::set_province(const char* value, size_t size) {
  set_has_province();
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.province)
}
inline ::std::string* AccountWxInfo::mutable_province() {
  set_has_province();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_province() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.province)
  clear_has_province();
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    set_has_province();
  } else {
    clear_has_province();
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.province)
}

// optional string city = 5;
inline bool AccountWxInfo::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountWxInfo::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountWxInfo::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountWxInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_city();
}
inline const ::std::string& AccountWxInfo::city() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.city)
  return city_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_city(const ::std::string& value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.city)
}
inline void AccountWxInfo::set_city(const char* value) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.city)
}
inline void AccountWxInfo::set_city(const char* value, size_t size) {
  set_has_city();
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.city)
}
inline ::std::string* AccountWxInfo::mutable_city() {
  set_has_city();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_city() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.city)
  clear_has_city();
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    set_has_city();
  } else {
    clear_has_city();
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.city)
}

// optional string country = 6;
inline bool AccountWxInfo::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountWxInfo::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountWxInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountWxInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
inline const ::std::string& AccountWxInfo::country() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.country)
}
inline void AccountWxInfo::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.country)
}
inline void AccountWxInfo::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.country)
}
inline ::std::string* AccountWxInfo::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_country() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.country)
}

// optional string headimgurl = 7;
inline bool AccountWxInfo::has_headimgurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountWxInfo::set_has_headimgurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountWxInfo::clear_has_headimgurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountWxInfo::clear_headimgurl() {
  headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headimgurl();
}
inline const ::std::string& AccountWxInfo::headimgurl() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.headimgurl)
  return headimgurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_headimgurl(const ::std::string& value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.headimgurl)
}
inline void AccountWxInfo::set_headimgurl(const char* value) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.headimgurl)
}
inline void AccountWxInfo::set_headimgurl(const char* value, size_t size) {
  set_has_headimgurl();
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.headimgurl)
}
inline ::std::string* AccountWxInfo::mutable_headimgurl() {
  set_has_headimgurl();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.headimgurl)
  return headimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_headimgurl() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.headimgurl)
  clear_has_headimgurl();
  return headimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl != NULL) {
    set_has_headimgurl();
  } else {
    clear_has_headimgurl();
  }
  headimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgurl);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.headimgurl)
}

// optional string unionid = 8;
inline bool AccountWxInfo::has_unionid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountWxInfo::set_has_unionid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountWxInfo::clear_has_unionid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountWxInfo::clear_unionid() {
  unionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unionid();
}
inline const ::std::string& AccountWxInfo::unionid() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.unionid)
  return unionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_unionid(const ::std::string& value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.unionid)
}
inline void AccountWxInfo::set_unionid(const char* value) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.unionid)
}
inline void AccountWxInfo::set_unionid(const char* value, size_t size) {
  set_has_unionid();
  unionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.unionid)
}
inline ::std::string* AccountWxInfo::mutable_unionid() {
  set_has_unionid();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.unionid)
  return unionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_unionid() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.unionid)
  clear_has_unionid();
  return unionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_unionid(::std::string* unionid) {
  if (unionid != NULL) {
    set_has_unionid();
  } else {
    clear_has_unionid();
  }
  unionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unionid);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.unionid)
}

// optional string wxtoken = 9;
inline bool AccountWxInfo::has_wxtoken() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountWxInfo::set_has_wxtoken() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountWxInfo::clear_has_wxtoken() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountWxInfo::clear_wxtoken() {
  wxtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wxtoken();
}
inline const ::std::string& AccountWxInfo::wxtoken() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.wxtoken)
  return wxtoken_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_wxtoken(const ::std::string& value) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.wxtoken)
}
inline void AccountWxInfo::set_wxtoken(const char* value) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.wxtoken)
}
inline void AccountWxInfo::set_wxtoken(const char* value, size_t size) {
  set_has_wxtoken();
  wxtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.wxtoken)
}
inline ::std::string* AccountWxInfo::mutable_wxtoken() {
  set_has_wxtoken();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.wxtoken)
  return wxtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_wxtoken() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.wxtoken)
  clear_has_wxtoken();
  return wxtoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_wxtoken(::std::string* wxtoken) {
  if (wxtoken != NULL) {
    set_has_wxtoken();
  } else {
    clear_has_wxtoken();
  }
  wxtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wxtoken);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.wxtoken)
}

// optional string ip = 10;
inline bool AccountWxInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccountWxInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccountWxInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccountWxInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& AccountWxInfo::ip() const {
  // @@protoc_insertion_point(field_get:data.AccountWxInfo.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data.AccountWxInfo.ip)
}
inline void AccountWxInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data.AccountWxInfo.ip)
}
inline void AccountWxInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data.AccountWxInfo.ip)
}
inline ::std::string* AccountWxInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:data.AccountWxInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountWxInfo::release_ip() {
  // @@protoc_insertion_point(field_release:data.AccountWxInfo.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountWxInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:data.AccountWxInfo.ip)
}

// -------------------------------------------------------------------

// AccountBin

// optional uint32 Test = 1;
inline bool AccountBin::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountBin::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountBin::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountBin::clear_test() {
  test_ = 0u;
  clear_has_test();
}
inline ::google::protobuf::uint32 AccountBin::test() const {
  // @@protoc_insertion_point(field_get:data.AccountBin.Test)
  return test_;
}
inline void AccountBin::set_test(::google::protobuf::uint32 value) {
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:data.AccountBin.Test)
}

// -------------------------------------------------------------------

// GateUserInfo

// optional uint64 ID = 1;
inline bool GateUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateUserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateUserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateUserInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GateUserInfo::id() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.ID)
  return id_;
}
inline void GateUserInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.ID)
}

// optional uint32 fepserverid = 2;
inline bool GateUserInfo::has_fepserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateUserInfo::set_has_fepserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateUserInfo::clear_has_fepserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateUserInfo::clear_fepserverid() {
  fepserverid_ = 0u;
  clear_has_fepserverid();
}
inline ::google::protobuf::uint32 GateUserInfo::fepserverid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.fepserverid)
  return fepserverid_;
}
inline void GateUserInfo::set_fepserverid(::google::protobuf::uint32 value) {
  set_has_fepserverid();
  fepserverid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.fepserverid)
}

// optional uint32 ssservierid = 3;
inline bool GateUserInfo::has_ssservierid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateUserInfo::set_has_ssservierid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateUserInfo::clear_has_ssservierid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateUserInfo::clear_ssservierid() {
  ssservierid_ = 0u;
  clear_has_ssservierid();
}
inline ::google::protobuf::uint32 GateUserInfo::ssservierid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.ssservierid)
  return ssservierid_;
}
inline void GateUserInfo::set_ssservierid(::google::protobuf::uint32 value) {
  set_has_ssservierid();
  ssservierid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.ssservierid)
}

// optional uint64 sessionid = 4;
inline bool GateUserInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateUserInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateUserInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateUserInfo::clear_sessionid() {
  sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_sessionid();
}
inline ::google::protobuf::uint64 GateUserInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.sessionid)
  return sessionid_;
}
inline void GateUserInfo::set_sessionid(::google::protobuf::uint64 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.sessionid)
}

// optional uint32 countryid = 5;
inline bool GateUserInfo::has_countryid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateUserInfo::set_has_countryid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateUserInfo::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateUserInfo::clear_countryid() {
  countryid_ = 0u;
  clear_has_countryid();
}
inline ::google::protobuf::uint32 GateUserInfo::countryid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.countryid)
  return countryid_;
}
inline void GateUserInfo::set_countryid(::google::protobuf::uint32 value) {
  set_has_countryid();
  countryid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.countryid)
}

// optional uint32 mapid = 6;
inline bool GateUserInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GateUserInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GateUserInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GateUserInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 GateUserInfo::mapid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.mapid)
  return mapid_;
}
inline void GateUserInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.mapid)
}

// optional uint32 sceneid = 7;
inline bool GateUserInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GateUserInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GateUserInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GateUserInfo::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 GateUserInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.sceneid)
  return sceneid_;
}
inline void GateUserInfo::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.sceneid)
}

// optional uint32 zoneid = 8;
inline bool GateUserInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GateUserInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GateUserInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GateUserInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 GateUserInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.zoneid)
  return zoneid_;
}
inline void GateUserInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.zoneid)
}

// optional uint32 pos_x = 9;
inline bool GateUserInfo::has_pos_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GateUserInfo::set_has_pos_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GateUserInfo::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GateUserInfo::clear_pos_x() {
  pos_x_ = 0u;
  clear_has_pos_x();
}
inline ::google::protobuf::uint32 GateUserInfo::pos_x() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.pos_x)
  return pos_x_;
}
inline void GateUserInfo::set_pos_x(::google::protobuf::uint32 value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.pos_x)
}

// optional uint32 pos_y = 10;
inline bool GateUserInfo::has_pos_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GateUserInfo::set_has_pos_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GateUserInfo::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GateUserInfo::clear_pos_y() {
  pos_y_ = 0u;
  clear_has_pos_y();
}
inline ::google::protobuf::uint32 GateUserInfo::pos_y() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.pos_y)
  return pos_y_;
}
inline void GateUserInfo::set_pos_y(::google::protobuf::uint32 value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.pos_y)
}

// optional uint32 teamid = 11;
inline bool GateUserInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GateUserInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GateUserInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GateUserInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 GateUserInfo::teamid() const {
  // @@protoc_insertion_point(field_get:data.GateUserInfo.teamid)
  return teamid_;
}
inline void GateUserInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:data.GateUserInfo.teamid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hmx_5fdata_2eproto__INCLUDED
