// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmx_msg_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hmx_msg_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace hmx_msg_login {

namespace {

const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingServerClientProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingServerClientProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SerivceListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerivceListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* users_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  users_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hmx_c_cmd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* client_status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hmx_5fmsg_5flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hmx_5fmsg_5flogin_2eproto() {
  protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hmx_msg_login.proto");
  GOOGLE_CHECK(file != NULL);
  LoginReq_descriptor_ = file->message_type(0);
  static const int LoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, server_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, broad_serivce_list_),
  };
  LoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _internal_metadata_),
      -1);
  PingServerClientProto_descriptor_ = file->message_type(1);
  static const int PingServerClientProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingServerClientProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingServerClientProto, from_server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingServerClientProto, to_server_id_),
  };
  PingServerClientProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PingServerClientProto_descriptor_,
      PingServerClientProto::default_instance_,
      PingServerClientProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingServerClientProto, _has_bits_[0]),
      -1,
      -1,
      sizeof(PingServerClientProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingServerClientProto, _internal_metadata_),
      -1);
  LoginResp_descriptor_ = file->message_type(2);
  static const int LoginResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, server_type_),
  };
  LoginResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResp_descriptor_,
      LoginResp::default_instance_,
      LoginResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(LoginResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResp, _internal_metadata_),
      -1);
  SerivceListResp_descriptor_ = file->message_type(3);
  static const int SerivceListResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceListResp, serivce_list_),
  };
  SerivceListResp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerivceListResp_descriptor_,
      SerivceListResp::default_instance_,
      SerivceListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceListResp, _has_bits_[0]),
      -1,
      -1,
      sizeof(SerivceListResp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerivceListResp, _internal_metadata_),
      -1);
  users_descriptor_ = file->message_type(4);
  static const int users_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(users, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(users, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(users, avatar_),
  };
  users_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      users_descriptor_,
      users::default_instance_,
      users_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(users, _has_bits_[0]),
      -1,
      -1,
      sizeof(users),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(users, _internal_metadata_),
      -1);
  hmx_c_cmd_descriptor_ = file->enum_type(0);
  LoginResult_descriptor_ = file->enum_type(1);
  client_status_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hmx_5fmsg_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PingServerClientProto_descriptor_, &PingServerClientProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResp_descriptor_, &LoginResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerivceListResp_descriptor_, &SerivceListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      users_descriptor_, &users::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hmx_5fmsg_5flogin_2eproto() {
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete PingServerClientProto::default_instance_;
  delete PingServerClientProto_reflection_;
  delete LoginResp::default_instance_;
  delete LoginResp_reflection_;
  delete SerivceListResp::default_instance_;
  delete SerivceListResp_reflection_;
  delete users::default_instance_;
  delete users_reflection_;
}

void protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::config::protobuf_AddDesc_hmx_5fconfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023hmx_msg_login.proto\022\rhmx_msg_login\032\020hm"
    "x_config.proto\"d\n\010LoginReq\022\'\n\013server_inf"
    "o\030\001 \001(\0132\022.config.ServerInfo\022/\n\022broad_ser"
    "ivce_list\030\002 \003(\0132\023.config.SerivceInfo\"S\n\025"
    "PingServerClientProto\022\014\n\004time\030\001 \001(\004\022\026\n\016f"
    "rom_server_id\030\002 \001(\r\022\024\n\014to_server_id\030\003 \001("
    "\r\"_\n\tLoginResp\022*\n\006result\030\001 \001(\0162\032.hmx_msg"
    "_login.LoginResult\022\021\n\tserver_id\030\002 \001(\005\022\023\n"
    "\013server_type\030\003 \001(\005\"<\n\017SerivceListResp\022)\n"
    "\014serivce_list\030\001 \003(\0132\023.config.SerivceInfo"
    "\"6\n\005users\022\013\n\003uid\030\001 \001(\r\022\020\n\010username\030\002 \001(\t"
    "\022\016\n\006avatar\030\003 \001(\t*_\n\thmx_c_cmd\022\r\n\tlogin_r"
    "eq\020d\022\017\n\nlogin_resp\020\310\001\022\r\n\010ping_req\020\254\002\022\016\n\t"
    "ping_resp\020\255\002\022\023\n\016srvlist_notify\020\220\003*4\n\013Log"
    "inResult\022\023\n\017login_r_success\020\000\022\020\n\014login_r"
    "_fail\020\001*\313\001\n\rclient_status\022\023\n\017client_s_in"
    "ited\020\000\022\026\n\022client_s_connected\020\001\022\026\n\022client"
    "_s_encrypted\020\002\022\032\n\026client_s_notify_inited"
    "\020\003\022\024\n\020client_s_logined\020\004\022\025\n\021client_s_sel"
    "ected\020\005\022\025\n\021client_s_in_world\020\006\022\025\n\021client"
    "_s_in_scene\020\007", 813);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hmx_msg_login.proto", &protobuf_RegisterTypes);
  LoginReq::default_instance_ = new LoginReq();
  PingServerClientProto::default_instance_ = new PingServerClientProto();
  LoginResp::default_instance_ = new LoginResp();
  SerivceListResp::default_instance_ = new SerivceListResp();
  users::default_instance_ = new users();
  LoginReq::default_instance_->InitAsDefaultInstance();
  PingServerClientProto::default_instance_->InitAsDefaultInstance();
  LoginResp::default_instance_->InitAsDefaultInstance();
  SerivceListResp::default_instance_->InitAsDefaultInstance();
  users::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hmx_5fmsg_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hmx_5fmsg_5flogin_2eproto {
  StaticDescriptorInitializer_hmx_5fmsg_5flogin_2eproto() {
    protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  }
} static_descriptor_initializer_hmx_5fmsg_5flogin_2eproto_;
const ::google::protobuf::EnumDescriptor* hmx_c_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hmx_c_cmd_descriptor_;
}
bool hmx_c_cmd_IsValid(int value) {
  switch(value) {
    case 100:
    case 200:
    case 300:
    case 301:
    case 400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoginResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}
bool LoginResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* client_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_status_descriptor_;
}
bool client_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReq::kServerInfoFieldNumber;
const int LoginReq::kBroadSerivceListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReq::LoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmx_msg_login.LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
  server_info_ = const_cast< ::config::ServerInfo*>(&::config::ServerInfo::default_instance());
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hmx_msg_login.LoginReq)
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  server_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:hmx_msg_login.LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (this != default_instance_) {
    delete server_info_;
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New(::google::protobuf::Arena* arena) const {
  LoginReq* n = new LoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:hmx_msg_login.LoginReq)
  if (has_server_info()) {
    if (server_info_ != NULL) server_info_->::config::ServerInfo::Clear();
  }
  broad_serivce_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmx_msg_login.LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .config.ServerInfo server_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_broad_serivce_list;
        break;
      }

      // repeated .config.SerivceInfo broad_serivce_list = 2;
      case 2: {
        if (tag == 18) {
         parse_broad_serivce_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_broad_serivce_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_broad_serivce_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_broad_serivce_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmx_msg_login.LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmx_msg_login.LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmx_msg_login.LoginReq)
  // optional .config.ServerInfo server_info = 1;
  if (has_server_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->server_info_, output);
  }

  // repeated .config.SerivceInfo broad_serivce_list = 2;
  for (unsigned int i = 0, n = this->broad_serivce_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->broad_serivce_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmx_msg_login.LoginReq)
}

::google::protobuf::uint8* LoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmx_msg_login.LoginReq)
  // optional .config.ServerInfo server_info = 1;
  if (has_server_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->server_info_, false, target);
  }

  // repeated .config.SerivceInfo broad_serivce_list = 2;
  for (unsigned int i = 0, n = this->broad_serivce_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->broad_serivce_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmx_msg_login.LoginReq)
  return target;
}

int LoginReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hmx_msg_login.LoginReq)
  int total_size = 0;

  // optional .config.ServerInfo server_info = 1;
  if (has_server_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_info_);
  }

  // repeated .config.SerivceInfo broad_serivce_list = 2;
  total_size += 1 * this->broad_serivce_list_size();
  for (int i = 0; i < this->broad_serivce_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->broad_serivce_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmx_msg_login.LoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmx_msg_login.LoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmx_msg_login.LoginReq)
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmx_msg_login.LoginReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  broad_serivce_list_.MergeFrom(from.broad_serivce_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_info()) {
      mutable_server_info()->::config::ServerInfo::MergeFrom(from.server_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmx_msg_login.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmx_msg_login.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginReq::InternalSwap(LoginReq* other) {
  std::swap(server_info_, other->server_info_);
  broad_serivce_list_.UnsafeArenaSwap(&other->broad_serivce_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReq

// optional .config.ServerInfo server_info = 1;
bool LoginReq::has_server_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginReq::set_has_server_info() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginReq::clear_has_server_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginReq::clear_server_info() {
  if (server_info_ != NULL) server_info_->::config::ServerInfo::Clear();
  clear_has_server_info();
}
const ::config::ServerInfo& LoginReq::server_info() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.LoginReq.server_info)
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
::config::ServerInfo* LoginReq::mutable_server_info() {
  set_has_server_info();
  if (server_info_ == NULL) {
    server_info_ = new ::config::ServerInfo;
  }
  // @@protoc_insertion_point(field_mutable:hmx_msg_login.LoginReq.server_info)
  return server_info_;
}
::config::ServerInfo* LoginReq::release_server_info() {
  // @@protoc_insertion_point(field_release:hmx_msg_login.LoginReq.server_info)
  clear_has_server_info();
  ::config::ServerInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
void LoginReq::set_allocated_server_info(::config::ServerInfo* server_info) {
  delete server_info_;
  server_info_ = server_info;
  if (server_info) {
    set_has_server_info();
  } else {
    clear_has_server_info();
  }
  // @@protoc_insertion_point(field_set_allocated:hmx_msg_login.LoginReq.server_info)
}

// repeated .config.SerivceInfo broad_serivce_list = 2;
int LoginReq::broad_serivce_list_size() const {
  return broad_serivce_list_.size();
}
void LoginReq::clear_broad_serivce_list() {
  broad_serivce_list_.Clear();
}
const ::config::SerivceInfo& LoginReq::broad_serivce_list(int index) const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.LoginReq.broad_serivce_list)
  return broad_serivce_list_.Get(index);
}
::config::SerivceInfo* LoginReq::mutable_broad_serivce_list(int index) {
  // @@protoc_insertion_point(field_mutable:hmx_msg_login.LoginReq.broad_serivce_list)
  return broad_serivce_list_.Mutable(index);
}
::config::SerivceInfo* LoginReq::add_broad_serivce_list() {
  // @@protoc_insertion_point(field_add:hmx_msg_login.LoginReq.broad_serivce_list)
  return broad_serivce_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::SerivceInfo >*
LoginReq::mutable_broad_serivce_list() {
  // @@protoc_insertion_point(field_mutable_list:hmx_msg_login.LoginReq.broad_serivce_list)
  return &broad_serivce_list_;
}
const ::google::protobuf::RepeatedPtrField< ::config::SerivceInfo >&
LoginReq::broad_serivce_list() const {
  // @@protoc_insertion_point(field_list:hmx_msg_login.LoginReq.broad_serivce_list)
  return broad_serivce_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingServerClientProto::kTimeFieldNumber;
const int PingServerClientProto::kFromServerIdFieldNumber;
const int PingServerClientProto::kToServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingServerClientProto::PingServerClientProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmx_msg_login.PingServerClientProto)
}

void PingServerClientProto::InitAsDefaultInstance() {
}

PingServerClientProto::PingServerClientProto(const PingServerClientProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hmx_msg_login.PingServerClientProto)
}

void PingServerClientProto::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  from_server_id_ = 0u;
  to_server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingServerClientProto::~PingServerClientProto() {
  // @@protoc_insertion_point(destructor:hmx_msg_login.PingServerClientProto)
  SharedDtor();
}

void PingServerClientProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingServerClientProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingServerClientProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingServerClientProto_descriptor_;
}

const PingServerClientProto& PingServerClientProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  return *default_instance_;
}

PingServerClientProto* PingServerClientProto::default_instance_ = NULL;

PingServerClientProto* PingServerClientProto::New(::google::protobuf::Arena* arena) const {
  PingServerClientProto* n = new PingServerClientProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingServerClientProto::Clear() {
// @@protoc_insertion_point(message_clear_start:hmx_msg_login.PingServerClientProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PingServerClientProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PingServerClientProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, to_server_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PingServerClientProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmx_msg_login.PingServerClientProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_server_id;
        break;
      }

      // optional uint32 from_server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_from_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_server_id_)));
          set_has_from_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_to_server_id;
        break;
      }

      // optional uint32 to_server_id = 3;
      case 3: {
        if (tag == 24) {
         parse_to_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_server_id_)));
          set_has_to_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmx_msg_login.PingServerClientProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmx_msg_login.PingServerClientProto)
  return false;
#undef DO_
}

void PingServerClientProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmx_msg_login.PingServerClientProto)
  // optional uint64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional uint32 from_server_id = 2;
  if (has_from_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_server_id(), output);
  }

  // optional uint32 to_server_id = 3;
  if (has_to_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_server_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmx_msg_login.PingServerClientProto)
}

::google::protobuf::uint8* PingServerClientProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmx_msg_login.PingServerClientProto)
  // optional uint64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // optional uint32 from_server_id = 2;
  if (has_from_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_server_id(), target);
  }

  // optional uint32 to_server_id = 3;
  if (has_to_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_server_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmx_msg_login.PingServerClientProto)
  return target;
}

int PingServerClientProto::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hmx_msg_login.PingServerClientProto)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 from_server_id = 2;
    if (has_from_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_server_id());
    }

    // optional uint32 to_server_id = 3;
    if (has_to_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_server_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingServerClientProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmx_msg_login.PingServerClientProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PingServerClientProto* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PingServerClientProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmx_msg_login.PingServerClientProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmx_msg_login.PingServerClientProto)
    MergeFrom(*source);
  }
}

void PingServerClientProto::MergeFrom(const PingServerClientProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmx_msg_login.PingServerClientProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_from_server_id()) {
      set_from_server_id(from.from_server_id());
    }
    if (from.has_to_server_id()) {
      set_to_server_id(from.to_server_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PingServerClientProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmx_msg_login.PingServerClientProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingServerClientProto::CopyFrom(const PingServerClientProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmx_msg_login.PingServerClientProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingServerClientProto::IsInitialized() const {

  return true;
}

void PingServerClientProto::Swap(PingServerClientProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingServerClientProto::InternalSwap(PingServerClientProto* other) {
  std::swap(time_, other->time_);
  std::swap(from_server_id_, other->from_server_id_);
  std::swap(to_server_id_, other->to_server_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingServerClientProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingServerClientProto_descriptor_;
  metadata.reflection = PingServerClientProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingServerClientProto

// optional uint64 time = 1;
bool PingServerClientProto::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingServerClientProto::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void PingServerClientProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingServerClientProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
 ::google::protobuf::uint64 PingServerClientProto::time() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.PingServerClientProto.time)
  return time_;
}
 void PingServerClientProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.PingServerClientProto.time)
}

// optional uint32 from_server_id = 2;
bool PingServerClientProto::has_from_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PingServerClientProto::set_has_from_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void PingServerClientProto::clear_has_from_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void PingServerClientProto::clear_from_server_id() {
  from_server_id_ = 0u;
  clear_has_from_server_id();
}
 ::google::protobuf::uint32 PingServerClientProto::from_server_id() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.PingServerClientProto.from_server_id)
  return from_server_id_;
}
 void PingServerClientProto::set_from_server_id(::google::protobuf::uint32 value) {
  set_has_from_server_id();
  from_server_id_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.PingServerClientProto.from_server_id)
}

// optional uint32 to_server_id = 3;
bool PingServerClientProto::has_to_server_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PingServerClientProto::set_has_to_server_id() {
  _has_bits_[0] |= 0x00000004u;
}
void PingServerClientProto::clear_has_to_server_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void PingServerClientProto::clear_to_server_id() {
  to_server_id_ = 0u;
  clear_has_to_server_id();
}
 ::google::protobuf::uint32 PingServerClientProto::to_server_id() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.PingServerClientProto.to_server_id)
  return to_server_id_;
}
 void PingServerClientProto::set_to_server_id(::google::protobuf::uint32 value) {
  set_has_to_server_id();
  to_server_id_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.PingServerClientProto.to_server_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResp::kResultFieldNumber;
const int LoginResp::kServerIdFieldNumber;
const int LoginResp::kServerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResp::LoginResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmx_msg_login.LoginResp)
}

void LoginResp::InitAsDefaultInstance() {
}

LoginResp::LoginResp(const LoginResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hmx_msg_login.LoginResp)
}

void LoginResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  server_id_ = 0;
  server_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResp::~LoginResp() {
  // @@protoc_insertion_point(destructor:hmx_msg_login.LoginResp)
  SharedDtor();
}

void LoginResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResp_descriptor_;
}

const LoginResp& LoginResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  return *default_instance_;
}

LoginResp* LoginResp::default_instance_ = NULL;

LoginResp* LoginResp::New(::google::protobuf::Arena* arena) const {
  LoginResp* n = new LoginResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:hmx_msg_login.LoginResp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginResp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginResp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(result_, server_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LoginResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmx_msg_login.LoginResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hmx_msg_login.LoginResult result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hmx_msg_login::LoginResult_IsValid(value)) {
            set_result(static_cast< ::hmx_msg_login::LoginResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional int32 server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_server_type;
        break;
      }

      // optional int32 server_type = 3;
      case 3: {
        if (tag == 24) {
         parse_server_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_type_)));
          set_has_server_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmx_msg_login.LoginResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmx_msg_login.LoginResp)
  return false;
#undef DO_
}

void LoginResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmx_msg_login.LoginResp)
  // optional .hmx_msg_login.LoginResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_id(), output);
  }

  // optional int32 server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->server_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmx_msg_login.LoginResp)
}

::google::protobuf::uint8* LoginResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmx_msg_login.LoginResp)
  // optional .hmx_msg_login.LoginResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_id(), target);
  }

  // optional int32 server_type = 3;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->server_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmx_msg_login.LoginResp)
  return target;
}

int LoginResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hmx_msg_login.LoginResp)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .hmx_msg_login.LoginResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

    // optional int32 server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmx_msg_login.LoginResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LoginResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmx_msg_login.LoginResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmx_msg_login.LoginResp)
    MergeFrom(*source);
  }
}

void LoginResp::MergeFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmx_msg_login.LoginResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LoginResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmx_msg_login.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResp::CopyFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmx_msg_login.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {

  return true;
}

void LoginResp::Swap(LoginResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResp::InternalSwap(LoginResp* other) {
  std::swap(result_, other->result_);
  std::swap(server_id_, other->server_id_);
  std::swap(server_type_, other->server_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResp_descriptor_;
  metadata.reflection = LoginResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResp

// optional .hmx_msg_login.LoginResult result = 1;
bool LoginResp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::hmx_msg_login::LoginResult LoginResp::result() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.LoginResp.result)
  return static_cast< ::hmx_msg_login::LoginResult >(result_);
}
 void LoginResp::set_result(::hmx_msg_login::LoginResult value) {
  assert(::hmx_msg_login::LoginResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.LoginResp.result)
}

// optional int32 server_id = 2;
bool LoginResp::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResp::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResp::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResp::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
 ::google::protobuf::int32 LoginResp::server_id() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.LoginResp.server_id)
  return server_id_;
}
 void LoginResp::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.LoginResp.server_id)
}

// optional int32 server_type = 3;
bool LoginResp::has_server_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginResp::set_has_server_type() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginResp::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginResp::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
 ::google::protobuf::int32 LoginResp::server_type() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.LoginResp.server_type)
  return server_type_;
}
 void LoginResp::set_server_type(::google::protobuf::int32 value) {
  set_has_server_type();
  server_type_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.LoginResp.server_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerivceListResp::kSerivceListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerivceListResp::SerivceListResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmx_msg_login.SerivceListResp)
}

void SerivceListResp::InitAsDefaultInstance() {
}

SerivceListResp::SerivceListResp(const SerivceListResp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hmx_msg_login.SerivceListResp)
}

void SerivceListResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerivceListResp::~SerivceListResp() {
  // @@protoc_insertion_point(destructor:hmx_msg_login.SerivceListResp)
  SharedDtor();
}

void SerivceListResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SerivceListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerivceListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerivceListResp_descriptor_;
}

const SerivceListResp& SerivceListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  return *default_instance_;
}

SerivceListResp* SerivceListResp::default_instance_ = NULL;

SerivceListResp* SerivceListResp::New(::google::protobuf::Arena* arena) const {
  SerivceListResp* n = new SerivceListResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerivceListResp::Clear() {
// @@protoc_insertion_point(message_clear_start:hmx_msg_login.SerivceListResp)
  serivce_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SerivceListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmx_msg_login.SerivceListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config.SerivceInfo serivce_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_serivce_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_serivce_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_serivce_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmx_msg_login.SerivceListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmx_msg_login.SerivceListResp)
  return false;
#undef DO_
}

void SerivceListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmx_msg_login.SerivceListResp)
  // repeated .config.SerivceInfo serivce_list = 1;
  for (unsigned int i = 0, n = this->serivce_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serivce_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmx_msg_login.SerivceListResp)
}

::google::protobuf::uint8* SerivceListResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmx_msg_login.SerivceListResp)
  // repeated .config.SerivceInfo serivce_list = 1;
  for (unsigned int i = 0, n = this->serivce_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->serivce_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmx_msg_login.SerivceListResp)
  return target;
}

int SerivceListResp::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hmx_msg_login.SerivceListResp)
  int total_size = 0;

  // repeated .config.SerivceInfo serivce_list = 1;
  total_size += 1 * this->serivce_list_size();
  for (int i = 0; i < this->serivce_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serivce_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerivceListResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmx_msg_login.SerivceListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SerivceListResp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SerivceListResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmx_msg_login.SerivceListResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmx_msg_login.SerivceListResp)
    MergeFrom(*source);
  }
}

void SerivceListResp::MergeFrom(const SerivceListResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmx_msg_login.SerivceListResp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  serivce_list_.MergeFrom(from.serivce_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SerivceListResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmx_msg_login.SerivceListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerivceListResp::CopyFrom(const SerivceListResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmx_msg_login.SerivceListResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerivceListResp::IsInitialized() const {

  return true;
}

void SerivceListResp::Swap(SerivceListResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerivceListResp::InternalSwap(SerivceListResp* other) {
  serivce_list_.UnsafeArenaSwap(&other->serivce_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerivceListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerivceListResp_descriptor_;
  metadata.reflection = SerivceListResp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerivceListResp

// repeated .config.SerivceInfo serivce_list = 1;
int SerivceListResp::serivce_list_size() const {
  return serivce_list_.size();
}
void SerivceListResp::clear_serivce_list() {
  serivce_list_.Clear();
}
const ::config::SerivceInfo& SerivceListResp::serivce_list(int index) const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.SerivceListResp.serivce_list)
  return serivce_list_.Get(index);
}
::config::SerivceInfo* SerivceListResp::mutable_serivce_list(int index) {
  // @@protoc_insertion_point(field_mutable:hmx_msg_login.SerivceListResp.serivce_list)
  return serivce_list_.Mutable(index);
}
::config::SerivceInfo* SerivceListResp::add_serivce_list() {
  // @@protoc_insertion_point(field_add:hmx_msg_login.SerivceListResp.serivce_list)
  return serivce_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::SerivceInfo >*
SerivceListResp::mutable_serivce_list() {
  // @@protoc_insertion_point(field_mutable_list:hmx_msg_login.SerivceListResp.serivce_list)
  return &serivce_list_;
}
const ::google::protobuf::RepeatedPtrField< ::config::SerivceInfo >&
SerivceListResp::serivce_list() const {
  // @@protoc_insertion_point(field_list:hmx_msg_login.SerivceListResp.serivce_list)
  return serivce_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int users::kUidFieldNumber;
const int users::kUsernameFieldNumber;
const int users::kAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

users::users()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hmx_msg_login.users)
}

void users::InitAsDefaultInstance() {
}

users::users(const users& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hmx_msg_login.users)
}

void users::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

users::~users() {
  // @@protoc_insertion_point(destructor:hmx_msg_login.users)
  SharedDtor();
}

void users::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* users::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return users_descriptor_;
}

const users& users::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hmx_5fmsg_5flogin_2eproto();
  return *default_instance_;
}

users* users::default_instance_ = NULL;

users* users::New(::google::protobuf::Arena* arena) const {
  users* n = new users;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void users::Clear() {
// @@protoc_insertion_point(message_clear_start:hmx_msg_login.users)
  if (_has_bits_[0 / 32] & 7u) {
    uid_ = 0u;
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_avatar()) {
      avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hmx_msg_login.users)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hmx_msg_login.users.username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (tag == 26) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hmx_msg_login.users.avatar");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hmx_msg_login.users)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hmx_msg_login.users)
  return false;
#undef DO_
}

void users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hmx_msg_login.users)
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmx_msg_login.users.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmx_msg_login.users.avatar");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hmx_msg_login.users)
}

::google::protobuf::uint8* users::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmx_msg_login.users)
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmx_msg_login.users.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hmx_msg_login.users.avatar");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmx_msg_login.users)
  return target;
}

int users::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:hmx_msg_login.users)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void users::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmx_msg_login.users)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const users* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const users>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmx_msg_login.users)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmx_msg_login.users)
    MergeFrom(*source);
  }
}

void users::MergeFrom(const users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmx_msg_login.users)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_avatar()) {
      set_has_avatar();
      avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void users::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmx_msg_login.users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void users::CopyFrom(const users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmx_msg_login.users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool users::IsInitialized() const {

  return true;
}

void users::Swap(users* other) {
  if (other == this) return;
  InternalSwap(other);
}
void users::InternalSwap(users* other) {
  std::swap(uid_, other->uid_);
  username_.Swap(&other->username_);
  avatar_.Swap(&other->avatar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata users::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = users_descriptor_;
  metadata.reflection = users_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// users

// optional uint32 uid = 1;
bool users::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void users::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void users::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void users::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
 ::google::protobuf::uint32 users::uid() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.users.uid)
  return uid_;
}
 void users::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:hmx_msg_login.users.uid)
}

// optional string username = 2;
bool users::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void users::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void users::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void users::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& users::username() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.users.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void users::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hmx_msg_login.users.username)
}
 void users::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hmx_msg_login.users.username)
}
 void users::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hmx_msg_login.users.username)
}
 ::std::string* users::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:hmx_msg_login.users.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* users::release_username() {
  // @@protoc_insertion_point(field_release:hmx_msg_login.users.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void users::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:hmx_msg_login.users.username)
}

// optional string avatar = 3;
bool users::has_avatar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void users::set_has_avatar() {
  _has_bits_[0] |= 0x00000004u;
}
void users::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000004u;
}
void users::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_avatar();
}
 const ::std::string& users::avatar() const {
  // @@protoc_insertion_point(field_get:hmx_msg_login.users.avatar)
  return avatar_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void users::set_avatar(const ::std::string& value) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hmx_msg_login.users.avatar)
}
 void users::set_avatar(const char* value) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hmx_msg_login.users.avatar)
}
 void users::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hmx_msg_login.users.avatar)
}
 ::std::string* users::mutable_avatar() {
  set_has_avatar();
  // @@protoc_insertion_point(field_mutable:hmx_msg_login.users.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* users::release_avatar() {
  // @@protoc_insertion_point(field_release:hmx_msg_login.users.avatar)
  clear_has_avatar();
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void users::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    set_has_avatar();
  } else {
    clear_has_avatar();
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:hmx_msg_login.users.avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hmx_msg_login

// @@protoc_insertion_point(global_scope)
