// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hmx_config.proto

#ifndef PROTOBUF_hmx_5fconfig_2eproto__INCLUDED
#define PROTOBUF_hmx_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace config {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hmx_5fconfig_2eproto();
void protobuf_AssignDesc_hmx_5fconfig_2eproto();
void protobuf_ShutdownFile_hmx_5fconfig_2eproto();

class SerivceInfo;
class ServerInfo;

enum server_type {
  server_t_gateway = 1,
  server_t_login = 2,
  server_t_world = 3,
  server_t_scene = 4,
  server_t_database = 5
};
bool server_type_IsValid(int value);
const server_type server_type_MIN = server_t_gateway;
const server_type server_type_MAX = server_t_database;
const int server_type_ARRAYSIZE = server_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* server_type_descriptor();
inline const ::std::string& server_type_Name(server_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    server_type_descriptor(), value);
}
inline bool server_type_Parse(
    const ::std::string& name, server_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<server_type>(
    server_type_descriptor(), name, value);
}
// ===================================================================

class ServerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.ServerInfo) */ {
 public:
  ServerInfo();
  virtual ~ServerInfo();

  ServerInfo(const ServerInfo& from);

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerInfo& default_instance();

  void Swap(ServerInfo* other);

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const { return New(NULL); }

  ServerInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerID = 1;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServerIDFieldNumber = 1;
  ::google::protobuf::uint32 serverid() const;
  void set_serverid(::google::protobuf::uint32 value);

  // optional string ServerName = 2;
  bool has_servername() const;
  void clear_servername();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // optional bool Recvsrvlist = 3;
  bool has_recvsrvlist() const;
  void clear_recvsrvlist();
  static const int kRecvsrvlistFieldNumber = 3;
  bool recvsrvlist() const;
  void set_recvsrvlist(bool value);

  // optional bool Broadcastlist = 4;
  bool has_broadcastlist() const;
  void clear_broadcastlist();
  static const int kBroadcastlistFieldNumber = 4;
  bool broadcastlist() const;
  void set_broadcastlist(bool value);

  // @@protoc_insertion_point(class_scope:config.ServerInfo)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_recvsrvlist();
  inline void clear_has_recvsrvlist();
  inline void set_has_broadcastlist();
  inline void clear_has_broadcastlist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::uint32 serverid_;
  bool recvsrvlist_;
  bool broadcastlist_;
  friend void  protobuf_AddDesc_hmx_5fconfig_2eproto();
  friend void protobuf_AssignDesc_hmx_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SerivceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.SerivceInfo) */ {
 public:
  SerivceInfo();
  virtual ~SerivceInfo();

  SerivceInfo(const SerivceInfo& from);

  inline SerivceInfo& operator=(const SerivceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SerivceInfo& default_instance();

  void Swap(SerivceInfo* other);

  // implements Message ----------------------------------------------

  inline SerivceInfo* New() const { return New(NULL); }

  SerivceInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SerivceInfo& from);
  void MergeFrom(const SerivceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerivceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SerivceID = 1;
  bool has_serivceid() const;
  void clear_serivceid();
  static const int kSerivceIDFieldNumber = 1;
  ::google::protobuf::uint32 serivceid() const;
  void set_serivceid(::google::protobuf::uint32 value);

  // optional string SerivceName = 2;
  bool has_serivcename() const;
  void clear_serivcename();
  static const int kSerivceNameFieldNumber = 2;
  const ::std::string& serivcename() const;
  void set_serivcename(const ::std::string& value);
  void set_serivcename(const char* value);
  void set_serivcename(const char* value, size_t size);
  ::std::string* mutable_serivcename();
  ::std::string* release_serivcename();
  void set_allocated_serivcename(::std::string* serivcename);

  // optional string SerivceFun = 3;
  bool has_serivcefun() const;
  void clear_serivcefun();
  static const int kSerivceFunFieldNumber = 3;
  const ::std::string& serivcefun() const;
  void set_serivcefun(const ::std::string& value);
  void set_serivcefun(const char* value);
  void set_serivcefun(const char* value, size_t size);
  ::std::string* mutable_serivcefun();
  ::std::string* release_serivcefun();
  void set_allocated_serivcefun(::std::string* serivcefun);

  // optional string SerivceIP = 4;
  bool has_serivceip() const;
  void clear_serivceip();
  static const int kSerivceIPFieldNumber = 4;
  const ::std::string& serivceip() const;
  void set_serivceip(const ::std::string& value);
  void set_serivceip(const char* value);
  void set_serivceip(const char* value, size_t size);
  ::std::string* mutable_serivceip();
  ::std::string* release_serivceip();
  void set_allocated_serivceip(::std::string* serivceip);

  // optional uint32 SerivcePort = 5;
  bool has_serivceport() const;
  void clear_serivceport();
  static const int kSerivcePortFieldNumber = 5;
  ::google::protobuf::uint32 serivceport() const;
  void set_serivceport(::google::protobuf::uint32 value);

  // optional uint32 SerivceRemoteid = 6;
  bool has_serivceremoteid() const;
  void clear_serivceremoteid();
  static const int kSerivceRemoteidFieldNumber = 6;
  ::google::protobuf::uint32 serivceremoteid() const;
  void set_serivceremoteid(::google::protobuf::uint32 value);

  // optional string SerivceUser = 7;
  bool has_serivceuser() const;
  void clear_serivceuser();
  static const int kSerivceUserFieldNumber = 7;
  const ::std::string& serivceuser() const;
  void set_serivceuser(const ::std::string& value);
  void set_serivceuser(const char* value);
  void set_serivceuser(const char* value, size_t size);
  ::std::string* mutable_serivceuser();
  ::std::string* release_serivceuser();
  void set_allocated_serivceuser(::std::string* serivceuser);

  // optional string SerivcePasswd = 8;
  bool has_serivcepasswd() const;
  void clear_serivcepasswd();
  static const int kSerivcePasswdFieldNumber = 8;
  const ::std::string& serivcepasswd() const;
  void set_serivcepasswd(const ::std::string& value);
  void set_serivcepasswd(const char* value);
  void set_serivcepasswd(const char* value, size_t size);
  ::std::string* mutable_serivcepasswd();
  ::std::string* release_serivcepasswd();
  void set_allocated_serivcepasswd(::std::string* serivcepasswd);

  // optional string SerivceValue = 9;
  bool has_serivcevalue() const;
  void clear_serivcevalue();
  static const int kSerivceValueFieldNumber = 9;
  const ::std::string& serivcevalue() const;
  void set_serivcevalue(const ::std::string& value);
  void set_serivcevalue(const char* value);
  void set_serivcevalue(const char* value, size_t size);
  ::std::string* mutable_serivcevalue();
  ::std::string* release_serivcevalue();
  void set_allocated_serivcevalue(::std::string* serivcevalue);

  // optional uint32 Maxconntions = 10;
  bool has_maxconntions() const;
  void clear_maxconntions();
  static const int kMaxconntionsFieldNumber = 10;
  ::google::protobuf::uint32 maxconntions() const;
  void set_maxconntions(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:config.SerivceInfo)
 private:
  inline void set_has_serivceid();
  inline void clear_has_serivceid();
  inline void set_has_serivcename();
  inline void clear_has_serivcename();
  inline void set_has_serivcefun();
  inline void clear_has_serivcefun();
  inline void set_has_serivceip();
  inline void clear_has_serivceip();
  inline void set_has_serivceport();
  inline void clear_has_serivceport();
  inline void set_has_serivceremoteid();
  inline void clear_has_serivceremoteid();
  inline void set_has_serivceuser();
  inline void clear_has_serivceuser();
  inline void set_has_serivcepasswd();
  inline void clear_has_serivcepasswd();
  inline void set_has_serivcevalue();
  inline void clear_has_serivcevalue();
  inline void set_has_maxconntions();
  inline void clear_has_maxconntions();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serivcename_;
  ::google::protobuf::internal::ArenaStringPtr serivcefun_;
  ::google::protobuf::uint32 serivceid_;
  ::google::protobuf::uint32 serivceport_;
  ::google::protobuf::internal::ArenaStringPtr serivceip_;
  ::google::protobuf::internal::ArenaStringPtr serivceuser_;
  ::google::protobuf::internal::ArenaStringPtr serivcepasswd_;
  ::google::protobuf::uint32 serivceremoteid_;
  ::google::protobuf::uint32 maxconntions_;
  ::google::protobuf::internal::ArenaStringPtr serivcevalue_;
  friend void  protobuf_AddDesc_hmx_5fconfig_2eproto();
  friend void protobuf_AssignDesc_hmx_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_hmx_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SerivceInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerInfo

// optional uint32 ServerID = 1;
inline bool ServerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 ServerInfo::serverid() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.ServerID)
  return serverid_;
}
inline void ServerInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.ServerID)
}

// optional string ServerName = 2;
inline bool ServerInfo::has_servername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerInfo::set_has_servername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerInfo::clear_has_servername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servername();
}
inline const ::std::string& ServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.ServerName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_servername(const ::std::string& value) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.ServerInfo.ServerName)
}
inline void ServerInfo::set_servername(const char* value) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.ServerInfo.ServerName)
}
inline void ServerInfo::set_servername(const char* value, size_t size) {
  set_has_servername();
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.ServerInfo.ServerName)
}
inline ::std::string* ServerInfo::mutable_servername() {
  set_has_servername();
  // @@protoc_insertion_point(field_mutable:config.ServerInfo.ServerName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerInfo::release_servername() {
  // @@protoc_insertion_point(field_release:config.ServerInfo.ServerName)
  clear_has_servername();
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerInfo::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    set_has_servername();
  } else {
    clear_has_servername();
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:config.ServerInfo.ServerName)
}

// optional bool Recvsrvlist = 3;
inline bool ServerInfo::has_recvsrvlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerInfo::set_has_recvsrvlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerInfo::clear_has_recvsrvlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerInfo::clear_recvsrvlist() {
  recvsrvlist_ = false;
  clear_has_recvsrvlist();
}
inline bool ServerInfo::recvsrvlist() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.Recvsrvlist)
  return recvsrvlist_;
}
inline void ServerInfo::set_recvsrvlist(bool value) {
  set_has_recvsrvlist();
  recvsrvlist_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.Recvsrvlist)
}

// optional bool Broadcastlist = 4;
inline bool ServerInfo::has_broadcastlist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerInfo::set_has_broadcastlist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerInfo::clear_has_broadcastlist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerInfo::clear_broadcastlist() {
  broadcastlist_ = false;
  clear_has_broadcastlist();
}
inline bool ServerInfo::broadcastlist() const {
  // @@protoc_insertion_point(field_get:config.ServerInfo.Broadcastlist)
  return broadcastlist_;
}
inline void ServerInfo::set_broadcastlist(bool value) {
  set_has_broadcastlist();
  broadcastlist_ = value;
  // @@protoc_insertion_point(field_set:config.ServerInfo.Broadcastlist)
}

// -------------------------------------------------------------------

// SerivceInfo

// optional uint32 SerivceID = 1;
inline bool SerivceInfo::has_serivceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SerivceInfo::set_has_serivceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SerivceInfo::clear_has_serivceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SerivceInfo::clear_serivceid() {
  serivceid_ = 0u;
  clear_has_serivceid();
}
inline ::google::protobuf::uint32 SerivceInfo::serivceid() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceID)
  return serivceid_;
}
inline void SerivceInfo::set_serivceid(::google::protobuf::uint32 value) {
  set_has_serivceid();
  serivceid_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceID)
}

// optional string SerivceName = 2;
inline bool SerivceInfo::has_serivcename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SerivceInfo::set_has_serivcename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SerivceInfo::clear_has_serivcename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SerivceInfo::clear_serivcename() {
  serivcename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcename();
}
inline const ::std::string& SerivceInfo::serivcename() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceName)
  return serivcename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivcename(const ::std::string& value) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceName)
}
inline void SerivceInfo::set_serivcename(const char* value) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceName)
}
inline void SerivceInfo::set_serivcename(const char* value, size_t size) {
  set_has_serivcename();
  serivcename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceName)
}
inline ::std::string* SerivceInfo::mutable_serivcename() {
  set_has_serivcename();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceName)
  return serivcename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivcename() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceName)
  clear_has_serivcename();
  return serivcename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivcename(::std::string* serivcename) {
  if (serivcename != NULL) {
    set_has_serivcename();
  } else {
    clear_has_serivcename();
  }
  serivcename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcename);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceName)
}

// optional string SerivceFun = 3;
inline bool SerivceInfo::has_serivcefun() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SerivceInfo::set_has_serivcefun() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SerivceInfo::clear_has_serivcefun() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SerivceInfo::clear_serivcefun() {
  serivcefun_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcefun();
}
inline const ::std::string& SerivceInfo::serivcefun() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceFun)
  return serivcefun_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivcefun(const ::std::string& value) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceFun)
}
inline void SerivceInfo::set_serivcefun(const char* value) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceFun)
}
inline void SerivceInfo::set_serivcefun(const char* value, size_t size) {
  set_has_serivcefun();
  serivcefun_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceFun)
}
inline ::std::string* SerivceInfo::mutable_serivcefun() {
  set_has_serivcefun();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceFun)
  return serivcefun_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivcefun() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceFun)
  clear_has_serivcefun();
  return serivcefun_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivcefun(::std::string* serivcefun) {
  if (serivcefun != NULL) {
    set_has_serivcefun();
  } else {
    clear_has_serivcefun();
  }
  serivcefun_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcefun);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceFun)
}

// optional string SerivceIP = 4;
inline bool SerivceInfo::has_serivceip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SerivceInfo::set_has_serivceip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SerivceInfo::clear_has_serivceip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SerivceInfo::clear_serivceip() {
  serivceip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivceip();
}
inline const ::std::string& SerivceInfo::serivceip() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceIP)
  return serivceip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivceip(const ::std::string& value) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceIP)
}
inline void SerivceInfo::set_serivceip(const char* value) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceIP)
}
inline void SerivceInfo::set_serivceip(const char* value, size_t size) {
  set_has_serivceip();
  serivceip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceIP)
}
inline ::std::string* SerivceInfo::mutable_serivceip() {
  set_has_serivceip();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceIP)
  return serivceip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivceip() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceIP)
  clear_has_serivceip();
  return serivceip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivceip(::std::string* serivceip) {
  if (serivceip != NULL) {
    set_has_serivceip();
  } else {
    clear_has_serivceip();
  }
  serivceip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivceip);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceIP)
}

// optional uint32 SerivcePort = 5;
inline bool SerivceInfo::has_serivceport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SerivceInfo::set_has_serivceport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SerivceInfo::clear_has_serivceport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SerivceInfo::clear_serivceport() {
  serivceport_ = 0u;
  clear_has_serivceport();
}
inline ::google::protobuf::uint32 SerivceInfo::serivceport() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivcePort)
  return serivceport_;
}
inline void SerivceInfo::set_serivceport(::google::protobuf::uint32 value) {
  set_has_serivceport();
  serivceport_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivcePort)
}

// optional uint32 SerivceRemoteid = 6;
inline bool SerivceInfo::has_serivceremoteid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SerivceInfo::set_has_serivceremoteid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SerivceInfo::clear_has_serivceremoteid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SerivceInfo::clear_serivceremoteid() {
  serivceremoteid_ = 0u;
  clear_has_serivceremoteid();
}
inline ::google::protobuf::uint32 SerivceInfo::serivceremoteid() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceRemoteid)
  return serivceremoteid_;
}
inline void SerivceInfo::set_serivceremoteid(::google::protobuf::uint32 value) {
  set_has_serivceremoteid();
  serivceremoteid_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceRemoteid)
}

// optional string SerivceUser = 7;
inline bool SerivceInfo::has_serivceuser() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SerivceInfo::set_has_serivceuser() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SerivceInfo::clear_has_serivceuser() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SerivceInfo::clear_serivceuser() {
  serivceuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivceuser();
}
inline const ::std::string& SerivceInfo::serivceuser() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceUser)
  return serivceuser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivceuser(const ::std::string& value) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceUser)
}
inline void SerivceInfo::set_serivceuser(const char* value) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceUser)
}
inline void SerivceInfo::set_serivceuser(const char* value, size_t size) {
  set_has_serivceuser();
  serivceuser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceUser)
}
inline ::std::string* SerivceInfo::mutable_serivceuser() {
  set_has_serivceuser();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceUser)
  return serivceuser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivceuser() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceUser)
  clear_has_serivceuser();
  return serivceuser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivceuser(::std::string* serivceuser) {
  if (serivceuser != NULL) {
    set_has_serivceuser();
  } else {
    clear_has_serivceuser();
  }
  serivceuser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivceuser);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceUser)
}

// optional string SerivcePasswd = 8;
inline bool SerivceInfo::has_serivcepasswd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SerivceInfo::set_has_serivcepasswd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SerivceInfo::clear_has_serivcepasswd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SerivceInfo::clear_serivcepasswd() {
  serivcepasswd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcepasswd();
}
inline const ::std::string& SerivceInfo::serivcepasswd() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivcePasswd)
  return serivcepasswd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivcepasswd(const ::std::string& value) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivcePasswd)
}
inline void SerivceInfo::set_serivcepasswd(const char* value) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivcePasswd)
}
inline void SerivceInfo::set_serivcepasswd(const char* value, size_t size) {
  set_has_serivcepasswd();
  serivcepasswd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivcePasswd)
}
inline ::std::string* SerivceInfo::mutable_serivcepasswd() {
  set_has_serivcepasswd();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivcePasswd)
  return serivcepasswd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivcepasswd() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivcePasswd)
  clear_has_serivcepasswd();
  return serivcepasswd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivcepasswd(::std::string* serivcepasswd) {
  if (serivcepasswd != NULL) {
    set_has_serivcepasswd();
  } else {
    clear_has_serivcepasswd();
  }
  serivcepasswd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcepasswd);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivcePasswd)
}

// optional string SerivceValue = 9;
inline bool SerivceInfo::has_serivcevalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SerivceInfo::set_has_serivcevalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SerivceInfo::clear_has_serivcevalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SerivceInfo::clear_serivcevalue() {
  serivcevalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serivcevalue();
}
inline const ::std::string& SerivceInfo::serivcevalue() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.SerivceValue)
  return serivcevalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_serivcevalue(const ::std::string& value) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.SerivceInfo.SerivceValue)
}
inline void SerivceInfo::set_serivcevalue(const char* value) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.SerivceInfo.SerivceValue)
}
inline void SerivceInfo::set_serivcevalue(const char* value, size_t size) {
  set_has_serivcevalue();
  serivcevalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.SerivceInfo.SerivceValue)
}
inline ::std::string* SerivceInfo::mutable_serivcevalue() {
  set_has_serivcevalue();
  // @@protoc_insertion_point(field_mutable:config.SerivceInfo.SerivceValue)
  return serivcevalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SerivceInfo::release_serivcevalue() {
  // @@protoc_insertion_point(field_release:config.SerivceInfo.SerivceValue)
  clear_has_serivcevalue();
  return serivcevalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SerivceInfo::set_allocated_serivcevalue(::std::string* serivcevalue) {
  if (serivcevalue != NULL) {
    set_has_serivcevalue();
  } else {
    clear_has_serivcevalue();
  }
  serivcevalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serivcevalue);
  // @@protoc_insertion_point(field_set_allocated:config.SerivceInfo.SerivceValue)
}

// optional uint32 Maxconntions = 10;
inline bool SerivceInfo::has_maxconntions() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SerivceInfo::set_has_maxconntions() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SerivceInfo::clear_has_maxconntions() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SerivceInfo::clear_maxconntions() {
  maxconntions_ = 0u;
  clear_has_maxconntions();
}
inline ::google::protobuf::uint32 SerivceInfo::maxconntions() const {
  // @@protoc_insertion_point(field_get:config.SerivceInfo.Maxconntions)
  return maxconntions_;
}
inline void SerivceInfo::set_maxconntions(::google::protobuf::uint32 value) {
  set_has_maxconntions();
  maxconntions_ = value;
  // @@protoc_insertion_point(field_set:config.SerivceInfo.Maxconntions)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::server_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::server_type>() {
  return ::config::server_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hmx_5fconfig_2eproto__INCLUDED
